%!PS-Adobe-3.1 EPSF-3.0%%Title: lwm1_mg.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Barb Backes%%CreationDate: 6/25/03%%BoundingBox: 0 0 170 114%%HiResBoundingBox: 0 0 169.9405 113.0127%%CropBox: 0 0 169.9405 113.0127%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Magenta Yellow Black%%DocumentCustomColors: (PANTONE 123 C)%%+ (PANTONE 208 C)%%CMYKCustomColor: 0 0.24 0.94 0 (PANTONE 123 C)%%+ 0 1 0.36 0.37 (PANTONE 208 C)%%RGBCustomColor: %AI7_Thumbnail: 128 88 8%%BeginData: 10630 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD12FFCBFD1A6970CBFD0AFFA19B7094FD1C6970FD07FF9BFD0E69%CAFFFF709BFD1EFFA2FD1B69FD07FF9A70FD216994FD07FFA1FD0E69A2FF%7069709BFD1EFFA1FD1A69CAFD04FF9BFD17696FFD0C6970FD07FF9BFD0E%69CAFFC47094A8FD1FFF94FD1969A1FFFFA870FD1769C16FFD0C6994FD07%FFA1FD0E69A2FFFFCAA8FD20FFA1FD196970FFCA94FD1769C19FFD0D6970%FD07FF9BFD0E69CAFD24FFCAFD1A69FF94FD176999C09369696FC1FD0969%94FD07FFA1FD0E69A2FD24FFA2FD1A699BFD176999C6C1696999C7FD0A69%70FD07FF9BFD0E69CAFD24FF9BFD176993FD19696F9EC66F6998C66F6969%696FFD066994FD07FFA1FD0E69A2FD24FF70FD176999C16FFD0D696F9999%BB99996F6969939EC79F939EC799696999C099FD066970FD07FF9BFD0E69%CAFD23FFA8FD196998C6FD0B696F98C7C6C6C0C7C6C69EC19EC6C0999EC6%9E6969C1C099FD076994FD07FFA1FD0E69A2FD23FFCAFD0D6994FD076993%6F69696999FD0B699FC7C6C7C6C7C6C7C6C7C6C7C6C7C0C7C09399C7C699%69696993FD046970FD07FF9BFD0E69CAFD23FF9AFD0D699BFD0869C19899%FD0D69C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C09F9EC69E9369696EC19EFD%046994FD07FFA1FD0E69A2FD23FF94FD0C6970FFFD0969C1C6C799FD0A69%99C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C09393C1C6C799FD056970%FD07FF9BFD0E69CAFD23FFFD0D69A1FF6FFD0969939EC1FD0B69C7C6C6C0%C7C6C6C0C7C6C6C0C7C6C6C0C7C69F9EC7C6C1FD076994FD07FFA1FD0E69%A2FD22FFA1FD0D69A8FF70FD0469939EC1939369696FFD0B696FC7C6C7C6%C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C09969696F999FC1696970FD07FF9B%FD0E69CAFD22FF9BFD0D69FFFFA1FD05696F98C6C0C79E99FD0D69C1C0C6%C0C6C0C6C0C6C0C6C0C6C0C6C0C69E9992C1C0C69E9969696994FD07FFA1%FD0E69A2FD22FF70FD0C699AFFFFA8FD086999C1C7C699FD0D699399C7C6%C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C193FD056970FD07FF9BFD0E69CA%FD21FFCAFD0D699BFFFFFFFD04696F93FD04696F9F98FD1069999EC6C0C7%C6C6C0C7C6C6C0C7C6C69893FD04696F6F6994FD07FFA1FD0E69A2FD21FF%CAFD0D69CAFFFFFF9B69696FC1C0C7C6C7C6C19FC16FFD11696F99C0C7C6%C7C6C7C6C7C6C7C0C19EC7C6C7C6C79F6970FD07FF9BFD0E69CAFD21FF76%FD0D69FD04FF9BFD06699998C6C0C6C0C1FD146992C7C0C6C0C6C0C6C0C6%C0C69E9F6F6F69696994FD07FFA1FD0E69A2FD21FF94FD0C6970FD04FFCB%FD0969999FC7C6C1FD156999C6C7C6C7C6C7C0C1FD086970FD07FF9BFD0E%69CAFD21FFFD0D69A1FD05FF696993999F98C1C6C6C0C7C6C6C0C1FD1569%6F9EC7C6C6C0C7C6C6C0C79EC198996F94FD07FFA1FD0E69A2FD20FFA2FD%0D69A2FD05FF946969FD0499C19FC7C6C7C6C7C6C793FD14696F9EC7C6C7%C6C7C0C19EC199996F9370FD07FF9BFD0E69CAFD20FF9BFD0D69FD06FFA1%FD07696F6F999EC6C0C6C0C69893FD13696F9EC6C0C09899FD076994FD07%FFA1FD0E69A2FD20FF70FD0C699AFD06FFCA6969696F9999C7C6C7C6C7C6%C7C6C7C6C7C6C79993FD116999C6C7C6C7C6C79EC19393696970FD07FF9B%FD0E69CAFD1FFFA8FD0D699BFD07FF696F9EC79EC198C198999EC7C6C6C0%C7C6C6C0C7C6C16E6FFD0F69C1C6C198C19EC198C7C6C06994FD07FFA1FD%0E69A2FD1FFFCAFD0D69CAFD07FF9BFD076999C0C7C6C7C6C7C6C7C6C7C6%C7C6C7C6C193FD0D6993C7C6C193FD076970FD07FF9BFD0E69CAFD1FFF9A%FD0D699BA19BA19BA19BA16FFD04696F98C6C0C6C0C0C0C6C0C6C0C6C0C6%C0C6C0C6C0C69E93FD0B696F9EC6C0C69E99FD056994FD07FFA1FD0E69A2%FD1FFF94FD18696FC1C6C79EBB9399C0C7C6C7C6C7C6C7C6C7C6C7C6C7C6%C7C6C1FD0B69C7999999C7C6C79993696970FD07FF9BFD0E69CAFD1FFFFD%19699F9293696969C1C6C6C0C7C6C6C0C7C6C6C0C7C6C6C0C7C6C6C099FD%0A699EC7996969696F9998696994FD07FFA1FD0E69A2FD1EFFA1FD1D6999%C7C6C799C1C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C79EFD0A6999C6C7C093%FD066970FD07FF9BFD0E69CAFD1EFF9BFD1B696F98C69899699FC0C6C0C6%C0C6C0C6C0C6C0C6C0C6C0C6C09FFD0A696F696EC1C099FD056970FD07FF%70FD0E69A2FD1EFF70FD1A6999C0C16F6969C1C6C799C1C6C7C6C7C6C7C6%C7C6C7C6C7C6C793FD0A69C79369699399C76FFD0469A2FD05FF9BFD0F69%CAFD1DFFCAFD20699FC0C16F99C0C79EC6C0C7C6C6C0C7C6C6C0C79EFD0B%69C0C698FD0A699BA1CA9B70FD1069A2FD1DFFCAFD1F69C1C0996993C6C7%99C1C6C799C1C6C7C6C7C6C193FD0C699399C799FD1E69CAFD1DFF76FD0D%6970946F9470946F9470946F946FFD0469C0986969699EC6936FC0C69869%69696F93FD0F6993696969C198FD1D69A2FD1DFF94FD0C6970FD0CFFCBFD%086999C7936999C79FFD1569C09969696993FD1D69CAFD1DFFFD0D69A1FD%0DFFFD076993C6696969C69E6FFD156999C093FD2069A2FD1CFFA2FD0D69%A1FD0DFF94FD0669C16F6969C1C093FD156994699399FD2069CAFD1CFF9B%FD0D69FD0EFFA1FD09696FC093FD15699BA8FD236976FD1CFF70FD0C6994%FD0EFFCAFD096999C1FD1569A1FFFFA1FD146994FD0E69CAFD1AFFA8FD0D%699AFD0FFFFD1F69CAFD04FFA1FD1269CAA1FD0E696FA8FD19FFCAFD0D69%CAFD0FFF9BFD1B699BA8FD08FFA1FD0E699AFFFFFFFD0F6994FD19FFA194%6F9470946F9470946F947094A8FD0FFFA19470946F9470946F9470946F94%70946F9470946F9B9BA19BCACAFD0DFFA2A17094FD04696F9470A2A8FD05%FF9A946F9470946F9470946F9470946FCAFDFCFFFDFCFFFDFCFFFD9CFF6F%696970FD49FFCAFD05706FFD2DFF6F7069CBFD48FF69A1FFFFFFA170FD2C%FFCA6F696F9BFD47FF7669A8FD04FF9BFFCAFD13FFCBFD08FFA8FD0DFFCA%9A9B6994FD05FFCA769A9AA1709BCAFFFFFFCA9B709AA1FF709A709A709A%709A70A1FFFFFFA170A19B949ACAFFFFA19A70CAFD05FFCA709BCAFFFFFF%9A6FA2FD08FF9A69CAFD04FFA8FF706F6F9A709A709A6F6F9BFFFFFF706F%CAFFFFFF706F709A709A709A6F6FA8FF9A9A76A1A19B9BFD04FF70CAA169%69CAFD05FFA169A1FFCA696FA8FFFFFFA26970FFFF70A8FD04FFCA696FA8%FFCA706FFD04FF9B69A2FFFFA16969CAFD05FF9BA2FD04FF6F699BFD08FF%70696FFD06FF9AA1FFFFA169A1FFFFA1A1FFFFA86969A1FFFFFF9BA2FFFF%9A69CAFFFF76CAFFA269A1FFFFFF9BFD04FF94FFFF69709BFD05FF9B70A1%FFFFA169A1FFFFFFCA699BFFFFA8FD05FF706FA1FFFF9A69FD06FF9469CA%FFFF69706FCBFD04FF9BCAFFFFFFCA9A6F69FD08FFC4696F6FCAFD04FFA8%FFFFFFA16F9BFFFFFFA8FFFFA29A7070FFFFFFCAFFFFFF706FA8FFFFFFCA%FFA86F9BFD07FFA276FFFF9B6970FD05FFA169A1FFFF9B6F9BFFFFFFA869%70FD07FF766F70FFFFCA699AFD06FFA16969FFFF9A766F69CAFFFFFFA1A2%FFFFFF76CA7069A1FD08FF94696969A1CAFD06FFA169A1FD06FF70CB696F%A8FD06FF9A69CAFD05FFCA69A1FD07FF9AA1A8CAA16F69FD05FFA16F9BFF%FF7069FD04FFCA699AFD06FFA16F6FFFFFFF9B6FA1FD07FF696FCAFF70FF%766F6FFFFFFFA1CAFFFFFF70FFCA699BFD08FFCBA1696F699ACAFD05FF9B%6FA1FD05FFCB9AFFA169A1FD06FF706FA8FD05FFA86FA1FFFFFFCAFFFFFF%6F7070709A696976FD04FFA16970767070CAFD04FFA26970FD05FFA86F69%CAFFFFFF7069A1FD07FF6969CAFF9AFFFF70696FFFFFA1A2FFFFCA76FFA8%6F69FD0AFFCA6F696970CAFD04FFA169A1FD05FFA29BFFA86969FD06FF70%69CAFD05FFCA699A9BA169CAFFFFCA9AFD04FFA16994FD04FFA16F9AA269%9AFD05FFCA699AFD05FF9A69A1FD04FF7670A1FD07FF696FA8FF70FFFFFF%706F70FFA1CAFFFF9B94709B6F6FA1FD0BFF9A7069CAFD04FF9B70A1FD05%FF769A709A6970CAFD05FF7070A8FD05FFA870A1FFA894A8FFFF76A2FD04%FFA86969CAFFFFFFA169A1FFA26970A8FFFFFFA26F70FD04FFA16994FD05%FFA1699AFD06FFA86F69FFFF9AFD04FF6F6976A1A8FFFF70CAFFFFCA699A%FD06FFA8FD05FF696F9BFD04FFA169A1FD04FFCA70FFFFFFA169A1FD05FF%9A69CAFD05FFCA69A1FFFFA8FFFFFF70CBFD05FF6F6F76FFFFFF9B6FA1FF%FF9B699AFFFFFFCA699AFFFFFFCA6970A8FD05FFCA6F69FD06FFC4699BFF%FF70FD05FF6F6F69CAFFCB76FD04FF7069FD06FF9BFD05FFA169A1FD04FF%A16F9BFD04FFCA9BFFFFFFCA6F6FFD05FF706FA8FD05FFA86F9BFD05FFCA%6FFD06FFA1696FA8FFFFA169A1FFFFA86F69A8FFFFA26970FFFFFF6969A1%FD05FF77FFA16970FD05FF6F6FA8FFFF70FD05FFCA6969A2FF76A2FD04FF%7669A1FD05FF69CAFD04FF7069A8FD04FFA169A1FD04FF70CAFD04FF6F69%A2FD04FF9A69CAFD05FFCA69A1FFFFFFCAFF7094FD06FF9A6F69A1FFCB69%706FCBFFFFA26F69CAFFA26994FFFF767070CAA8CAA8CA9A70FFFFA1709B%FFFFFF7094A8FFFFCB69FD06FFCA69CA9B6F9AFD04FF9A6994CAFD04FF70%6F9BA2FFA16FA1FD05FF9A6F9AFFFFFF9A70A1FFFFFFCA94699AFD04FF70%6FA1FD05FFA16F70CAA8CA709BA19BA2FD04FFA1A19BA19BA2A1A19BA1A1%FFFFFFA1A19BCA9BA19BA1FFA19BA19BA19BA19BA1A1FFFFFFA8A2709A76%A2FD04FF9BA19BFD06FFA2A8A19BA1FFFFFFCA9BA19BA1FD04FFA1CA9B9A%709BA8FD05FFA1A19BA1A1FFA8A19BA1FFFFFFA29BA19BA2FFFF9BA19BA1%A2FFFFFFA2A19BA19BA19BA2FDFCFFFD91FFA19BA19BA1A8FFFFFFA1A19B%A19BA2FD72FF9A6970CAFD05FFA16F69A2FD73FF9B6970FD06FFCA6969CA%FD43FFCAFD08FFCBFD26FFA1699BFD06FFA87069FFFFCA709A9BFD05FFA8%9B70A1FFA1709B9ACA769B709A9BFFFFCA709B9BFF9A9B709A709B70FFCA%A1709A709BA1CAFD06FF9A9A769B9AFFFFA1709A76CAA894709B709A709B%709A69A2709A70A1FFFFA29B709BFD1BFF9B6970FD06FFCA696FFFFFFFCA%696976FD05FFA19AFFFFFF7069CAFFCA696F70FD04FF9A70FFFFCB699AFF%FFFF9BFFFFA86F69FFA89469A1FD04FF69A2FFFFA19AFFFFFF9469A8FFCA%70CAA2A26970A2CAA16FFFA16969A8FFFFFF6F9BFD1CFFA1699AFD06FFA8%6F69FD04FFA1696FA1FD04FFCAA1FFFFFF706FA8FFFFCA6994FD04FF70CB%FFFFFF6F70FFFFFFCAFFFFFF696FFFFFCA6F69FFFFFFA26FA8FFFFFF9BFF%FFFF706FA8FFA8FFFFFFA86F70FFFFFFA1FFFF9B699BFFFFA894CBFD1CFF%776970FD06FFCA6969FD04FF77A16969A1FFFFFFA2A1FFFFFF9A69CAFFFF%FF7069CAFFFFA870FD04FF6970FD07FF6969FFFFFF6969FFFFFFA1699BFD%07FF7069CAFD05FFCA699AFD06FFA86F69A8A870A8FD1DFFA2699AFD06FF%A86F69FD04FFA2A8CA6970CAFFFFCAA1FFFFFF706FA8FFFFFFA1709BFFFF%C4A1FD04FF6F70FFFFFFA8FFFFFF6970FFFFA87070FFFFFFCA6F699BFD06%FF7070A8FD05FFA87070FD07FFA26F6FA1A1FD1EFF9B6F70FD06FFCA6969%FD04FF9BCAFFA16970A8FFA2A1FFFFFF9A69CAFD04FF696FCAFF6FFD05FF%69709BA19BA1FFFFFF6969CA9B6F70CBFD04FFA1696970A1FD04FF9A69CA%FD05FFCA699AFD08FF70696FFD1FFFA1699AFD06FFA86F69FD04FFA1A8FF%FF9B6970CACA9BFFFFFF706FA8FD04FF9B69C4CA94FD05FF6F70CAA29AA1%FFFFFF696F9B7069C4FD06FFA270696FA1FFFFFF706FA8FD05FFA86F70FD%08FFCA69A1FD1FFF9B6969FD06FFA16969FD04FF9BCAFFFFFF9A6970A1A1%FFFFFF7069CAFD04FFA26969A1A1FD05FF699AFFFFA8CAFFFFFF6969FFA8%6F69A2FD06FFCA9B6969A8FFFF9A69CAFD05FFCA6970FD08FFA2699BFD1F%FFCA6970CAFD05FF767069FD04FFA1A8FD04FF9A69709BFFFFFF7070A8FD%05FF6F706FFD06FF7070FD07FF696FFFFFA86F69FFFFFFCAFD04FF9B69CA%FFFF706FA8FD05FFA86F70FD08FFCA69A1FD20FF706994CAFFFFFFA16F69%6FCAFFFFFF9BCAFD04FFA89469A1FFFFFF9A69CAFD05FFA1699BFD06FF69%9AFD04FFA8FFFF6F69FFFFFF9B6970FFFFA1A1FFFFFF9B70FFFFFF9A69CA%FD05FFCA699AFD08FFA26F9BFD20FFCA7069709BA17070A16F69CAFFFFFF%9BA2FD05FFA870A1FFFFFF706FA2FD06FF6FA1FD05FFCA6F69FFFFFF9BCA%FFC4696F9AFFFFFF6F6F76FFA170A8FFFF949BFFFFFF706FA2FD05FFA26F%70FD08FFA269A1FD21FFCAA1709A70A1A8CA707070A1FFA1709AA2FD05FF%A8A1FFFF769A709AA2FD05FF76FD05FFA89A7070709A7070A8FF7070709A%A8FFFFCA707077A29B7070A1A1FFFFFF7670709AA2FFFFFFA29A709A76FD%06FFCA707070A2FDFCFFFDFCFFFD17FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/exec_file	statusdict /currentfilenameextend known{		{			0 () /SubFileDecode filter cvx exec		}	}{				{cvx exec}	}ifelsedef/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		currentdict /lw_initializepage known not			{			/lw_initializepage /initializepage load def			/initializepage				{				lw_initializepage				/initializepage {} def				}def			}if		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: lwm1_mg.eps 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -113.013 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 113.013 li169.941 113.013 li169.941 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"24.2007 72.0508 mo26.0972 72.0508 26.8521 72.2139 27.4229 72.4385 cv28.8707 73.0098 29.7271 74.2745 29.7271 75.8038 cv29.7271 77.5977 28.5855 78.9239 26.4034 79.3116 cv26.4034 79.3516 li27.627 79.7188 28.3409 80.7178 29.2378 82.0235 cv29.3399 82.1456 li30.6451 84.1651 li30.6451 84.1846 30.6856 84.2256 30.7061 84.2666 cv31.8077 86.0206 32.6231 86.3663 33.337 86.5098 cv33.337 86.7129 li29.8702 86.7129 li29.6661 86.4688 29.4825 86.2852 29.2173 85.878 cv29.1358 85.7754 28.8301 85.3467 28.7891 85.3057 cv28.7686 85.2657 28.7486 85.2247 28.7281 85.2042 cv26.7706 82.2276 li26.75 82.2071 26.75 82.1866 26.6685 82.0635 cv26.648 82.0235 25.71 80.5137 24.772 80.045 cv24.3843 79.8614 24.0376 79.7598 23.0181 79.7188 cv23.0181 84.796 li23.0181 86.0206 23.6504 86.5098 24.67 86.5098 cv24.67 86.7129 li19.1641 86.7129 li19.1641 86.5098 li20.2857 86.5098 20.8155 85.9795 20.8155 84.8379 cv20.8155 73.9678 li20.8155 72.3575 19.7554 72.2549 19.1436 72.2549 cv19.1436 72.0508 li24.2007 72.0508 licp23.0181 79.168 mo24.8331 79.168 27.3824 79.046 27.3824 75.9668 cv27.3824 74.9063 26.9131 72.6016 24.2623 72.6016 cv23.8951 72.6016 23.3443 72.6016 23.0181 72.7247 cv23.0181 79.168 lifalse sop0 0.91 0.340001 0.38 cmykf39.5792 86.7129 mo34.0938 86.7129 li34.0938 86.5098 li34.7056 86.4893 35.7457 86.4082 35.7457 84.8379 cv35.7457 73.9073 li35.7457 72.378 34.7256 72.296 34.0938 72.2549 cv34.0938 72.0508 li39.5792 72.0508 li39.5792 72.2549 li38.9673 72.296 37.9273 72.378 37.9273 73.9073 cv37.9273 84.8379 li37.9273 86.4278 38.9673 86.4893 39.5792 86.5098 cv39.5792 86.7129 li0 0.91 0.340001 0.38 cmykf54.0801 72.0508 mo44.1485 86.0811 li49.8995 86.0811 li53.4883 86.0811 54.0186 84.5518 54.3248 83.6133 cv54.5289 83.6133 li54.0801 86.7129 li41.273 86.7129 li41.273 86.4082 li51.1431 72.7852 li44.5157 72.7852 li42.6602 72.7852 41.7217 73.1524 41.4976 74.8243 cv41.273 74.8243 li41.273 72.0508 li54.0801 72.0508 li0 0.91 0.340001 0.38 cmykf62.7291 71.7042 mo66.7056 71.7042 70.5186 74.6612 70.5186 79.4131 cv70.5186 83.5723 67.3785 87.0801 62.8511 87.0801 cv58.5889 87.0801 55.0206 83.8584 55.0206 79.4542 cv55.0206 74.9668 58.6504 71.7042 62.7291 71.7042 cvcp62.9937 86.5294 mo66.1343 86.5294 67.9087 83.6133 67.9087 79.7393 cv67.9087 75.1299 65.482 72.1534 62.4434 72.1534 cv60.5674 72.1534 57.5899 73.4581 57.5899 79.0254 cv57.5899 83.1446 59.4864 86.5294 62.9937 86.5294 cv0 0.91 0.340001 0.38 cmykf84.3477 83.2872 mo84.3477 73.9073 li84.3477 72.3975 83.3282 72.296 82.6758 72.2549 cv82.6758 72.0508 li86.7334 72.0508 li86.7334 72.2549 li86.0616 72.296 85.0616 72.3975 85.0616 73.9073 cv85.0616 87.0801 li84.8169 87.0801 li73.9478 74.8448 li73.9478 84.8379 li73.9478 86.4278 74.9878 86.4893 75.5997 86.5098 cv75.5997 86.7129 li71.5821 86.7129 li71.5821 86.5098 li72.1939 86.4893 73.2339 86.4082 73.2339 84.8379 cv73.2339 74.0704 li72.6631 73.417 li72.6426 73.3965 72.6016 73.376 72.5811 73.336 cv71.7247 72.337 71.1334 72.296 70.6846 72.2549 cv70.6846 72.0508 li74.274 72.0508 li84.3477 83.2872 li0 0.91 0.340001 0.38 cmykf98.5235 84.2256 mo99.1758 86.1426 99.8897 86.3877 100.767 86.5098 cv100.767 86.7129 li95.0772 86.7129 li95.0772 86.5098 li95.546 86.4893 96.545 86.4688 96.545 85.4082 cv96.545 85.2247 96.5245 85 96.3008 84.3487 cv95.0772 80.7383 li90.3663 80.7383 li89.2862 84.1036 li89.1231 84.5928 89.0411 85.1026 89.0411 85.3262 cv89.0411 86.4278 89.917 86.4893 90.2647 86.5098 cv90.2647 86.7129 li86.3487 86.7129 li86.3487 86.5098 li87.5528 86.4278 88.1231 85.4493 88.4288 84.5118 cv92.4668 71.8467 li94.2823 71.8467 li98.5235 84.2256 licp90.5909 80.0245 mo94.8321 80.0245 li92.671 73.6211 li92.6299 73.6211 li90.5909 80.0245 li0 0.91 0.340001 0.38 cmykf116.099 72.0274 mo115.712 69.9405 114.373 68.42 112.08 68.42 cv109.916 68.42 108.807 69.9405 108.807 71.461 cv108.807 73.4708 110.662 74.7325 112.595 75.9434 cv115.249 77.6182 117.387 78.9073 117.387 81.8702 cv117.387 83.0294 117.078 84.4463 115.687 85.7344 cv114.424 86.92 113.187 87.1778 111.667 87.1778 cv110.43 87.1778 109.477 86.92 108.782 86.6368 cv107.725 86.1983 107.596 86.1465 107.313 86.1465 cv107.029 86.1465 106.617 86.2754 106.566 86.92 cv106.308 86.92 li106.514 82.1788 li106.771 82.1788 li106.875 82.875 107.132 84.3174 108.472 85.3741 cv109.296 86.0176 110.636 86.4561 111.667 86.4561 cv113.497 86.4561 115.042 85.0127 115.042 83.1836 cv115.042 81.3292 113.626 80.1172 111.075 78.546 cv108.884 77.1797 106.668 75.7891 106.668 72.6973 cv106.668 70.4551 108.214 67.75 112.054 67.75 cv112.904 67.75 113.857 67.879 114.553 68.1114 cv114.862 68.2139 115.326 68.3428 115.609 68.3428 cv115.634 68.3428 116.175 68.3165 116.304 67.7247 cv116.562 67.7247 li116.357 72.0274 li116.099 72.0274 li0 0.91 0.340001 0.38 cmykf132.003 74.9258 mo131.799 74.9258 li131.637 73.0294 130.046 72.8877 128.965 72.8877 cv126.498 72.8877 li126.498 84.8379 li126.498 86.4278 127.538 86.4893 128.17 86.5098 cv128.17 86.7129 li122.644 86.7129 li122.644 86.5098 li123.295 86.4893 124.316 86.3877 124.316 84.8379 cv124.316 72.8877 li121.848 72.8877 li120.666 72.8877 119.238 73.0294 119.013 74.9258 cv118.809 74.9258 li118.809 71.378 li119.013 71.378 li119.095 71.6231 119.197 71.7042 119.503 71.8467 cv119.809 71.9903 120.951 72.0508 121.379 72.0508 cv129.434 72.0508 li130.759 72.0508 131.066 71.9698 131.351 71.8877 cv131.658 71.8057 131.759 71.5616 131.799 71.378 cv132.003 71.378 li132.003 74.9258 li0 0.91 0.340001 0.38 cmykf143.446 84.2256 mo144.099 86.1426 144.812 86.3877 145.69 86.5098 cv145.69 86.7129 li140 86.7129 li140 86.5098 li140.469 86.4893 141.468 86.4688 141.468 85.4082 cv141.468 85.2247 141.448 85 141.224 84.3487 cv140 80.7383 li135.289 80.7383 li134.208 84.1036 li134.045 84.5928 133.963 85.1026 133.963 85.3262 cv133.963 86.4278 134.84 86.4893 135.187 86.5098 cv135.187 86.7129 li131.272 86.7129 li131.272 86.5098 li132.475 86.4278 133.045 85.4493 133.352 84.5118 cv137.39 71.8467 li139.205 71.8467 li143.446 84.2256 licp135.513 80.0245 mo139.755 80.0245 li137.594 73.6211 li137.553 73.6211 li135.513 80.0245 li0 0.91 0.340001 0.38 cmykf158.253 74.9258 mo158.049 74.9258 li157.887 73.0294 156.296 72.8877 155.215 72.8877 cv152.748 72.8877 li152.748 84.8379 li152.748 86.4278 153.788 86.4893 154.42 86.5098 cv154.42 86.7129 li148.894 86.7129 li148.894 86.5098 li149.546 86.4893 150.566 86.3877 150.566 84.8379 cv150.566 72.8877 li148.098 72.8877 li146.916 72.8877 145.488 73.0294 145.263 74.9258 cv145.059 74.9258 li145.059 71.378 li145.263 71.378 li145.345 71.6231 145.447 71.7042 145.753 71.8467 cv146.059 71.9903 147.201 72.0508 147.629 72.0508 cv155.684 72.0508 li157.009 72.0508 157.316 71.9698 157.601 71.8877 cv157.908 71.8057 158.009 71.5616 158.049 71.378 cv158.253 71.378 li158.253 74.9258 li0 0.91 0.340001 0.38 cmykf166.596 79.0665 mo166.963 79.0665 168.473 79.0665 168.595 77.5577 cv168.799 77.5577 li168.799 81.167 li168.595 81.167 li168.513 80.167 167.84 79.6163 166.739 79.6163 cv163.844 79.6163 li163.844 84.5723 li163.844 85.1836 163.824 86.1631 165.353 86.1631 cv167.311 86.1631 li168.697 86.1631 169.371 85.7139 169.737 84.3487 cv169.941 84.3487 li169.512 86.7129 li159.989 86.7129 li159.989 86.5098 li160.601 86.5098 161.662 86.4483 161.662 84.796 cv161.662 73.9678 li161.662 73.8047 161.682 72.2549 160.194 72.2549 cv159.989 72.2549 li159.989 72.0508 li169.512 72.0508 li169.512 74.4376 li169.309 74.4376 li169.309 73.0704 168.534 72.6016 167.311 72.6016 cv163.844 72.6016 li163.844 79.0665 li166.596 79.0665 li0 0.91 0.340001 0.38 cmykf31.7789 107.671 mo31.7276 107.671 li31.1861 108.78 29.4859 111.125 25.9302 111.125 cv23.5084 111.125 19.3858 109.888 19.3858 104.117 cv19.3858 94.7627 li19.3858 92.8047 18.1236 92.6504 17.273 92.5987 cv17.273 92.3409 li24.2295 92.3409 li24.2295 92.5987 li23.3794 92.6504 22.1426 92.8047 22.1426 94.7627 cv22.1426 104.013 li22.1426 105.043 22.2457 106.1 22.6324 107.054 cv23.3536 108.805 25.0542 109.758 26.8062 109.758 cv28.7642 109.758 30.3101 108.626 31.0318 107.542 cv31.7276 106.487 31.753 104.992 31.753 104.451 cv31.753 94.7627 li31.753 92.8047 30.4908 92.6504 29.6402 92.5987 cv29.6402 92.3409 li36.6226 92.3409 li36.6226 92.5987 li35.7466 92.6504 34.5098 92.8047 34.5098 94.7627 cv34.5098 108.497 li34.5098 110.429 35.7725 110.584 36.6226 110.609 cv36.6226 110.867 li31.7789 110.867 li31.7789 107.671 li0 0.91 0.340001 0.38 cmykf51.7203 107.441 mo51.7203 98.0596 li51.7203 96.5508 50.7007 96.4493 50.0479 96.4082 cv50.0479 96.2042 li54.106 96.2042 li54.106 96.4082 li53.4332 96.4493 52.4341 96.5508 52.4341 98.0596 cv52.4341 111.234 li52.1895 111.234 li41.3199 98.9971 li41.3199 108.991 li41.3199 110.582 42.3599 110.642 42.9717 110.663 cv42.9717 110.867 li38.9546 110.867 li38.9546 110.663 li39.5665 110.642 40.606 110.561 40.606 108.991 cv40.606 98.2227 li40.0352 97.5704 li40.0147 97.5499 39.9742 97.5294 39.9537 97.4883 cv39.0972 96.4893 38.5059 96.4493 38.0572 96.4082 cv38.0572 96.2042 li41.6465 96.2042 li51.7203 107.441 li0 0.91 0.340001 0.38 cmykf61.4708 110.867 mo55.9849 110.867 li55.9849 110.663 li56.5967 110.642 57.6368 110.561 57.6368 108.991 cv57.6368 98.0596 li57.6368 96.5303 56.6172 96.4493 55.9849 96.4082 cv55.9849 96.2042 li61.4708 96.2042 li61.4708 96.4082 li60.8589 96.4493 59.8189 96.5303 59.8189 98.0596 cv59.8189 108.991 li59.8189 110.582 60.8589 110.642 61.4708 110.663 cv61.4708 110.867 li0 0.91 0.340001 0.38 cmykf68.4053 96.2042 mo68.4053 96.4082 li67.9971 96.4082 66.9571 96.4082 66.9571 97.5909 cv66.9571 98.1006 67.3853 99.1807 67.4058 99.2217 cv70.6685 107.42 li73.483 99.2217 li73.483 99.2217 73.5235 99.0792 73.544 99.0586 cv73.7276 98.5489 73.8707 97.8155 73.8707 97.5499 cv73.8707 96.4698 72.9732 96.4288 72.5245 96.4082 cv72.5245 96.2042 li76.7457 96.2042 li76.7457 96.4082 li76.0728 96.4698 75.2774 96.6524 74.5435 98.5489 cv74.5025 98.6309 74.2984 99.1807 74.2784 99.2217 cv70.0572 111.234 li69.8936 111.234 li64.7344 98.4473 li64.7139 98.3858 64.6934 98.3252 64.6529 98.2842 cv64.6529 98.2637 64.6124 98.1827 64.5713 98.1006 cv64.1636 97.2637 63.8575 96.6124 62.5728 96.4082 cv62.5728 96.2042 li68.4053 96.2042 li0 0.91 0.340001 0.38 cmykf84.6602 103.22 mo85.0274 103.22 86.5362 103.22 86.6582 101.71 cv86.8624 101.71 li86.8624 105.32 li86.6582 105.32 li86.5772 104.321 85.9044 103.77 84.8028 103.77 cv81.9073 103.77 li81.9073 108.725 li81.9073 109.337 81.8868 110.317 83.4166 110.317 cv85.3741 110.317 li86.7608 110.317 87.4336 109.868 87.8008 108.501 cv88.004 108.501 li87.5762 110.867 li78.0528 110.867 li78.0528 110.663 li78.6646 110.663 79.7252 110.601 79.7252 108.95 cv79.7252 98.1211 li79.7252 97.9581 79.7457 96.4082 78.2569 96.4082 cv78.0528 96.4082 li78.0528 96.2042 li87.5762 96.2042 li87.5762 98.5899 li87.3731 98.5899 li87.3731 97.2237 86.5977 96.754 85.3741 96.754 cv81.9073 96.754 li81.9073 103.22 li84.6602 103.22 li0 0.91 0.340001 0.38 cmykf95.3077 96.2042 mo97.2032 96.2042 97.9581 96.3672 98.5294 96.5918 cv99.9776 97.1622 100.834 98.4268 100.834 99.9561 cv100.834 101.751 99.6915 103.077 97.5088 103.464 cv97.5088 103.504 li98.7325 103.872 99.4463 104.872 100.344 106.176 cv100.446 106.299 li101.751 108.318 li101.751 108.338 101.792 108.379 101.813 108.419 cv102.914 110.173 103.729 110.52 104.444 110.663 cv104.444 110.867 li100.976 110.867 li100.773 110.622 100.589 110.438 100.325 110.031 cv100.243 109.929 99.9366 109.5 99.8956 109.459 cv99.875 109.418 99.8545 109.378 99.834 109.358 cv97.877 106.38 li97.8565 106.36 97.8565 106.339 97.7745 106.217 cv97.754 106.176 96.8155 104.667 95.878 104.199 cv95.4913 104.014 95.1446 103.913 94.1241 103.872 cv94.1241 108.95 li94.1241 110.173 94.7569 110.663 95.7754 110.663 cv95.7754 110.867 li90.2696 110.867 li90.2696 110.663 li91.3916 110.663 91.9219 110.133 91.9219 108.991 cv91.9219 98.1211 li91.9219 96.5098 90.8614 96.4082 90.2491 96.4082 cv90.2491 96.2042 li95.3077 96.2042 licp94.1241 103.322 mo95.9395 103.322 98.4883 103.2 98.4883 100.12 cv98.4883 99.0586 98.0196 96.754 95.3682 96.754 cv95.001 96.754 94.4502 96.754 94.1241 96.877 cv94.1241 103.322 li0 0.91 0.340001 0.38 cmykf113.316 99.2422 mo113.011 97.5909 111.95 96.3877 110.135 96.3877 cv108.422 96.3877 107.545 97.5909 107.545 98.794 cv107.545 100.384 109.013 101.384 110.542 102.342 cv112.644 103.667 114.336 104.688 114.336 107.033 cv114.336 107.951 114.091 109.072 112.991 110.092 cv111.991 111.03 111.012 111.234 109.809 111.234 cv108.83 111.234 108.076 111.03 107.525 110.805 cv106.689 110.459 106.587 110.417 106.362 110.417 cv106.138 110.417 105.812 110.52 105.771 111.03 cv105.567 111.03 li105.73 107.278 li105.934 107.278 li106.016 107.829 106.22 108.97 107.28 109.806 cv107.933 110.317 108.993 110.663 109.809 110.663 cv111.257 110.663 112.48 109.521 112.48 108.074 cv112.48 106.605 111.359 105.646 109.34 104.402 cv107.607 103.322 105.853 102.22 105.853 99.7725 cv105.853 97.9991 107.076 95.8575 110.115 95.8575 cv110.788 95.8575 111.542 95.959 112.092 96.1426 cv112.337 96.2247 112.705 96.3262 112.929 96.3262 cv112.95 96.3262 113.377 96.3057 113.479 95.837 cv113.683 95.837 li113.52 99.2422 li113.316 99.2422 li0 0.91 0.340001 0.38 cmykf122.536 110.867 mo117.049 110.867 li117.049 110.663 li117.662 110.642 118.702 110.561 118.702 108.991 cv118.702 98.0596 li118.702 96.5303 117.682 96.4493 117.049 96.4082 cv117.049 96.2042 li122.536 96.2042 li122.536 96.4082 li121.924 96.4493 120.883 96.5303 120.883 98.0596 cv120.883 108.991 li120.883 110.582 121.924 110.642 122.536 110.663 cv122.536 110.867 li0 0.91 0.340001 0.38 cmykf137.77 99.0792 mo137.566 99.0792 li137.404 97.1827 135.812 97.0401 134.732 97.0401 cv132.264 97.0401 li132.264 108.991 li132.264 110.582 133.304 110.642 133.937 110.663 cv133.937 110.867 li128.411 110.867 li128.411 110.663 li129.062 110.642 130.083 110.541 130.083 108.991 cv130.083 97.0401 li127.615 97.0401 li126.432 97.0401 125.004 97.1827 124.78 99.0792 cv124.576 99.0792 li124.576 95.5303 li124.78 95.5303 li124.862 95.7754 124.963 95.8575 125.27 96 cv125.576 96.1426 126.717 96.2042 127.146 96.2042 cv135.201 96.2042 li136.526 96.2042 136.833 96.1221 137.118 96.0411 cv137.424 95.959 137.526 95.7139 137.566 95.5303 cv137.77 95.5303 li137.77 99.0792 li0 0.91 0.340001 0.38 cmykf144.359 96.2042 mo144.359 96.4082 li143.992 96.4082 143.177 96.4082 143.177 97.2237 cv143.177 97.5909 143.483 98.0801 143.667 98.3858 cv146.276 102.505 li148.723 98.7735 li148.723 98.7735 148.764 98.7325 148.785 98.6915 cv149.152 98.1416 149.458 97.5088 149.458 97.1622 cv149.458 96.4698 148.56 96.4288 148.234 96.4082 cv148.234 96.2042 li152.659 96.2042 li152.659 96.4082 li152.19 96.4493 151.783 96.4893 151.395 96.7139 cv150.661 97.1416 149.662 98.6309 149.6 98.7325 cv146.583 103.363 li146.583 108.991 li146.583 110.52 147.316 110.663 148.234 110.663 cv148.234 110.867 li142.749 110.867 li142.749 110.663 li143.442 110.663 144.4 110.52 144.4 108.991 cv144.4 103.464 li141.036 98.2432 li141.036 98.2227 140.995 98.1827 140.974 98.1622 cv140.954 98.1211 140.913 98.0596 140.505 97.4883 cv140.2 97.0606 139.587 96.4082 138.466 96.4082 cv138.466 96.2042 li144.359 96.2042 li0 0.91 0.340001 0.38 cmykf15.3819 83.5704 mo10.023 67.9307 li5.50196 67.9258 li5.50196 68.1749 li6.32227 68.2247 7.49659 68.5977 7.19092 69.7491 cv2.62842 83.9307 li2.2417 85.1163 1.52051 86.3526 0 86.4561 cv0 86.7129 li4.94727 86.7129 li4.94727 86.4561 li4.50928 86.4297 3.40137 86.3526 3.40137 84.962 cv3.40137 84.6778 3.5044 84.0332 3.71045 83.4161 cv5.07569 79.1641 li11.0279 79.1641 li12.5738 83.7247 li12.857 84.5499 12.8829 84.8331 12.8829 85.0645 cv12.8829 86.4044 11.6207 86.4297 11.0279 86.4561 cv11.0279 86.7129 li18.2164 86.7129 li18.2164 86.4561 li17.1084 86.3008 16.2066 85.9922 15.3819 83.5704 cvcp5.35938 78.2627 mo7.93604 70.1719 li7.98731 70.1719 li10.7183 78.2627 li5.35938 78.2627 li0 0.91 0.340001 0.38 cmykf153.106 57.334 mo153.106 57.334 152.155 56.2774 150.575 54.584 cv148.612 52.4844 148.723 50.2598 148.723 50.2598 cv148.723 40.9532 li148.723 0.022461 li129.629 0.022461 li129.629 40.1993 li129.393 44.0059 125.665 44.9766 123.596 44.9102 cv120.633 44.8184 118.92 43.1622 118.92 40.3184 cv118.917 0.038086 li100.321 0.038086 li100.317 0.022461 li95.9688 0.022461 92.5547 0.0390626 87.2129 0.0390626 cv77.0391 0.0390626 67.4312 1.59571 64.1939 10.0342 cv62.2725 2.55274 li61.8003 1.08399 60.1939 0.0244141 58.6094 0.0244141 cv56.1119 0.0244141 li31.233 0.0253907 li29.3868 0.0253907 li25.356 0.0253907 li24.879 0.0253907 24.7056 0.175782 24.9561 0.514649 cv24.9561 0.514649 25.856 1.37891 27.4908 3.24122 cv29.7613 5.82715 28.8687 9.28711 28.8687 9.28711 cv16.7037 57.8223 li34.418 57.8223 li36.9732 47.1583 li54.0694 47.1583 li56.7354 57.8223 li74.9395 57.8223 li76.7242 57.8223 78.543 57.8223 80.0694 57.8223 cv89.6407 57.8223 97.4278 56.8477 101.28 50.8868 cv104.151 56.3204 110.329 58.875 121.229 57.9356 cv125.024 57.6094 128.754 55.834 130.356 53.0215 cv131.09 55.3594 li131.729 56.7715 133.026 57.8145 134.876 57.8145 cv143.479 57.8145 li144.967 57.8145 li152.708 57.8145 li153.184 57.8145 153.358 57.6739 153.106 57.334 cvcp39.6192 36.627 mo45.5235 12.9024 li51.4595 36.627 li39.6192 36.627 li/0 <</Name (PANTONE 208 C)/CSA /1 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /ColorLookup [ [ 0 0 0 0 ] [ 0 0.00392157 0.00141177 0.00145099 ][ 0 0.00784314 0.00282353 0.00290197 ] [ 0 0.0117648 0.0042353 0.00435295 ][ 0 0.0156863 0.00564706 0.00580393 ] [ 0 0.0196079 0.00705883 0.00725491 ][ 0 0.0235295 0.00847059 0.00870589 ] [ 0 0.027451 0.00988236 0.0101569 ][ 0 0.0313726 0.0112942 0.0116079 ] [ 0 0.0352942 0.0127059 0.0130589 ][ 0 0.0392157 0.0141177 0.0145099 ] [ 0 0.0431373 0.0155295 0.0159608 ][ 0 0.0470589 0.0169412 0.0174118 ] [ 0 0.0509804 0.018353 0.0188628 ][ 0 0.054902 0.0197648 0.0203138 ] [ 0 0.0588236 0.0211765 0.0217648 ][ 0 0.0627451 0.0225883 0.0232157 ] [ 0 0.0666667 0.024 0.0246667 ][ 0 0.0705883 0.0254118 0.0261177 ] [ 0 0.0745098 0.0268236 0.0275687 ][ 0 0.0784314 0.0282353 0.0290197 ] [ 0 0.082353 0.0296471 0.0304706 ][ 0 0.0862746 0.0310589 0.0319216 ] [ 0 0.0901961 0.0324706 0.0333726 ][ 0 0.0941177 0.0338824 0.0348236 ] [ 0 0.0980393 0.0352942 0.0362746 ][ 0 0.101961 0.0367059 0.0377255 ] [ 0 0.105883 0.0381177 0.0391765 ][ 0 0.109804 0.0395295 0.0406275 ] [ 0 0.113726 0.0409412 0.0420785 ][ 0 0.117648 0.042353 0.0435295 ] [ 0 0.121569 0.0437648 0.0449804 ][ 0 0.125491 0.0451765 0.0464314 ] [ 0 0.129412 0.0465883 0.0478824 ][ 0 0.133334 0.048 0.0493334 ] [ 0 0.137255 0.0494118 0.0507844 ][ 0 0.141177 0.0508236 0.0522353 ] [ 0 0.145099 0.0522353 0.0536863 ][ 0 0.14902 0.0536471 0.0551373 ] [ 0 0.152942 0.0550589 0.0565883 ][ 0 0.156863 0.0564706 0.0580393 ] [ 0 0.160785 0.0578824 0.0594902 ][ 0 0.164706 0.0592942 0.0609412 ] [ 0 0.168628 0.0607059 0.0623922 ][ 0 0.17255 0.0621177 0.0638432 ] [ 0 0.176471 0.0635295 0.0652942 ][ 0 0.180393 0.0649412 0.0667451 ] [ 0 0.184314 0.066353 0.0681961 ][ 0 0.188236 0.0677648 0.0696471 ] [ 0 0.192157 0.0691765 0.0710981 ][ 0 0.196079 0.0705883 0.0725491 ] [ 0 0.2 0.072 0.074 ][ 0 0.203922 0.0734118 0.075451 ] [ 0 0.207844 0.0748236 0.076902 ][ 0 0.211765 0.0762353 0.078353 ] [ 0 0.215687 0.0776471 0.079804 ][ 0 0.219608 0.0790589 0.0812549 ] [ 0 0.22353 0.0804706 0.0827059 ][ 0 0.227451 0.0818824 0.0841569 ] [ 0 0.231373 0.0832942 0.0856079 ][ 0 0.235295 0.0847059 0.0870589 ] [ 0 0.239216 0.0861177 0.0885098 ][ 0 0.243138 0.0875295 0.0899608 ] [ 0 0.247059 0.0889412 0.0914118 ][ 0 0.250981 0.090353 0.0928628 ] [ 0 0.254902 0.0917648 0.0943138 ][ 0 0.258824 0.0931765 0.0957647 ] [ 0 0.262746 0.0945883 0.0972157 ][ 0 0.266667 0.096 0.0986667 ] [ 0 0.270589 0.0974118 0.100118 ][ 0 0.27451 0.0988236 0.101569 ] [ 0 0.278432 0.100236 0.10302 ][ 0 0.282353 0.101648 0.104471 ] [ 0 0.286275 0.103059 0.105922 ][ 0 0.290197 0.104471 0.107373 ] [ 0 0.294118 0.105883 0.108824 ][ 0 0.29804 0.107295 0.110275 ] [ 0 0.301961 0.108706 0.111726 ][ 0 0.305883 0.110118 0.113177 ] [ 0 0.309804 0.11153 0.114628 ][ 0 0.313726 0.112942 0.116079 ] [ 0 0.317648 0.114353 0.11753 ][ 0 0.321569 0.115765 0.118981 ] [ 0 0.325491 0.117177 0.120432 ][ 0 0.329412 0.118589 0.121883 ] [ 0 0.333334 0.12 0.123334 ][ 0 0.337255 0.121412 0.124785 ] [ 0 0.341177 0.122824 0.126236 ][ 0 0.345099 0.124236 0.127687 ] [ 0 0.34902 0.125648 0.129138 ][ 0 0.352942 0.127059 0.130589 ] [ 0 0.356863 0.128471 0.13204 ][ 0 0.360785 0.129883 0.133491 ] [ 0 0.364706 0.131295 0.134942 ][ 0 0.368628 0.132706 0.136393 ] [ 0 0.37255 0.134118 0.137844 ][ 0 0.376471 0.13553 0.139295 ] [ 0 0.380393 0.136942 0.140746 ][ 0 0.384314 0.138353 0.142197 ] [ 0 0.388236 0.139765 0.143648 ][ 0 0.392157 0.141177 0.145099 ] [ 0 0.396079 0.142589 0.14655 ][ 0 0.4 0.144 0.148 ] [ 0 0.403922 0.145412 0.149451 ][ 0 0.407844 0.146824 0.150902 ] [ 0 0.411765 0.148236 0.152353 ][ 0 0.415687 0.149648 0.153804 ] [ 0 0.419608 0.151059 0.155255 ][ 0 0.42353 0.152471 0.156706 ] [ 0 0.427451 0.153883 0.158157 ][ 0 0.431373 0.155295 0.159608 ] [ 0 0.435295 0.156706 0.161059 ][ 0 0.439216 0.158118 0.16251 ] [ 0 0.443138 0.15953 0.163961 ][ 0 0.447059 0.160942 0.165412 ] [ 0 0.450981 0.162353 0.166863 ][ 0 0.454902 0.163765 0.168314 ] [ 0 0.458824 0.165177 0.169765 ][ 0 0.462746 0.166589 0.171216 ] [ 0 0.466667 0.168 0.172667 ][ 0 0.470589 0.169412 0.174118 ] [ 0 0.47451 0.170824 0.175569 ][ 0 0.478432 0.172236 0.17702 ] [ 0 0.482353 0.173648 0.178471 ][ 0 0.486275 0.175059 0.179922 ] [ 0 0.490197 0.176471 0.181373 ][ 0 0.494118 0.177883 0.182824 ] [ 0 0.49804 0.179295 0.184275 ][ 0 0.501961 0.180706 0.185726 ] [ 0 0.505883 0.182118 0.187177 ][ 0 0.509804 0.18353 0.188628 ] [ 0 0.513726 0.184942 0.190079 ][ 0 0.517648 0.186353 0.19153 ] [ 0 0.521569 0.187765 0.192981 ][ 0 0.525491 0.189177 0.194432 ] [ 0 0.529412 0.190589 0.195883 ][ 0 0.533334 0.192 0.197334 ] [ 0 0.537255 0.193412 0.198785 ][ 0 0.541177 0.194824 0.200236 ] [ 0 0.545098 0.196236 0.201687 ][ 0 0.54902 0.197648 0.203138 ] [ 0 0.552942 0.199059 0.204589 ][ 0 0.556863 0.200471 0.20604 ] [ 0 0.560785 0.201883 0.207491 ][ 0 0.564706 0.203295 0.208942 ] [ 0 0.568628 0.204706 0.210393 ][ 0 0.57255 0.206118 0.211844 ] [ 0 0.576471 0.20753 0.213295 ][ 0 0.580393 0.208942 0.214746 ] [ 0 0.584314 0.210353 0.216197 ][ 0 0.588236 0.211765 0.217648 ] [ 0 0.592157 0.213177 0.219099 ][ 0 0.596079 0.214589 0.22055 ] [ 0 0.6 0.216 0.222 ][ 0 0.603922 0.217412 0.223451 ] [ 0 0.607844 0.218824 0.224902 ][ 0 0.611765 0.220236 0.226353 ] [ 0 0.615687 0.221648 0.227804 ][ 0 0.619608 0.223059 0.229255 ] [ 0 0.62353 0.224471 0.230706 ][ 0 0.627451 0.225883 0.232157 ] [ 0 0.631373 0.227295 0.233608 ][ 0 0.635295 0.228706 0.235059 ] [ 0 0.639216 0.230118 0.23651 ][ 0 0.643138 0.23153 0.237961 ] [ 0 0.647059 0.232942 0.239412 ][ 0 0.650981 0.234353 0.240863 ] [ 0 0.654902 0.235765 0.242314 ][ 0 0.658824 0.237177 0.243765 ] [ 0 0.662746 0.238589 0.245216 ][ 0 0.666667 0.24 0.246667 ] [ 0 0.670589 0.241412 0.248118 ][ 0 0.67451 0.242824 0.249569 ] [ 0 0.678432 0.244236 0.25102 ][ 0 0.682353 0.245648 0.252471 ] [ 0 0.686275 0.247059 0.253922 ][ 0 0.690197 0.248471 0.255373 ] [ 0 0.694118 0.249883 0.256824 ][ 0 0.69804 0.251295 0.258275 ] [ 0 0.701961 0.252706 0.259726 ][ 0 0.705883 0.254118 0.261177 ] [ 0 0.709804 0.25553 0.262628 ][ 0 0.713726 0.256942 0.264079 ] [ 0 0.717648 0.258353 0.26553 ][ 0 0.721569 0.259765 0.266981 ] [ 0 0.725491 0.261177 0.268432 ][ 0 0.729412 0.262589 0.269883 ] [ 0 0.733334 0.264 0.271334 ][ 0 0.737255 0.265412 0.272785 ] [ 0 0.741177 0.266824 0.274236 ][ 0 0.745098 0.268236 0.275687 ] [ 0 0.74902 0.269648 0.277138 ][ 0 0.752942 0.271059 0.278589 ] [ 0 0.756863 0.272471 0.28004 ][ 0 0.760785 0.273883 0.281491 ] [ 0 0.764706 0.275295 0.282942 ][ 0 0.768628 0.276706 0.284393 ] [ 0 0.77255 0.278118 0.285844 ][ 0 0.776471 0.27953 0.287295 ] [ 0 0.780393 0.280942 0.288746 ][ 0 0.784314 0.282353 0.290197 ] [ 0 0.788236 0.283765 0.291648 ][ 0 0.792157 0.285177 0.293098 ] [ 0 0.796079 0.286589 0.29455 ][ 0 0.8 0.288 0.296 ] [ 0 0.803922 0.289412 0.297451 ][ 0 0.807844 0.290824 0.298902 ] [ 0 0.811765 0.292236 0.300353 ][ 0 0.815687 0.293648 0.301804 ] [ 0 0.819608 0.295059 0.303255 ][ 0 0.82353 0.296471 0.304706 ] [ 0 0.827451 0.297883 0.306157 ][ 0 0.831373 0.299295 0.307608 ] [ 0 0.835295 0.300706 0.309059 ][ 0 0.839216 0.302118 0.31051 ] [ 0 0.843138 0.30353 0.311961 ][ 0 0.847059 0.304942 0.313412 ] [ 0 0.850981 0.306353 0.314863 ][ 0 0.854902 0.307765 0.316314 ] [ 0 0.858824 0.309177 0.317765 ][ 0 0.862746 0.310589 0.319216 ] [ 0 0.866667 0.312 0.320667 ][ 0 0.870589 0.313412 0.322118 ] [ 0 0.87451 0.314824 0.323569 ][ 0 0.878432 0.316236 0.32502 ] [ 0 0.882353 0.317648 0.326471 ][ 0 0.886275 0.319059 0.327922 ] [ 0 0.890196 0.320471 0.329373 ][ 0 0.894118 0.321883 0.330824 ] [ 0 0.89804 0.323295 0.332275 ][ 0 0.901961 0.324706 0.333726 ] [ 0 0.905883 0.326118 0.335177 ][ 0 0.909804 0.32753 0.336628 ] [ 0 0.913726 0.328942 0.338079 ][ 0 0.917648 0.330353 0.33953 ] [ 0 0.921569 0.331765 0.340981 ][ 0 0.925491 0.333177 0.342432 ] [ 0 0.929412 0.334589 0.343883 ][ 0 0.933334 0.336 0.345334 ] [ 0 0.937255 0.337412 0.346785 ][ 0 0.941177 0.338824 0.348236 ] [ 0 0.945098 0.340236 0.349687 ][ 0 0.94902 0.341648 0.351138 ] [ 0 0.952942 0.343059 0.352589 ][ 0 0.956863 0.344471 0.35404 ] [ 0 0.960785 0.345883 0.355491 ][ 0 0.964706 0.347295 0.356942 ] [ 0 0.968628 0.348706 0.358393 ][ 0 0.972549 0.350118 0.359844 ] [ 0 0.976471 0.35153 0.361295 ][ 0 0.980393 0.352942 0.362746 ] [ 0 0.984314 0.354353 0.364197 ][ 0 0.988236 0.355765 0.365648 ] [ 0 0.992157 0.357177 0.367098 ][ 0 0.996079 0.358589 0.36855 ] [ 0 1 0.36 0.37 ]] >>add_csd1 /0 get_csdsepcs1 sepf60.0616 10.7657 mo60.0567 10.7696 li60.021 10.8067 li60.0103 10.8184 li60.0215 10.8282 li60.0591 10.8633 li63.3306 13.8985 li63.4009 13.9629 li63.4224 13.9825 li63.4258 13.9542 li63.439 13.8594 li63.5079 13.3506 63.5987 12.8399 63.7085 12.3399 cv63.7164 12.3057 li63.7183 12.295 li63.709 12.2891 li63.6783 12.2715 li60.5147 10.3565 li60.4795 10.336 li60.4688 10.3282 li60.4605 10.3379 li60.4327 10.3692 li60.4283 10.3731 li60.4024 10.4024 li60.441 10.3985 li60.5084 10.3926 li60.5464 10.3887 li60.5157 10.3653 li60.3755 10.2598 60.1544 10.2813 60.0328 10.4102 cv59.9722 10.4747 59.9415 10.5626 59.9488 10.6485 cv59.9566 10.7344 59.9991 10.8106 60.0689 10.8633 cv60.0953 10.8829 li60.0928 10.8497 li60.0874 10.7754 li60.085 10.7422 li60.0616 10.7657 li/1 <</Name (PANTONE 123 C)/CSA /1 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /ColorLookup [ [ 0 0 0 0 ] [ 0 0.000941177 0.00368628 0 ][ 0 0.00188236 0.00737255 0 ] [ 0 0.00282353 0.0110589 0 ][ 0 0.00376471 0.0147451 0 ] [ 0 0.00470589 0.0184314 0 ][ 0 0.00564706 0.0221177 0 ] [ 0 0.00658824 0.025804 0 ][ 0 0.00752942 0.0294902 0 ] [ 0 0.00847059 0.0331765 0 ][ 0 0.00941177 0.0368628 0 ] [ 0 0.010353 0.0405491 0 ][ 0 0.0112942 0.0442353 0 ] [ 0 0.0122353 0.0479216 0 ][ 0 0.0131765 0.0516079 0 ] [ 0 0.0141177 0.0552942 0 ][ 0 0.0150589 0.0589804 0 ] [ 0 0.016 0.0626667 0 ][ 0 0.0169412 0.066353 0 ] [ 0 0.0178824 0.0700393 0 ][ 0 0.0188236 0.0737255 0 ] [ 0 0.0197648 0.0774118 0 ][ 0 0.0207059 0.0810981 0 ] [ 0 0.0216471 0.0847844 0 ][ 0 0.0225883 0.0884706 0 ] [ 0 0.0235295 0.0921569 0 ][ 0 0.0244706 0.0958432 0 ] [ 0 0.0254118 0.0995294 0 ][ 0 0.026353 0.103216 0 ] [ 0 0.0272942 0.106902 0 ][ 0 0.0282353 0.110589 0 ] [ 0 0.0291765 0.114275 0 ][ 0 0.0301177 0.117961 0 ] [ 0 0.0310589 0.121648 0 ][ 0 0.032 0.125334 0 ] [ 0 0.0329412 0.12902 0 ][ 0 0.0338824 0.132706 0 ] [ 0 0.0348236 0.136393 0 ][ 0 0.0357648 0.140079 0 ] [ 0 0.0367059 0.143765 0 ][ 0 0.0376471 0.147451 0 ] [ 0 0.0385883 0.151138 0 ][ 0 0.0395295 0.154824 0 ] [ 0 0.0404706 0.15851 0 ][ 0 0.0414118 0.162197 0 ] [ 0 0.042353 0.165883 0 ][ 0 0.0432942 0.169569 0 ] [ 0 0.0442353 0.173255 0 ][ 0 0.0451765 0.176942 0 ] [ 0 0.0461177 0.180628 0 ][ 0 0.0470589 0.184314 0 ] [ 0 0.048 0.188 0 ][ 0 0.0489412 0.191687 0 ] [ 0 0.0498824 0.195373 0 ][ 0 0.0508236 0.199059 0 ] [ 0 0.0517648 0.202746 0 ][ 0 0.0527059 0.206432 0 ] [ 0 0.0536471 0.210118 0 ][ 0 0.0545883 0.213804 0 ] [ 0 0.0555295 0.217491 0 ][ 0 0.0564706 0.221177 0 ] [ 0 0.0574118 0.224863 0 ][ 0 0.058353 0.22855 0 ] [ 0 0.0592942 0.232236 0 ][ 0 0.0602353 0.235922 0 ] [ 0 0.0611765 0.239608 0 ][ 0 0.0621177 0.243295 0 ] [ 0 0.0630589 0.246981 0 ][ 0 0.064 0.250667 0 ] [ 0 0.0649412 0.254353 0 ][ 0 0.0658824 0.25804 0 ] [ 0 0.0668236 0.261726 0 ][ 0 0.0677648 0.265412 0 ] [ 0 0.0687059 0.269098 0 ][ 0 0.0696471 0.272785 0 ] [ 0 0.0705883 0.276471 0 ][ 0 0.0715295 0.280157 0 ] [ 0 0.0724706 0.283844 0 ][ 0 0.0734118 0.28753 0 ] [ 0 0.074353 0.291216 0 ][ 0 0.0752942 0.294902 0 ] [ 0 0.0762353 0.298589 0 ][ 0 0.0771765 0.302275 0 ] [ 0 0.0781177 0.305961 0 ][ 0 0.0790589 0.309648 0 ] [ 0 0.08 0.313334 0 ][ 0 0.0809412 0.31702 0 ] [ 0 0.0818824 0.320706 0 ][ 0 0.0828236 0.324393 0 ] [ 0 0.0837647 0.328079 0 ][ 0 0.0847059 0.331765 0 ] [ 0 0.0856471 0.335451 0 ][ 0 0.0865883 0.339138 0 ] [ 0 0.0875294 0.342824 0 ][ 0 0.0884706 0.34651 0 ] [ 0 0.0894118 0.350197 0 ][ 0 0.090353 0.353883 0 ] [ 0 0.0912942 0.357569 0 ][ 0 0.0922353 0.361255 0 ] [ 0 0.0931765 0.364942 0 ][ 0 0.0941177 0.368628 0 ] [ 0 0.0950589 0.372314 0 ][ 0 0.096 0.376 0 ] [ 0 0.0969412 0.379687 0 ][ 0 0.0978824 0.383373 0 ] [ 0 0.0988236 0.387059 0 ][ 0 0.0997648 0.390746 0 ] [ 0 0.100706 0.394432 0 ][ 0 0.101648 0.398118 0 ] [ 0 0.102589 0.401804 0 ][ 0 0.10353 0.405491 0 ] [ 0 0.104471 0.409177 0 ][ 0 0.105412 0.412863 0 ] [ 0 0.106353 0.416549 0 ][ 0 0.107295 0.420236 0 ] [ 0 0.108236 0.423922 0 ][ 0 0.109177 0.427608 0 ] [ 0 0.110118 0.431295 0 ][ 0 0.111059 0.434981 0 ] [ 0 0.112 0.438667 0 ][ 0 0.112942 0.442353 0 ] [ 0 0.113883 0.44604 0 ][ 0 0.114824 0.449726 0 ] [ 0 0.115765 0.453412 0 ][ 0 0.116706 0.457098 0 ] [ 0 0.117648 0.460785 0 ][ 0 0.118589 0.464471 0 ] [ 0 0.11953 0.468157 0 ][ 0 0.120471 0.471844 0 ] [ 0 0.121412 0.47553 0 ][ 0 0.122353 0.479216 0 ] [ 0 0.123295 0.482902 0 ][ 0 0.124236 0.486589 0 ] [ 0 0.125177 0.490275 0 ][ 0 0.126118 0.493961 0 ] [ 0 0.127059 0.497648 0 ][ 0 0.128 0.501334 0 ] [ 0 0.128942 0.50502 0 ][ 0 0.129883 0.508706 0 ] [ 0 0.130824 0.512393 0 ][ 0 0.131765 0.516079 0 ] [ 0 0.132706 0.519765 0 ][ 0 0.133648 0.523451 0 ] [ 0 0.134589 0.527138 0 ][ 0 0.13553 0.530824 0 ] [ 0 0.136471 0.53451 0 ][ 0 0.137412 0.538196 0 ] [ 0 0.138353 0.541883 0 ][ 0 0.139295 0.545569 0 ] [ 0 0.140236 0.549255 0 ][ 0 0.141177 0.552942 0 ] [ 0 0.142118 0.556628 0 ][ 0 0.143059 0.560314 0 ] [ 0 0.144 0.564 0 ][ 0 0.144942 0.567687 0 ] [ 0 0.145883 0.571373 0 ][ 0 0.146824 0.575059 0 ] [ 0 0.147765 0.578746 0 ][ 0 0.148706 0.582432 0 ] [ 0 0.149648 0.586118 0 ][ 0 0.150589 0.589804 0 ] [ 0 0.15153 0.593491 0 ][ 0 0.152471 0.597177 0 ] [ 0 0.153412 0.600863 0 ][ 0 0.154353 0.604549 0 ] [ 0 0.155295 0.608236 0 ][ 0 0.156236 0.611922 0 ] [ 0 0.157177 0.615608 0 ][ 0 0.158118 0.619295 0 ] [ 0 0.159059 0.622981 0 ][ 0 0.16 0.626667 0 ] [ 0 0.160942 0.630353 0 ][ 0 0.161883 0.63404 0 ] [ 0 0.162824 0.637726 0 ][ 0 0.163765 0.641412 0 ] [ 0 0.164706 0.645098 0 ][ 0 0.165648 0.648785 0 ] [ 0 0.166589 0.652471 0 ][ 0 0.16753 0.656157 0 ] [ 0 0.168471 0.659844 0 ][ 0 0.169412 0.66353 0 ] [ 0 0.170353 0.667216 0 ][ 0 0.171295 0.670902 0 ] [ 0 0.172236 0.674589 0 ][ 0 0.173177 0.678275 0 ] [ 0 0.174118 0.681961 0 ][ 0 0.175059 0.685648 0 ] [ 0 0.176 0.689334 0 ][ 0 0.176942 0.69302 0 ] [ 0 0.177883 0.696706 0 ][ 0 0.178824 0.700393 0 ] [ 0 0.179765 0.704079 0 ][ 0 0.180706 0.707765 0 ] [ 0 0.181648 0.711451 0 ][ 0 0.182589 0.715138 0 ] [ 0 0.18353 0.718824 0 ][ 0 0.184471 0.72251 0 ] [ 0 0.185412 0.726196 0 ][ 0 0.186353 0.729883 0 ] [ 0 0.187295 0.733569 0 ][ 0 0.188236 0.737255 0 ] [ 0 0.189177 0.740942 0 ][ 0 0.190118 0.744628 0 ] [ 0 0.191059 0.748314 0 ][ 0 0.192 0.752 0 ] [ 0 0.192942 0.755687 0 ][ 0 0.193883 0.759373 0 ] [ 0 0.194824 0.763059 0 ][ 0 0.195765 0.766746 0 ] [ 0 0.196706 0.770432 0 ][ 0 0.197648 0.774118 0 ] [ 0 0.198589 0.777804 0 ][ 0 0.19953 0.781491 0 ] [ 0 0.200471 0.785177 0 ][ 0 0.201412 0.788863 0 ] [ 0 0.202353 0.792549 0 ][ 0 0.203295 0.796236 0 ] [ 0 0.204236 0.799922 0 ][ 0 0.205177 0.803608 0 ] [ 0 0.206118 0.807294 0 ][ 0 0.207059 0.810981 0 ] [ 0 0.208 0.814667 0 ][ 0 0.208942 0.818353 0 ] [ 0 0.209883 0.82204 0 ][ 0 0.210824 0.825726 0 ] [ 0 0.211765 0.829412 0 ][ 0 0.212706 0.833098 0 ] [ 0 0.213648 0.836785 0 ][ 0 0.214589 0.840471 0 ] [ 0 0.21553 0.844157 0 ][ 0 0.216471 0.847844 0 ] [ 0 0.217412 0.85153 0 ][ 0 0.218353 0.855216 0 ] [ 0 0.219295 0.858902 0 ][ 0 0.220236 0.862589 0 ] [ 0 0.221177 0.866275 0 ][ 0 0.222118 0.869961 0 ] [ 0 0.223059 0.873648 0 ][ 0 0.224 0.877334 0 ] [ 0 0.224942 0.88102 0 ][ 0 0.225883 0.884706 0 ] [ 0 0.226824 0.888393 0 ][ 0 0.227765 0.892079 0 ] [ 0 0.228706 0.895765 0 ][ 0 0.229648 0.899451 0 ] [ 0 0.230589 0.903138 0 ][ 0 0.23153 0.906824 0 ] [ 0 0.232471 0.91051 0 ][ 0 0.233412 0.914196 0 ] [ 0 0.234353 0.917883 0 ][ 0 0.235295 0.921569 0 ] [ 0 0.236236 0.925255 0 ][ 0 0.237177 0.928942 0 ] [ 0 0.238118 0.932628 0 ][ 0 0.239059 0.936314 0 ] [ 0 0.24 0.94 0 ]] >>add_csd1 /1 get_csdsepcs1 sepf0.3 lw0 lc0 lj4 ml[] 0 dshtrue sadj60.0616 10.7657 mo60.0567 10.7696 li60.021 10.8067 li60.0103 10.8184 li60.0215 10.8282 li60.0591 10.8633 li63.3306 13.8985 li63.4009 13.9629 li63.4224 13.9825 li63.4258 13.9542 li63.439 13.8594 li63.5079 13.3506 63.5987 12.8399 63.7085 12.3399 cv63.7164 12.3057 li63.7183 12.295 li63.709 12.2891 li63.6783 12.2715 li60.5147 10.3565 li60.4795 10.336 li60.4688 10.3282 li60.4605 10.3379 li60.4327 10.3692 li60.4283 10.3731 li60.4024 10.4024 li60.441 10.3985 li60.5084 10.3926 li60.5464 10.3887 li60.5157 10.3653 li60.3755 10.2598 60.1544 10.2813 60.0328 10.4102 cv59.9722 10.4747 59.9415 10.5626 59.9488 10.6485 cv59.9566 10.7344 59.9991 10.8106 60.0689 10.8633 cv60.0953 10.8829 li60.0928 10.8497 li60.0874 10.7754 li60.085 10.7422 li60.0616 10.7657 licptrue sop1 /1 get_csdsepcs1 seps56.8907 14.9004 mo56.8873 14.9043 li56.8589 14.9473 li56.8506 14.96 li56.8633 14.9688 li56.9058 14.9961 li63.2422 19.1192 li63.3306 19.1768 li63.357 19.1934 li63.3536 19.1622 li63.3423 19.0586 li63.272 18.3965 63.2364 17.71 63.2364 17.0157 cv63.2364 16.9864 63.2369 16.9581 63.2374 16.9297 cv63.2383 16.8575 li63.2388 16.8233 li63.2085 16.8233 li63.2149 16.8106 li63.2276 16.8086 li63.2256 16.8086 63.2105 16.8028 63.1973 16.7969 cv57.2593 14.4249 li57.2193 14.4083 li57.2076 14.4043 li57.2007 14.4151 li57.1788 14.4522 li57.1758 14.4571 li57.1568 14.4903 li57.1929 14.4795 li57.2588 14.461 li57.295 14.4502 li57.2618 14.4327 li57.1036 14.3506 56.8892 14.4063 56.794 14.5538 cv56.7476 14.626 56.7334 14.7149 56.7554 14.7969 cv56.7784 14.8829 56.835 14.9522 56.9151 14.9942 cv56.9449 15.0088 li56.9361 14.9766 li56.9175 14.9043 li56.9092 14.8711 li56.8907 14.9004 lifalse sop1 /1 get_csdsepcs1 sepf56.8907 14.9004 mo56.8873 14.9043 li56.8589 14.9473 li56.8506 14.96 li56.8633 14.9688 li56.9058 14.9961 li63.2422 19.1192 li63.3306 19.1768 li63.357 19.1934 li63.3536 19.1622 li63.3423 19.0586 li63.272 18.3965 63.2364 17.71 63.2364 17.0157 cv63.2364 16.9864 63.2369 16.9581 63.2374 16.9297 cv63.2383 16.8575 li63.2388 16.8233 li63.2085 16.8233 li63.2149 16.8106 li63.2276 16.8086 li63.2256 16.8086 63.2105 16.8028 63.1973 16.7969 cv57.2593 14.4249 li57.2193 14.4083 li57.2076 14.4043 li57.2007 14.4151 li57.1788 14.4522 li57.1758 14.4571 li57.1568 14.4903 li57.1929 14.4795 li57.2588 14.461 li57.295 14.4502 li57.2618 14.4327 li57.1036 14.3506 56.8892 14.4063 56.794 14.5538 cv56.7476 14.626 56.7334 14.7149 56.7554 14.7969 cv56.7784 14.8829 56.835 14.9522 56.9151 14.9942 cv56.9449 15.0088 li56.9361 14.9766 li56.9175 14.9043 li56.9092 14.8711 li56.8907 14.9004 licptrue sop1 /1 get_csdsepcs1 seps54.5699 19.4629 mo54.5674 19.4688 li54.546 19.5157 li54.5396 19.5293 li54.5538 19.5352 li54.6002 19.5557 li64.5547 23.9043 li64.6773 23.9571 li64.7139 23.9737 li64.6968 23.9376 li64.6392 23.8165 li64.2168 22.9268 63.8858 21.962 63.6548 20.9483 cv63.6475 20.918 li63.6456 20.9083 li63.6363 20.9063 li63.6055 20.8995 li54.8418 18.9376 li54.7989 18.9278 li54.7862 18.9258 li54.7813 18.9376 li54.7662 18.9786 li54.7642 18.9844 li54.7515 19.0196 li54.7847 19.004 li54.8472 18.9727 li54.8804 18.9571 li54.8453 18.9454 li54.6729 18.8887 54.4722 18.9786 54.4068 19.1397 cv54.375 19.2168 54.3775 19.3028 54.4136 19.3809 cv54.4507 19.461 54.522 19.5235 54.6089 19.5528 cv54.6407 19.5626 li54.627 19.5313 li54.5972 19.4629 li54.5835 19.4327 li54.5699 19.4629 lifalse sop1 /1 get_csdsepcs1 sepf54.5699 19.4629 mo54.5674 19.4688 li54.546 19.5157 li54.5396 19.5293 li54.5538 19.5352 li54.6002 19.5557 li64.5547 23.9043 li64.6773 23.9571 li64.7139 23.9737 li64.6968 23.9376 li64.6392 23.8165 li64.2168 22.9268 63.8858 21.962 63.6548 20.9483 cv63.6475 20.918 li63.6456 20.9083 li63.6363 20.9063 li63.6055 20.8995 li54.8418 18.9376 li54.7989 18.9278 li54.7862 18.9258 li54.7813 18.9376 li54.7662 18.9786 li54.7642 18.9844 li54.7515 19.0196 li54.7847 19.004 li54.8472 18.9727 li54.8804 18.9571 li54.8453 18.9454 li54.6729 18.8887 54.4722 18.9786 54.4068 19.1397 cv54.375 19.2168 54.3775 19.3028 54.4136 19.3809 cv54.4507 19.461 54.522 19.5235 54.6089 19.5528 cv54.6407 19.5626 li54.627 19.5313 li54.5972 19.4629 li54.5835 19.4327 li54.5699 19.4629 licptrue sop1 /1 get_csdsepcs1 seps89.8458 41.6016 mo89.8458 37.459 85.2012 35.8633 79.8238 34.0176 cv74.2832 32.1133 68.0035 29.9571 65.0025 24.5235 cv64.9893 24.5 li64.9854 24.4922 li64.9771 24.4922 li64.9498 24.4903 li53.3355 23.7579 li53.2911 23.7559 li53.2774 23.7549 li53.2754 23.7676 li53.2676 23.8116 li53.2662 23.8184 li53.2598 23.8536 li53.2896 23.8321 li53.3467 23.792 li53.3765 23.7715 li53.3404 23.7657 li53.1592 23.7364 52.9776 23.8565 52.9444 24.0274 cv52.9283 24.1075 52.9463 24.1905 52.9952 24.2598 cv53.0469 24.335 53.1294 24.3848 53.2203 24.4004 cv53.2544 24.4053 li53.2354 24.377 li53.1944 24.3165 li53.1749 24.2872 li53.1675 24.3213 li53.1661 24.3282 li53.1548 24.375 li53.1519 24.3887 li53.1661 24.3926 li53.2129 24.4043 li64.8848 27.4004 li64.8892 27.4024 li64.8902 27.4024 li64.8916 27.4024 li64.896 27.4024 li64.9297 27.4053 64.96 27.42 64.98 27.4434 cv64.9952 27.4629 65.0025 27.4844 65.0005 27.5069 cv64.9952 27.5586 64.9395 27.6124 64.8721 27.6075 cv64.8682 27.6065 li64.8668 27.6065 li64.8653 27.6065 li64.8609 27.6075 li64.8614 27.6075 52.7862 28.7403 52.7862 28.7403 cv52.7388 28.7442 li52.7252 28.7461 li52.7256 28.7598 li52.7271 28.8067 li52.7271 28.8145 li52.7286 28.8477 li52.753 28.8223 li52.8033 28.7715 li52.8277 28.7461 li52.7925 28.7461 li52.607 28.7461 52.4507 28.8926 52.4507 29.0684 cv52.4507 29.1504 52.4839 29.2266 52.545 29.2891 cv52.6094 29.3536 52.6998 29.3907 52.7925 29.3907 cv52.8277 29.3907 li52.8033 29.3653 li52.753 29.3126 li52.7286 29.2872 li52.7271 29.3223 li52.7271 29.3301 li52.7256 29.377 li52.7252 29.3907 li52.7388 29.3926 li52.7862 29.3965 li64.8453 30.5293 li64.8497 30.5293 li64.8506 30.5293 li64.8521 30.5293 li64.8565 30.5293 li64.9205 30.5235 64.9766 30.5645 64.982 30.6172 cv64.9849 30.6465 64.9747 30.6758 64.9551 30.7012 cv64.9371 30.7227 64.9126 30.7344 64.8858 30.7364 cv64.8814 30.7383 li64.8799 30.7383 li64.879 30.7383 li64.8746 30.7383 li53.2105 33.7325 li53.1641 33.7442 li53.15 33.7461 li53.1529 33.7618 li53.1626 33.8086 li53.1641 33.8145 li53.1714 33.8477 li53.191 33.8204 li53.2325 33.7598 li53.252 33.7305 li53.2173 33.7364 li53.1265 33.752 53.0445 33.8008 52.9927 33.877 cv52.9439 33.9454 52.9253 34.0293 52.9415 34.1094 cv52.9752 34.2813 53.1563 34.4004 53.3374 34.3711 cv53.3736 34.3653 li53.3438 34.3438 li53.2872 34.3028 li53.2574 34.2813 li53.2632 34.3184 li53.2642 34.3243 li53.2715 34.3692 li53.2735 34.3809 li53.2872 34.3809 li53.3326 34.379 li65.4214 33.6172 li65.4258 33.6172 li65.4273 33.6172 li65.4283 33.6172 li65.4327 33.6153 li65.4957 33.5997 65.5601 33.6309 65.5762 33.6856 cv65.584 33.7129 65.5801 33.7442 65.564 33.7715 cv65.5499 33.7969 65.5279 33.8145 65.5025 33.8204 cv65.4981 33.8204 li65.4966 33.8223 li65.4957 33.8223 li65.4918 33.8243 li54.5948 38.5821 li54.5494 38.6016 li54.5357 38.6075 li54.5416 38.6211 li54.5611 38.6661 li54.5635 38.6719 li54.5767 38.7032 li54.5909 38.6719 li54.6216 38.6055 li54.6353 38.5743 li54.6031 38.586 li54.5166 38.6133 54.4454 38.6758 54.4082 38.7559 cv54.3716 38.834 54.3692 38.92 54.4014 38.9981 cv54.4668 39.1602 54.6675 39.2481 54.8394 39.1915 cv54.875 39.1797 li54.8414 39.1641 li54.7794 39.1348 li54.7457 39.1172 li54.7584 39.1524 li54.7608 39.1583 li54.7759 39.1993 li54.7808 39.2129 li54.793 39.209 li54.836 39.1993 li66.5865 36.5684 li66.5909 36.5684 li66.5923 36.5684 li66.5933 36.5684 li66.5977 36.5665 li66.6544 36.543 66.7403 36.5723 66.7676 36.627 cv66.7784 36.6465 66.7794 36.6719 66.7706 36.6954 cv66.7598 36.7266 66.7364 36.75 66.7071 36.7618 cv66.7032 36.7637 li66.7017 36.7637 li66.7007 36.7657 li66.6968 36.7676 li56.8975 43.1426 li56.855 43.17 li56.8423 43.1778 li56.8506 43.1915 li56.879 43.2325 li56.8824 43.2383 li56.9009 43.2657 li56.9097 43.2344 li56.9283 43.1622 li56.9366 43.129 li56.9068 43.1446 li56.8267 43.1856 56.7701 43.2559 56.7471 43.3418 cv56.7252 43.4239 56.7393 43.5118 56.7857 43.584 cv56.8809 43.7325 57.0948 43.7872 57.2535 43.7051 cv57.2872 43.6876 li57.2505 43.6778 li57.1846 43.6583 li57.148 43.6485 li57.1675 43.6817 li57.171 43.6856 li57.1929 43.7227 li57.1993 43.7344 li57.211 43.7286 li57.251 43.7129 li68.3038 39.2989 li68.3077 39.2969 li68.3091 39.2969 li68.3101 39.295 li68.314 39.293 li68.3672 39.2598 68.4429 39.2715 68.48 39.3184 cv68.5005 39.3438 68.5098 39.3809 68.504 39.4141 cv68.501 39.4317 68.4927 39.4551 68.4703 39.4688 cv68.4664 39.4708 li68.4654 39.4727 li68.4644 39.4727 li68.461 39.4766 li60.0484 47.2754 li60.0108 47.3106 li59.9996 47.3223 li60.0103 47.3321 li60.046 47.3692 li60.0508 47.3731 li60.0738 47.3965 li60.0762 47.3653 li60.0821 47.2891 li60.0845 47.2559 li60.0582 47.2754 li59.9883 47.3301 59.9458 47.4043 59.9385 47.4903 cv59.9307 47.5762 59.961 47.6641 60.022 47.7286 cv60.1436 47.8594 60.3648 47.879 60.5049 47.7735 cv60.5357 47.752 li60.4976 47.7461 li60.4297 47.7403 li60.3916 47.7364 li60.417 47.7657 li60.4214 47.7696 li60.4488 47.8008 li60.4571 47.8106 li60.4683 47.8047 li60.504 47.7833 li70.5337 41.7149 li70.5376 41.7129 li70.5391 41.711 li70.5401 41.711 li70.5435 41.7071 li70.5894 41.6661 70.6666 41.6661 70.712 41.7071 cv70.7662 41.7559 70.774 41.7833 70.774 41.7969 cv70.774 41.8008 70.774 41.8184 70.7374 41.8516 cv70.7334 41.8555 li70.7325 41.8555 li70.7315 41.8575 li70.7286 41.8614 li63.9517 50.8575 li63.921 50.8965 li63.9122 50.9102 li63.9244 50.918 li63.9659 50.9493 li63.9712 50.9532 li63.9981 50.9727 li63.9947 50.9395 li63.9878 50.8633 li63.9844 50.8301 li63.9615 50.8555 li63.9044 50.918 63.8765 50.9961 63.8838 51.0801 cv63.8912 51.168 63.938 51.252 64.0123 51.3067 cv64.1563 51.4161 64.378 51.4004 64.4961 51.2754 cv64.5225 51.2461 li64.4839 51.25 li64.4166 51.254 li64.378 51.2579 li64.4082 51.2813 li64.4136 51.2852 li64.4458 51.3106 li64.4556 51.3184 li64.4649 51.3106 li64.4966 51.2833 li73.1929 43.752 li73.1968 43.7481 li73.1978 43.7461 li73.1988 43.7461 li73.2017 43.7422 li73.2393 43.6934 73.3155 43.6817 73.3648 43.7149 cv73.4063 43.7442 73.4322 43.7774 73.4371 43.8086 cv73.44 43.8301 73.4341 43.8477 73.42 43.8672 cv73.417 43.8711 li73.4161 43.8711 li73.4151 43.8731 li73.4131 43.877 li68.4893 53.7754 li68.4668 53.8223 li68.4605 53.834 li68.4737 53.8418 li68.5186 53.8633 li68.525 53.8672 li68.5547 53.8809 li68.546 53.8497 li68.5259 53.7774 li68.5171 53.7442 li68.4991 53.7735 li68.4551 53.8418 68.4424 53.9219 68.4639 54.002 cv68.4869 54.0899 68.5489 54.1661 68.6338 54.209 cv68.7969 54.293 69.0127 54.2442 69.105 54.0997 cv69.1255 54.0684 li69.0889 54.0782 li69.0225 54.0938 li68.9854 54.1036 li69.0191 54.1211 li69.025 54.125 li69.0616 54.1465 li69.0728 54.1524 li69.0806 54.1426 li69.107 54.1094 li74.0992 47.9454 li74.1148 47.9258 li74.0909 47.9219 li74.0035 47.9024 li73.9795 47.8985 li73.9859 47.9219 li73.9888 47.9336 li74.0137 48.0293 li74.0215 48.0586 li74.0401 48.0352 li74.1021 47.9571 li76.3116 45.2305 li76.3389 45.1954 li76.2964 45.2051 li76.2364 45.2188 li76.1939 45.2305 li76.2334 45.2481 li77.6846 45.9219 79.1104 46.3516 80.2471 46.4629 cv83.6338 46.7891 86.7989 46.0274 88.5079 44.4747 cv89.3965 43.668 89.8458 42.7012 89.8458 41.6016 cvfalse sop1 /1 get_csdsepcs1 sepf89.8458 41.6016 mo89.8458 37.459 85.2012 35.8633 79.8238 34.0176 cv74.2832 32.1133 68.0035 29.9571 65.0025 24.5235 cv64.9893 24.5 li64.9854 24.4922 li64.9771 24.4922 li64.9498 24.4903 li53.3355 23.7579 li53.2911 23.7559 li53.2774 23.7549 li53.2754 23.7676 li53.2676 23.8116 li53.2662 23.8184 li53.2598 23.8536 li53.2896 23.8321 li53.3467 23.792 li53.3765 23.7715 li53.3404 23.7657 li53.1592 23.7364 52.9776 23.8565 52.9444 24.0274 cv52.9283 24.1075 52.9463 24.1905 52.9952 24.2598 cv53.0469 24.335 53.1294 24.3848 53.2203 24.4004 cv53.2544 24.4053 li53.2354 24.377 li53.1944 24.3165 li53.1749 24.2872 li53.1675 24.3213 li53.1661 24.3282 li53.1548 24.375 li53.1519 24.3887 li53.1661 24.3926 li53.2129 24.4043 li64.8848 27.4004 li64.8892 27.4024 li64.8902 27.4024 li64.8916 27.4024 li64.896 27.4024 li64.9297 27.4053 64.96 27.42 64.98 27.4434 cv64.9952 27.4629 65.0025 27.4844 65.0005 27.5069 cv64.9952 27.5586 64.9395 27.6124 64.8721 27.6075 cv64.8682 27.6065 li64.8668 27.6065 li64.8653 27.6065 li64.8609 27.6075 li64.8614 27.6075 52.7862 28.7403 52.7862 28.7403 cv52.7388 28.7442 li52.7252 28.7461 li52.7256 28.7598 li52.7271 28.8067 li52.7271 28.8145 li52.7286 28.8477 li52.753 28.8223 li52.8033 28.7715 li52.8277 28.7461 li52.7925 28.7461 li52.607 28.7461 52.4507 28.8926 52.4507 29.0684 cv52.4507 29.1504 52.4839 29.2266 52.545 29.2891 cv52.6094 29.3536 52.6998 29.3907 52.7925 29.3907 cv52.8277 29.3907 li52.8033 29.3653 li52.753 29.3126 li52.7286 29.2872 li52.7271 29.3223 li52.7271 29.3301 li52.7256 29.377 li52.7252 29.3907 li52.7388 29.3926 li52.7862 29.3965 li64.8453 30.5293 li64.8497 30.5293 li64.8506 30.5293 li64.8521 30.5293 li64.8565 30.5293 li64.9205 30.5235 64.9766 30.5645 64.982 30.6172 cv64.9849 30.6465 64.9747 30.6758 64.9551 30.7012 cv64.9371 30.7227 64.9126 30.7344 64.8858 30.7364 cv64.8814 30.7383 li64.8799 30.7383 li64.879 30.7383 li64.8746 30.7383 li53.2105 33.7325 li53.1641 33.7442 li53.15 33.7461 li53.1529 33.7618 li53.1626 33.8086 li53.1641 33.8145 li53.1714 33.8477 li53.191 33.8204 li53.2325 33.7598 li53.252 33.7305 li53.2173 33.7364 li53.1265 33.752 53.0445 33.8008 52.9927 33.877 cv52.9439 33.9454 52.9253 34.0293 52.9415 34.1094 cv52.9752 34.2813 53.1563 34.4004 53.3374 34.3711 cv53.3736 34.3653 li53.3438 34.3438 li53.2872 34.3028 li53.2574 34.2813 li53.2632 34.3184 li53.2642 34.3243 li53.2715 34.3692 li53.2735 34.3809 li53.2872 34.3809 li53.3326 34.379 li65.4214 33.6172 li65.4258 33.6172 li65.4273 33.6172 li65.4283 33.6172 li65.4327 33.6153 li65.4957 33.5997 65.5601 33.6309 65.5762 33.6856 cv65.584 33.7129 65.5801 33.7442 65.564 33.7715 cv65.5499 33.7969 65.5279 33.8145 65.5025 33.8204 cv65.4981 33.8204 li65.4966 33.8223 li65.4957 33.8223 li65.4918 33.8243 li54.5948 38.5821 li54.5494 38.6016 li54.5357 38.6075 li54.5416 38.6211 li54.5611 38.6661 li54.5635 38.6719 li54.5767 38.7032 li54.5909 38.6719 li54.6216 38.6055 li54.6353 38.5743 li54.6031 38.586 li54.5166 38.6133 54.4454 38.6758 54.4082 38.7559 cv54.3716 38.834 54.3692 38.92 54.4014 38.9981 cv54.4668 39.1602 54.6675 39.2481 54.8394 39.1915 cv54.875 39.1797 li54.8414 39.1641 li54.7794 39.1348 li54.7457 39.1172 li54.7584 39.1524 li54.7608 39.1583 li54.7759 39.1993 li54.7808 39.2129 li54.793 39.209 li54.836 39.1993 li66.5865 36.5684 li66.5909 36.5684 li66.5923 36.5684 li66.5933 36.5684 li66.5977 36.5665 li66.6544 36.543 66.7403 36.5723 66.7676 36.627 cv66.7784 36.6465 66.7794 36.6719 66.7706 36.6954 cv66.7598 36.7266 66.7364 36.75 66.7071 36.7618 cv66.7032 36.7637 li66.7017 36.7637 li66.7007 36.7657 li66.6968 36.7676 li56.8975 43.1426 li56.855 43.17 li56.8423 43.1778 li56.8506 43.1915 li56.879 43.2325 li56.8824 43.2383 li56.9009 43.2657 li56.9097 43.2344 li56.9283 43.1622 li56.9366 43.129 li56.9068 43.1446 li56.8267 43.1856 56.7701 43.2559 56.7471 43.3418 cv56.7252 43.4239 56.7393 43.5118 56.7857 43.584 cv56.8809 43.7325 57.0948 43.7872 57.2535 43.7051 cv57.2872 43.6876 li57.2505 43.6778 li57.1846 43.6583 li57.148 43.6485 li57.1675 43.6817 li57.171 43.6856 li57.1929 43.7227 li57.1993 43.7344 li57.211 43.7286 li57.251 43.7129 li68.3038 39.2989 li68.3077 39.2969 li68.3091 39.2969 li68.3101 39.295 li68.314 39.293 li68.3672 39.2598 68.4429 39.2715 68.48 39.3184 cv68.5005 39.3438 68.5098 39.3809 68.504 39.4141 cv68.501 39.4317 68.4927 39.4551 68.4703 39.4688 cv68.4664 39.4708 li68.4654 39.4727 li68.4644 39.4727 li68.461 39.4766 li60.0484 47.2754 li60.0108 47.3106 li59.9996 47.3223 li60.0103 47.3321 li60.046 47.3692 li60.0508 47.3731 li60.0738 47.3965 li60.0762 47.3653 li60.0821 47.2891 li60.0845 47.2559 li60.0582 47.2754 li59.9883 47.3301 59.9458 47.4043 59.9385 47.4903 cv59.9307 47.5762 59.961 47.6641 60.022 47.7286 cv60.1436 47.8594 60.3648 47.879 60.5049 47.7735 cv60.5357 47.752 li60.4976 47.7461 li60.4297 47.7403 li60.3916 47.7364 li60.417 47.7657 li60.4214 47.7696 li60.4488 47.8008 li60.4571 47.8106 li60.4683 47.8047 li60.504 47.7833 li70.5337 41.7149 li70.5376 41.7129 li70.5391 41.711 li70.5401 41.711 li70.5435 41.7071 li70.5894 41.6661 70.6666 41.6661 70.712 41.7071 cv70.7662 41.7559 70.774 41.7833 70.774 41.7969 cv70.774 41.8008 70.774 41.8184 70.7374 41.8516 cv70.7334 41.8555 li70.7325 41.8555 li70.7315 41.8575 li70.7286 41.8614 li63.9517 50.8575 li63.921 50.8965 li63.9122 50.9102 li63.9244 50.918 li63.9659 50.9493 li63.9712 50.9532 li63.9981 50.9727 li63.9947 50.9395 li63.9878 50.8633 li63.9844 50.8301 li63.9615 50.8555 li63.9044 50.918 63.8765 50.9961 63.8838 51.0801 cv63.8912 51.168 63.938 51.252 64.0123 51.3067 cv64.1563 51.4161 64.378 51.4004 64.4961 51.2754 cv64.5225 51.2461 li64.4839 51.25 li64.4166 51.254 li64.378 51.2579 li64.4082 51.2813 li64.4136 51.2852 li64.4458 51.3106 li64.4556 51.3184 li64.4649 51.3106 li64.4966 51.2833 li73.1929 43.752 li73.1968 43.7481 li73.1978 43.7461 li73.1988 43.7461 li73.2017 43.7422 li73.2393 43.6934 73.3155 43.6817 73.3648 43.7149 cv73.4063 43.7442 73.4322 43.7774 73.4371 43.8086 cv73.44 43.8301 73.4341 43.8477 73.42 43.8672 cv73.417 43.8711 li73.4161 43.8711 li73.4151 43.8731 li73.4131 43.877 li68.4893 53.7754 li68.4668 53.8223 li68.4605 53.834 li68.4737 53.8418 li68.5186 53.8633 li68.525 53.8672 li68.5547 53.8809 li68.546 53.8497 li68.5259 53.7774 li68.5171 53.7442 li68.4991 53.7735 li68.4551 53.8418 68.4424 53.9219 68.4639 54.002 cv68.4869 54.0899 68.5489 54.1661 68.6338 54.209 cv68.7969 54.293 69.0127 54.2442 69.105 54.0997 cv69.1255 54.0684 li69.0889 54.0782 li69.0225 54.0938 li68.9854 54.1036 li69.0191 54.1211 li69.025 54.125 li69.0616 54.1465 li69.0728 54.1524 li69.0806 54.1426 li69.107 54.1094 li74.0992 47.9454 li74.1148 47.9258 li74.0909 47.9219 li74.0035 47.9024 li73.9795 47.8985 li73.9859 47.9219 li73.9888 47.9336 li74.0137 48.0293 li74.0215 48.0586 li74.0401 48.0352 li74.1021 47.9571 li76.3116 45.2305 li76.3389 45.1954 li76.2964 45.2051 li76.2364 45.2188 li76.1939 45.2305 li76.2334 45.2481 li77.6846 45.9219 79.1104 46.3516 80.2471 46.4629 cv83.6338 46.7891 86.7989 46.0274 88.5079 44.4747 cv89.3965 43.668 89.8458 42.7012 89.8458 41.6016 cvcptrue sop1 /1 get_csdsepcs1 seps105.667 50.9629 mo105.672 50.959 li105.715 50.9297 li105.727 50.9219 li105.717 50.9083 li105.688 50.8672 li103.067 47.3868 li103.008 47.3086 li102.991 47.2852 li102.981 47.3145 li102.952 47.4063 li102.792 47.9102 102.61 48.4004 102.411 48.8672 cv102.395 48.9004 li102.391 48.9102 li102.399 48.918 li102.428 48.9415 li105.143 51.293 li105.174 51.3204 li105.184 51.3282 li105.192 51.3223 li105.225 51.2969 li105.231 51.293 li105.262 51.2676 li105.221 51.2657 li105.155 51.2598 li105.116 51.2559 li105.143 51.2852 li105.262 51.4102 105.483 51.4258 105.627 51.3184 cv105.702 51.2618 105.747 51.1797 105.754 51.0918 cv105.762 51.0079 105.735 50.9278 105.678 50.8653 cv105.655 50.8418 li105.651 50.875 li105.645 50.9493 li105.641 50.9825 li105.667 50.9629 lifalse sop1 /1 get_csdsepcs1 sepf105.667 50.9629 mo105.672 50.959 li105.715 50.9297 li105.727 50.9219 li105.717 50.9083 li105.688 50.8672 li103.067 47.3868 li103.008 47.3086 li102.991 47.2852 li102.981 47.3145 li102.952 47.4063 li102.792 47.9102 102.61 48.4004 102.411 48.8672 cv102.395 48.9004 li102.391 48.9102 li102.399 48.918 li102.428 48.9415 li105.143 51.293 li105.174 51.3204 li105.184 51.3282 li105.192 51.3223 li105.225 51.2969 li105.231 51.293 li105.262 51.2676 li105.221 51.2657 li105.155 51.2598 li105.116 51.2559 li105.143 51.2852 li105.262 51.4102 105.483 51.4258 105.627 51.3184 cv105.702 51.2618 105.747 51.1797 105.754 51.0918 cv105.762 51.0079 105.735 50.9278 105.678 50.8653 cv105.655 50.8418 li105.651 50.875 li105.645 50.9493 li105.641 50.9825 li105.667 50.9629 licptrue sop1 /1 get_csdsepcs1 seps109.59 47.3868 mo109.594 47.3829 li109.631 47.3458 li109.641 47.334 li109.631 47.3243 li109.592 47.2891 li103.995 42.0958 li103.917 42.0254 li103.895 42.002 li103.891 42.0352 li103.885 42.1387 li103.833 42.9239 103.749 43.6895 103.637 44.42 cv103.631 44.4512 li103.629 44.4629 li103.639 44.4668 li103.667 44.4844 li109.137 47.795 li109.172 47.8165 li109.184 47.8223 li109.192 47.8145 li109.219 47.7833 li109.223 47.7793 li109.25 47.75 li109.211 47.754 li109.143 47.7598 li109.106 47.7637 li109.137 47.7872 li109.276 47.8926 109.497 47.8711 109.62 47.7422 cv109.68 47.6758 109.711 47.5899 109.704 47.502 cv109.696 47.418 109.653 47.3418 109.583 47.2891 cv109.557 47.2696 li109.559 47.3028 li109.565 47.377 li109.567 47.4102 li109.59 47.3868 lifalse sop1 /1 get_csdsepcs1 sepf109.59 47.3868 mo109.594 47.3829 li109.631 47.3458 li109.641 47.334 li109.631 47.3243 li109.592 47.2891 li103.995 42.0958 li103.917 42.0254 li103.895 42.002 li103.891 42.0352 li103.885 42.1387 li103.833 42.9239 103.749 43.6895 103.637 44.42 cv103.631 44.4512 li103.629 44.4629 li103.639 44.4668 li103.667 44.4844 li109.137 47.795 li109.172 47.8165 li109.184 47.8223 li109.192 47.8145 li109.219 47.7833 li109.223 47.7793 li109.25 47.75 li109.211 47.754 li109.143 47.7598 li109.106 47.7637 li109.137 47.7872 li109.276 47.8926 109.497 47.8711 109.62 47.7422 cv109.68 47.6758 109.711 47.5899 109.704 47.502 cv109.696 47.418 109.653 47.3418 109.583 47.2891 cv109.557 47.2696 li109.559 47.3028 li109.565 47.377 li109.567 47.4102 li109.59 47.3868 licptrue sop1 /1 get_csdsepcs1 seps112.76 43.254 mo112.764 43.2481 li112.793 43.2051 li112.803 43.1934 li112.79 43.1856 li112.747 43.1563 li103.883 37.3887 li103.792 37.3301 li103.762 37.3106 li103.768 37.3438 li103.784 37.4532 li103.899 38.2344 103.958 39.0586 103.958 39.8965 cv103.956 40.1876 li103.954 40.3106 li103.954 40.3458 li103.983 40.3458 li103.977 40.3575 li103.963 40.3594 li103.965 40.3594 103.983 40.3672 103.995 40.3711 cv112.393 43.7286 li112.432 43.7442 li112.444 43.7481 li112.45 43.7383 li112.473 43.7012 li112.475 43.6954 li112.495 43.6622 li112.459 43.6739 li112.393 43.6915 li112.356 43.7012 li112.391 43.7188 li112.549 43.8008 112.762 43.7461 112.858 43.5977 cv112.905 43.5254 112.918 43.4376 112.897 43.3555 cv112.874 43.2696 112.817 43.2012 112.737 43.1602 cv112.708 43.1446 li112.715 43.1758 li112.733 43.2481 li112.741 43.2813 li112.76 43.254 lifalse sop1 /1 get_csdsepcs1 sepf112.76 43.254 mo112.764 43.2481 li112.793 43.2051 li112.803 43.1934 li112.79 43.1856 li112.747 43.1563 li103.883 37.3887 li103.792 37.3301 li103.762 37.3106 li103.768 37.3438 li103.784 37.4532 li103.899 38.2344 103.958 39.0586 103.958 39.8965 cv103.956 40.1876 li103.954 40.3106 li103.954 40.3458 li103.983 40.3458 li103.977 40.3575 li103.963 40.3594 li103.965 40.3594 103.983 40.3672 103.995 40.3711 cv112.393 43.7286 li112.432 43.7442 li112.444 43.7481 li112.45 43.7383 li112.473 43.7012 li112.475 43.6954 li112.495 43.6622 li112.459 43.6739 li112.393 43.6915 li112.356 43.7012 li112.391 43.7188 li112.549 43.8008 112.762 43.7461 112.858 43.5977 cv112.905 43.5254 112.918 43.4376 112.897 43.3555 cv112.874 43.2696 112.817 43.2012 112.737 43.1602 cv112.708 43.1446 li112.715 43.1758 li112.733 43.2481 li112.741 43.2813 li112.76 43.254 licptrue sop1 /1 get_csdsepcs1 seps117.202 29.086 mo117.202 29.0059 117.168 28.9258 117.108 28.8653 cv117.042 28.8008 116.952 28.7637 116.86 28.7637 cv116.825 28.7637 li116.85 28.7891 li116.899 28.8399 li116.924 28.8653 li116.924 28.8301 li116.924 28.8243 li116.926 28.7774 li116.926 28.7637 li116.913 28.7618 li116.866 28.7579 li104.803 27.625 li104.799 27.6241 li104.797 27.6241 li104.795 27.6241 li104.792 27.625 li104.731 27.629 104.682 27.5899 104.676 27.5333 cv104.672 27.503 104.682 27.4727 104.7 27.4512 cv104.713 27.4366 104.733 27.42 104.766 27.417 cv104.772 27.4161 li104.774 27.4161 li104.778 27.4151 li116.442 24.4229 li116.489 24.4112 li116.504 24.4073 li116.5 24.3926 li116.489 24.3458 li116.487 24.3399 li116.479 24.3057 li116.461 24.334 li116.42 24.3946 li116.401 24.4239 li116.434 24.418 li116.526 24.4043 116.608 24.3536 116.659 24.2793 cv116.708 24.209 116.727 24.126 116.711 24.045 cv116.678 23.875 116.497 23.7549 116.315 23.7833 cv116.278 23.7891 li116.309 23.8106 li116.366 23.8516 li116.395 23.8731 li116.389 23.836 li116.387 23.8301 li116.379 23.7862 li116.377 23.7735 li116.364 23.7735 li116.321 23.7764 li104.217 24.5381 li104.213 24.5381 li104.211 24.5381 li104.211 24.5391 li104.206 24.5391 li104.145 24.5547 104.086 24.5235 104.069 24.4688 cv104.061 24.4405 104.065 24.4083 104.079 24.3838 cv104.086 24.3692 104.104 24.3487 104.137 24.3409 cv104.141 24.3399 li104.143 24.3389 li104.147 24.3379 li115.057 19.5743 li115.104 19.5538 li115.118 19.5469 li115.112 19.5333 li115.092 19.4883 li115.088 19.4825 li115.075 19.4512 li115.061 19.4825 li115.032 19.5489 li115.016 19.5801 li115.049 19.5704 li115.137 19.5411 115.208 19.4795 115.245 19.3985 cv115.28 19.3213 115.284 19.2354 115.25 19.1573 cv115.186 18.9961 114.985 18.9073 114.813 18.9629 cv114.778 18.9747 li114.811 18.9913 li114.874 19.0215 li114.907 19.0381 li114.895 19.004 li114.891 18.9971 li114.877 18.9551 li114.872 18.9434 li114.86 18.9454 li114.817 18.9551 li103.036 21.5909 li103.032 21.5918 li103.03 21.5918 li103.03 21.5928 li103.024 21.5948 li102.963 21.6202 102.883 21.5997 102.858 21.5518 cv102.846 21.5293 102.846 21.502 102.854 21.4766 cv102.866 21.4493 102.885 21.4258 102.913 21.4151 cv102.917 21.4131 li102.918 21.4131 li102.92 21.4122 li102.922 21.4102 li112.754 15.0137 li112.799 14.9854 li112.811 14.9766 li112.803 14.9649 li112.774 14.9219 li112.77 14.917 li112.75 14.8887 li112.743 14.9219 li112.725 14.9942 li112.717 15.0264 li112.747 15.0118 li112.827 14.9688 112.883 14.9004 112.905 14.8145 cv112.928 14.7325 112.913 14.6436 112.868 14.5713 cv112.772 14.4239 112.559 14.3692 112.399 14.4502 cv112.366 14.4678 li112.403 14.4786 li112.467 14.4961 li112.504 14.5059 li112.485 14.4737 li112.481 14.4688 li112.459 14.4327 li112.454 14.4219 li112.442 14.4268 li112.403 14.4424 li101.301 18.875 li101.297 18.877 li101.295 18.877 li101.292 18.8799 li101.237 18.9141 101.17 18.9063 101.135 18.8614 cv101.116 18.836 101.108 18.8047 101.112 18.7754 cv101.116 18.7579 101.126 18.7344 101.149 18.7188 cv101.153 18.7168 li101.155 18.7159 li101.155 18.7149 li101.159 18.711 li109.604 10.8799 li109.643 10.8458 li109.655 10.834 li109.643 10.8243 li109.608 10.7872 li109.604 10.7823 li109.579 10.7579 li109.577 10.7911 li109.571 10.8663 li109.569 10.8995 li109.596 10.879 li109.665 10.8272 109.708 10.751 109.715 10.6661 cv109.723 10.5782 109.692 10.4922 109.631 10.4278 cv109.51 10.2969 109.288 10.2764 109.149 10.3819 cv109.118 10.4043 li109.157 10.4083 li109.223 10.4151 li109.262 10.419 li109.237 10.3907 li109.233 10.3848 li109.231 10.3848 109.204 10.3545 109.204 10.3545 cv109.196 10.3458 li109.184 10.3516 li109.149 10.3731 li99.0704 16.4688 li99.0665 16.4717 li99.0645 16.4727 li99.0626 16.4737 li99.0606 16.4766 li99.0157 16.5157 98.9415 16.5118 98.8926 16.4668 cv98.8731 16.4493 98.8614 16.4258 98.8614 16.4014 cv98.8614 16.377 98.8731 16.3536 98.8926 16.336 cv98.8965 16.3321 li98.8985 16.3311 li98.8985 16.3301 li98.9024 16.3262 li105.702 7.29883 li105.733 7.25782 li105.743 7.2461 li105.729 7.23633 li105.688 7.20704 li105.682 7.20313 li105.655 7.1836 li105.659 7.2168 li105.667 7.292 li105.67 7.32422 li105.692 7.30079 li105.75 7.23926 105.778 7.16016 105.77 7.07618 cv105.762 6.98731 105.715 6.9043 105.641 6.84961 cv105.499 6.74024 105.276 6.75586 105.159 6.88086 cv105.131 6.91016 li105.17 6.90626 li105.237 6.90235 li105.276 6.89844 li105.247 6.875 li105.241 6.8711 li105.208 6.84571 li105.198 6.8379 li105.188 6.84571 li105.159 6.87305 li96.4161 14.4415 li96.4122 14.4454 li96.4102 14.4454 li96.4102 14.4473 li96.4082 14.4512 li96.3692 14.5 96.295 14.5157 96.2442 14.4825 cv96.2149 14.4649 96.1954 14.4376 96.1895 14.4083 cv96.1876 14.3946 96.1876 14.3731 96.2032 14.3536 cv96.2071 14.3497 li96.2071 14.3477 li96.209 14.3458 li96.211 14.3418 li101.167 4.38086 li101.188 4.33594 li101.194 4.32227 li101.18 4.31543 li101.137 4.29297 li101.129 4.29004 li101.1 4.2754 li101.11 4.30762 li101.129 4.37891 li101.137 4.41211 li101.155 4.38282 li101.2 4.31446 101.211 4.23438 101.192 4.1543 cv101.167 4.06641 101.106 3.99122 101.02 3.94727 cv100.858 3.86329 100.641 3.91211 100.549 4.05567 cv100.53 4.0879 li100.567 4.07813 li100.633 4.06153 li100.668 4.05274 li100.635 4.03418 li100.629 4.03126 li100.592 4.01075 li100.583 4.00489 li100.575 4.01465 li100.547 4.04688 li99.2247 5.67774 li99.211 5.69532 li99.2325 5.70215 li99.3204 5.7334 li99.3418 5.74024 li99.3418 5.71876 li99.3418 5.71094 li99.3418 5.57032 li99.3418 5.52735 li99.3145 5.56055 li99.2247 5.66993 li93.2168 13.0606 li93.1895 13.0938 li93.2305 13.084 li93.2911 13.0704 li93.334 13.0616 li93.295 13.043 li91.2794 12.0606 87.8575 11.459 86.295 11.459 cv86.2657 11.459 86.2168 11.4571 86.1544 11.4551 cv82.9502 11.377 80.5645 12.0079 79.2588 13.2833 cv78.5035 14.0196 78.1207 14.9708 78.1207 16.1094 cv78.1207 17.6758 79.0044 18.959 80.9004 20.1475 cv82.5967 21.21 84.9512 22.0997 87.4454 23.0411 cv90.6973 24.2696 94.3848 25.6622 97.4063 27.7442 cv100.872 30.1329 102.913 33.0547 103.647 36.6758 cv103.655 36.709 li103.655 36.7168 li103.665 36.7188 li103.696 36.7266 li114.809 39.2149 li114.852 39.2247 li114.866 39.2266 li114.87 39.2149 li114.885 39.1758 li114.887 39.17 li114.901 39.1348 li114.866 39.1504 li114.805 39.1797 li114.77 39.1954 li114.807 39.2071 li114.979 39.2637 115.178 39.1758 115.245 39.0137 cv115.276 38.9356 115.274 38.8497 115.237 38.7715 cv115.2 38.6915 115.129 38.629 115.043 38.6016 cv115.01 38.5918 li115.024 38.6211 li115.055 38.6895 li115.069 38.7188 li115.083 38.6895 li115.084 38.6836 li115.104 38.6368 li115.11 38.6231 li115.096 38.6172 li115.051 38.5977 li104.163 33.8418 li104.159 33.8399 li104.157 33.8379 li104.155 33.8379 li104.151 33.8379 li104.126 33.8321 104.106 33.8145 104.092 33.7911 cv104.075 33.7618 104.071 33.7286 104.079 33.7012 cv104.096 33.6465 104.159 33.6153 104.223 33.6309 cv104.227 33.6309 li104.229 33.6329 li104.233 33.6329 li116.317 34.3946 li116.362 34.3985 li116.376 34.3985 li116.377 34.3848 li116.385 34.3418 li116.385 34.336 li116.391 34.2989 li116.362 34.3204 li116.305 34.3614 li116.276 34.3829 li116.311 34.3887 li116.493 34.418 116.674 34.2969 116.708 34.127 cv116.723 34.0469 116.706 33.9629 116.657 33.8926 cv116.604 33.8184 116.522 33.7676 116.432 33.754 cv116.397 33.7481 li116.417 33.7774 li116.458 33.8379 li116.477 33.8653 li116.485 33.8321 li116.487 33.8262 li116.497 33.7793 li116.499 33.7637 li116.485 33.7598 li116.438 33.7481 li104.788 30.7579 li104.784 30.7559 li104.782 30.7559 li104.78 30.7559 li104.776 30.7559 li104.745 30.754 104.717 30.7383 104.696 30.7149 cv104.678 30.6934 104.67 30.67 104.674 30.6446 cv104.678 30.5938 104.731 30.5391 104.799 30.545 cv104.803 30.545 li104.805 30.545 li104.809 30.545 li116.866 29.4141 li116.913 29.4102 li116.926 29.4083 li116.926 29.3946 li116.924 29.3477 li116.924 29.3418 li116.924 29.3047 li116.899 29.3301 li116.848 29.3829 li116.825 29.4083 li116.86 29.4083 li116.952 29.4083 117.042 29.3711 117.108 29.3067 cv117.168 29.2461 117.202 29.168 117.202 29.086 cvfalse sop1 /1 get_csdsepcs1 sepf117.202 29.086 mo117.202 29.0059 117.168 28.9258 117.108 28.8653 cv117.042 28.8008 116.952 28.7637 116.86 28.7637 cv116.825 28.7637 li116.85 28.7891 li116.899 28.8399 li116.924 28.8653 li116.924 28.8301 li116.924 28.8243 li116.926 28.7774 li116.926 28.7637 li116.913 28.7618 li116.866 28.7579 li104.803 27.625 li104.799 27.6241 li104.797 27.6241 li104.795 27.6241 li104.792 27.625 li104.731 27.629 104.682 27.5899 104.676 27.5333 cv104.672 27.503 104.682 27.4727 104.7 27.4512 cv104.713 27.4366 104.733 27.42 104.766 27.417 cv104.772 27.4161 li104.774 27.4161 li104.778 27.4151 li116.442 24.4229 li116.489 24.4112 li116.504 24.4073 li116.5 24.3926 li116.489 24.3458 li116.487 24.3399 li116.479 24.3057 li116.461 24.334 li116.42 24.3946 li116.401 24.4239 li116.434 24.418 li116.526 24.4043 116.608 24.3536 116.659 24.2793 cv116.708 24.209 116.727 24.126 116.711 24.045 cv116.678 23.875 116.497 23.7549 116.315 23.7833 cv116.278 23.7891 li116.309 23.8106 li116.366 23.8516 li116.395 23.8731 li116.389 23.836 li116.387 23.8301 li116.379 23.7862 li116.377 23.7735 li116.364 23.7735 li116.321 23.7764 li104.217 24.5381 li104.213 24.5381 li104.211 24.5381 li104.211 24.5391 li104.206 24.5391 li104.145 24.5547 104.086 24.5235 104.069 24.4688 cv104.061 24.4405 104.065 24.4083 104.079 24.3838 cv104.086 24.3692 104.104 24.3487 104.137 24.3409 cv104.141 24.3399 li104.143 24.3389 li104.147 24.3379 li115.057 19.5743 li115.104 19.5538 li115.118 19.5469 li115.112 19.5333 li115.092 19.4883 li115.088 19.4825 li115.075 19.4512 li115.061 19.4825 li115.032 19.5489 li115.016 19.5801 li115.049 19.5704 li115.137 19.5411 115.208 19.4795 115.245 19.3985 cv115.28 19.3213 115.284 19.2354 115.25 19.1573 cv115.186 18.9961 114.985 18.9073 114.813 18.9629 cv114.778 18.9747 li114.811 18.9913 li114.874 19.0215 li114.907 19.0381 li114.895 19.004 li114.891 18.9971 li114.877 18.9551 li114.872 18.9434 li114.86 18.9454 li114.817 18.9551 li103.036 21.5909 li103.032 21.5918 li103.03 21.5918 li103.03 21.5928 li103.024 21.5948 li102.963 21.6202 102.883 21.5997 102.858 21.5518 cv102.846 21.5293 102.846 21.502 102.854 21.4766 cv102.866 21.4493 102.885 21.4258 102.913 21.4151 cv102.917 21.4131 li102.918 21.4131 li102.92 21.4122 li102.922 21.4102 li112.754 15.0137 li112.799 14.9854 li112.811 14.9766 li112.803 14.9649 li112.774 14.9219 li112.77 14.917 li112.75 14.8887 li112.743 14.9219 li112.725 14.9942 li112.717 15.0264 li112.747 15.0118 li112.827 14.9688 112.883 14.9004 112.905 14.8145 cv112.928 14.7325 112.913 14.6436 112.868 14.5713 cv112.772 14.4239 112.559 14.3692 112.399 14.4502 cv112.366 14.4678 li112.403 14.4786 li112.467 14.4961 li112.504 14.5059 li112.485 14.4737 li112.481 14.4688 li112.459 14.4327 li112.454 14.4219 li112.442 14.4268 li112.403 14.4424 li101.301 18.875 li101.297 18.877 li101.295 18.877 li101.292 18.8799 li101.237 18.9141 101.17 18.9063 101.135 18.8614 cv101.116 18.836 101.108 18.8047 101.112 18.7754 cv101.116 18.7579 101.126 18.7344 101.149 18.7188 cv101.153 18.7168 li101.155 18.7159 li101.155 18.7149 li101.159 18.711 li109.604 10.8799 li109.643 10.8458 li109.655 10.834 li109.643 10.8243 li109.608 10.7872 li109.604 10.7823 li109.579 10.7579 li109.577 10.7911 li109.571 10.8663 li109.569 10.8995 li109.596 10.879 li109.665 10.8272 109.708 10.751 109.715 10.6661 cv109.723 10.5782 109.692 10.4922 109.631 10.4278 cv109.51 10.2969 109.288 10.2764 109.149 10.3819 cv109.118 10.4043 li109.157 10.4083 li109.223 10.4151 li109.262 10.419 li109.237 10.3907 li109.233 10.3848 li109.231 10.3848 109.204 10.3545 109.204 10.3545 cv109.196 10.3458 li109.184 10.3516 li109.149 10.3731 li99.0704 16.4688 li99.0665 16.4717 li99.0645 16.4727 li99.0626 16.4737 li99.0606 16.4766 li99.0157 16.5157 98.9415 16.5118 98.8926 16.4668 cv98.8731 16.4493 98.8614 16.4258 98.8614 16.4014 cv98.8614 16.377 98.8731 16.3536 98.8926 16.336 cv98.8965 16.3321 li98.8985 16.3311 li98.8985 16.3301 li98.9024 16.3262 li105.702 7.29883 li105.733 7.25782 li105.743 7.2461 li105.729 7.23633 li105.688 7.20704 li105.682 7.20313 li105.655 7.1836 li105.659 7.2168 li105.667 7.292 li105.67 7.32422 li105.692 7.30079 li105.75 7.23926 105.778 7.16016 105.77 7.07618 cv105.762 6.98731 105.715 6.9043 105.641 6.84961 cv105.499 6.74024 105.276 6.75586 105.159 6.88086 cv105.131 6.91016 li105.17 6.90626 li105.237 6.90235 li105.276 6.89844 li105.247 6.875 li105.241 6.8711 li105.208 6.84571 li105.198 6.8379 li105.188 6.84571 li105.159 6.87305 li96.4161 14.4415 li96.4122 14.4454 li96.4102 14.4454 li96.4102 14.4473 li96.4082 14.4512 li96.3692 14.5 96.295 14.5157 96.2442 14.4825 cv96.2149 14.4649 96.1954 14.4376 96.1895 14.4083 cv96.1876 14.3946 96.1876 14.3731 96.2032 14.3536 cv96.2071 14.3497 li96.2071 14.3477 li96.209 14.3458 li96.211 14.3418 li101.167 4.38086 li101.188 4.33594 li101.194 4.32227 li101.18 4.31543 li101.137 4.29297 li101.129 4.29004 li101.1 4.2754 li101.11 4.30762 li101.129 4.37891 li101.137 4.41211 li101.155 4.38282 li101.2 4.31446 101.211 4.23438 101.192 4.1543 cv101.167 4.06641 101.106 3.99122 101.02 3.94727 cv100.858 3.86329 100.641 3.91211 100.549 4.05567 cv100.53 4.0879 li100.567 4.07813 li100.633 4.06153 li100.668 4.05274 li100.635 4.03418 li100.629 4.03126 li100.592 4.01075 li100.583 4.00489 li100.575 4.01465 li100.547 4.04688 li99.2247 5.67774 li99.211 5.69532 li99.2325 5.70215 li99.3204 5.7334 li99.3418 5.74024 li99.3418 5.71876 li99.3418 5.71094 li99.3418 5.57032 li99.3418 5.52735 li99.3145 5.56055 li99.2247 5.66993 li93.2168 13.0606 li93.1895 13.0938 li93.2305 13.084 li93.2911 13.0704 li93.334 13.0616 li93.295 13.043 li91.2794 12.0606 87.8575 11.459 86.295 11.459 cv86.2657 11.459 86.2168 11.4571 86.1544 11.4551 cv82.9502 11.377 80.5645 12.0079 79.2588 13.2833 cv78.5035 14.0196 78.1207 14.9708 78.1207 16.1094 cv78.1207 17.6758 79.0044 18.959 80.9004 20.1475 cv82.5967 21.21 84.9512 22.0997 87.4454 23.0411 cv90.6973 24.2696 94.3848 25.6622 97.4063 27.7442 cv100.872 30.1329 102.913 33.0547 103.647 36.6758 cv103.655 36.709 li103.655 36.7168 li103.665 36.7188 li103.696 36.7266 li114.809 39.2149 li114.852 39.2247 li114.866 39.2266 li114.87 39.2149 li114.885 39.1758 li114.887 39.17 li114.901 39.1348 li114.866 39.1504 li114.805 39.1797 li114.77 39.1954 li114.807 39.2071 li114.979 39.2637 115.178 39.1758 115.245 39.0137 cv115.276 38.9356 115.274 38.8497 115.237 38.7715 cv115.2 38.6915 115.129 38.629 115.043 38.6016 cv115.01 38.5918 li115.024 38.6211 li115.055 38.6895 li115.069 38.7188 li115.083 38.6895 li115.084 38.6836 li115.104 38.6368 li115.11 38.6231 li115.096 38.6172 li115.051 38.5977 li104.163 33.8418 li104.159 33.8399 li104.157 33.8379 li104.155 33.8379 li104.151 33.8379 li104.126 33.8321 104.106 33.8145 104.092 33.7911 cv104.075 33.7618 104.071 33.7286 104.079 33.7012 cv104.096 33.6465 104.159 33.6153 104.223 33.6309 cv104.227 33.6309 li104.229 33.6329 li104.233 33.6329 li116.317 34.3946 li116.362 34.3985 li116.376 34.3985 li116.377 34.3848 li116.385 34.3418 li116.385 34.336 li116.391 34.2989 li116.362 34.3204 li116.305 34.3614 li116.276 34.3829 li116.311 34.3887 li116.493 34.418 116.674 34.2969 116.708 34.127 cv116.723 34.0469 116.706 33.9629 116.657 33.8926 cv116.604 33.8184 116.522 33.7676 116.432 33.754 cv116.397 33.7481 li116.417 33.7774 li116.458 33.8379 li116.477 33.8653 li116.485 33.8321 li116.487 33.8262 li116.497 33.7793 li116.499 33.7637 li116.485 33.7598 li116.438 33.7481 li104.788 30.7579 li104.784 30.7559 li104.782 30.7559 li104.78 30.7559 li104.776 30.7559 li104.745 30.754 104.717 30.7383 104.696 30.7149 cv104.678 30.6934 104.67 30.67 104.674 30.6446 cv104.678 30.5938 104.731 30.5391 104.799 30.545 cv104.803 30.545 li104.805 30.545 li104.809 30.545 li116.866 29.4141 li116.913 29.4102 li116.926 29.4083 li116.926 29.3946 li116.924 29.3477 li116.924 29.3418 li116.924 29.3047 li116.899 29.3301 li116.848 29.3829 li116.825 29.4083 li116.86 29.4083 li116.952 29.4083 117.042 29.3711 117.108 29.3067 cv117.168 29.2461 117.202 29.168 117.202 29.086 cvcptrue sop1 /1 get_csdsepcs1 seps153.799 0 mo155.073 0 156.11 1.03614 156.11 2.31055 cv156.11 3.58399 155.073 4.62012 153.799 4.62012 cv152.526 4.62012 151.489 3.58399 151.489 2.31055 cv151.489 1.03614 152.526 0 153.799 0 cvcp153.805 4.27442 mo154.868 4.27442 155.668 3.417 155.668 2.31055 cv155.668 1.20313 154.868 0.345704 153.805 0.345704 cv152.731 0.345704 151.93 1.20313 151.93 2.31055 cv151.93 3.417 152.731 4.27442 153.805 4.27442 cvcp152.917 0.953126 mo153.954 0.953126 li154.573 0.953126 154.881 1.20313 154.881 1.71485 cv154.881 2.1504 154.606 2.4629 154.184 2.4629 cv154.952 3.66016 li154.485 3.66016 li153.729 2.4629 li153.358 2.4629 li153.358 3.66016 li152.917 3.66016 li152.917 0.953126 licp153.358 2.11719 mo153.883 2.11719 li154.221 2.11719 154.44 2.04688 154.44 1.69532 cv154.44 1.38868 154.165 1.29883 153.883 1.29883 cv153.358 1.29883 li153.358 2.11719 lifalse sop1 /0 get_csdsepcs1 sepf%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 10.0%%For: (Barb Backes) (Arizona State University)%%Title: (lwm1_mg.eps)%%CreationDate: 6/25/03 10:11 AM%AI9_DataStream%Gb"07gN$iHE@pqhq%*;La-rGqkT0EMIHHJ+14bZL"N`P[3Kd&_CI=kiAdqUk1)-`[lKcLBEfWk*!_#[6o-.-m&pn3F_f+Mm&c8W4%G)r7[]RBP5VqpB?^>6N&8cI%?q9R[;='tpD]AMFo3_9o:C97Y2066Vl/"]ITFmI4>a@hb&=-%Qthqrp.rpK%@mf(\5rStfUe#.,n%^V9Y<^t\6@h`j4crcu,&\@qdgPkt:'+$Vs%]72=g5(7sDN8JM;8cbRPT=:/*++Ls'iSje!qZm/=jY,*6?23e2H2iqfjR7Ts_r!]7%^3q@Tak+`#f.;J)q;ls;LQmrJ=a2[S0-;6!IsQRTI=?RLg0RPKnb2eSroo'3H+D)0:OeVCHMP"`nEm,<hI:#lK\B%[_L=JWHal:&%5/"^ZhTFaX$ek;=I$1pf]B.q#b7Esap\3"[;N-Re1(EGR3q<!ZNW.Pe?2j!\^\uFMf#aHLJ&0-HbV)u$rNH7s=&V:3E4]BM.)/gY%ojT)ff#cMej&^N"84dg[OCW>^/]Wu%"ukh<alQ_U<<%CF0>G.!koH\^h;a9?7:MZH*KKUW5MdkB,G82R`l)3>s4cr(LM%X*m78OQ%56#*82Z<=oJ5=CR[1E1Bs&nHk"7=tbL]9iLe*e%EgTZ[=k.C)b:kdMcH.g1_hg3IkSmT\@)ND\2s8N#ra+rF4Ha96>Z#>:`PTbIs%gG^9K\akN'lM#o9msfe1s(?<.h7F3DO.ZEM6hfEK4/K@.Vs!O+rOWV@G(*XrYNYF=5MSL%iPW9?V5_XFY+"b0O)OJ/^>8XWp[E/!%'1['7a0esF++A_:o[Eap3;VSi`r"M-?0nWLI"$Qdqq$1VVUGm$qsj['miVQO[e>\bQA`,PX8E;@.BR/cAFu#rO3a=9?_sVGoGV#9%'?-W+<dKmbpeI4;[nlIAHM?CQ5$fM1nABIZ+7GhNGCTAbm@1=N-#T3PQNYUJs0Zr7ZH7<BD36/)A\Gj.HM;T%?LcdM^Qct.o`*YE%f8e"@M;\/:*A9YTrf<]/s7kRHSIDUkF^$A-`D4MR_q"/GXe8=QP5jM?0AG;iTC5!]^09SF"T6O_^Xj48p\T]"JBnerD$]np"TA%5%5]4i31K*=nVjrl!B;E]GE+igc/(1LLd]E"lh!9hsl\\[:$bqg=^IP=&*]`tAI'_]Tc/F1k%u6[;qf'@FLP+a:(2J9)4^+V0Mk'23%&2mnS2c?>Fpl/8:;sUE3LE>D5d\',*NIJ@!d(JQUIcC_t_Jb[7j.mur8,/'mitEj;KK=64[=4o<^[N1V%L6BYIaE*U@i[uY-2c>a%g2h,E[U%Xb[A2i#N`leg5q;L;^JU0>T_;R(di$%N;PASWL36HP0D^I]GXCk@rpa2s%KsP/$N7k\SOK@f*ET?b2)Z@<b8^De3Rd]d%W$@Rf>8nCG\[EP2f61lA>&p)c:!nEO#/+f:M;BDbp0,4"s6pu,PePO0*>?\UhaiCVD8'bLh0;F[:2<\kDD^-^V,818Y*>Zfd.j?[%WK+U!:.JUUeT!t"gPiMRC"ncMeZP`aIf3T&[,oGu9$KE[3]:0YJNlcAKA/90k,ZM(K<s8k%GFnKDKJ,,&%MoS2,57"gdZS5"'X2D%'"Q%r['mF:[X,>dc0=$#++1(fFS=b.IPX1\-UrM*TDGni.O@O'VuDpTcf7rRC=VKN>M[hY/hcmenYnabSN`*1rRlR@Ff!1Se=Z&B%I3,$WZh,?)kEn@/ep5g/p8">/59KVS*Nkp!Oh6k(bIhHd[:$'hfA1b@%r7DJp3A6Ji'g*Rhd;9U==#95s01o:`V&2/l/ZoP=8>$9%J!?!Emt;+DjkV(uL=UF$6Wm5-b3QSk>H*d8a)VR98?TXS(<V_3/I-"a!H#KNOqr.ieuj9eq'Zo%:r_A";C)!.CGbEB>^C,OU,^:D%MtWm1+G4\\@s^(:1:?/b7nF`/&(ZaBJ[Ae8+?;-]U>7Q4kMq--,C^X7NeuoDddiZQ($<4mSV^3jcP<hc1+q0d*^T't1bJ^TQ=,GR%DabVO[>ilT7P0g&G<8E#QF$iF^T7\;>cjQYSLf8tP:^])'s?Y7XkGE'B#h@2I?ECKrM#o^VF17T$fj5F>-Cf@hX)-1:gWBPd!7mW%n\*-`a/&C"H$<pIlZr;UZpEi6Ek@u7Q<-P!M6G-Q!(C,*^ahlKqG:=iT^:DLra-2i9;@hhk.]Cb?gB02rSUn?:W@3-C*=&"hUC=k%l"t*Z3GRgOITeCK8h3Q0"fERQ8tBVcj\PRccgGm-)muo2?F^.1$%M4Ga&X;9gaS[kA9IoBqJ3_DJl!LUfq=Xprd&q*b1&/9JRfJ<%^;u88NCuO-?_1o+?G35RhaUbRf=a96I?Rluih2eDaoZK2A_LCfFn<*>SW0PrYoJn;>CW2Y"/BB)0rc>f0=(m)?>+@bF3J!ZD5$ul%/%e9lQuCPj>h_*N)OoNhZIjKK(*o-nfos"6QfaX_UHbr;Q`59%Q$7k!d8'RFNQKo;%?_TNk?56ef'bN#107c(]Yq!kn>jr?4ES;C%Rm]S;l&9Q6!mLS#>**<>Y*@U&1^Uj)VT@B\b](d31*(?mDre#-3WEPQ(>*2h/"P7hZ\8urW@O%mK/uS<i*'^Wd6'G>.Vj9+[k/6u%@aq^6:>::=Hp,^Vl-4pZrrcP"#+&Du5AQY]bj:ZY,_U0gbHb\ZNU'@&CmImNb8/\h]'50*Gr'lk3RE&eo8>BSj_M=%?ufUqBMNri%1eP]FbrnP@'>KM]2k/p=LM-R/jCuc-l++IHA#QO"Qm<<VEo".L'5>VbRcPjkqc&0%DDbZ0WN%6bcS+Y7emI-AeKbLb8$&+thV7T#%7&aJ$g%r##I+LSqF,Mb346Nho9=^Yai[^X_kGH)-F_0')?^!2"NkRip7k;!^?i$C<7^j-ejrEFZZF,O8BPfZN/Q5h<K"X-RVfn*O%79Oolm5_L3PY4!1;m.V>09%l\9%dgYbe6*$/bX\&qB1K\<&?F,nnZ:W&(\WKQ-=]^?9*tWai5-0%<B^,KMon2;^bo%&=755@f<jC%Q,94tZ`:e'hOMfXo%1U`*TQ7a7n_%B]"'S!Be>p*lM*[YRXTjb.5nH>("?^B'i^V1C8IN:)D.R=fRhY`>5)cqE.n%4;#Si0/<u?!%UWlM;C!6<G3us=medQp*cugMrdC0_C2uV5#HYG(T]%60tKjZ4*c+%L+Cr=!Q:t>K`4,_f4;bja.[E$@2ZBDklFa2Np4'd?)eIX+b%\Q#!#.nP1W$d0FL/SuNln_CW,gR>*5D6CW*Dr\e/&h@('O05%9:T_Whl%h4bZ*pd7%:5or[[LgM]9g6%^L,'-\^Ful^JsM2]i]Jj%6#[geEp52,k<"6,?a!i5-DQ'@TBGG48oKs>/nQ?V:QaD3!8`G\Hs^]MA#2BFR6<"+L6R.j\XN79(A1,#f4t<p0?DF&eOH]9?c-6$%*]MqB$L&0%8"Y"]Ma?3dR;pr$VMO82I1I/FjHL9gPVhi$rs?[GV2KH*SBF@#Ut3]'B?EMId-G!OArJl9W5"(&7K,"&e0`V3e%*;2%EDDe6knht[09ELmS'9C0h-V(S>$i]"=h`.)SC:lAL99;00.>"W)C8arGHoE%Y,H4*%r.f#1Cp5q*&H\<8i[o5`@YY;Ws]qZ['WcP%Qne.?p_u$Cg4T38[C'/l?a_gidioW)rDpJ)[Bt;(ejc._qh\&lqPLs]#>4'0Xm.XE^<uG;al_X#>ie='8*ea:*UQ6$H0XF_3hn$e%k=N3pN9=I#Y]EXLk1hm*aHg;c0pafGo@3#If@hDnO7qj"V=mpG9%l2hhI`"Kk!;$!=;oLg3jo>H^NAsLk/0=$XUg'L:0N(eCE#-(%D3h][.se4cdO8\r&,hRTg8+meVe%*Y[aU8%R2U2gpJ5Po9e)kpg=gtY-*'G?O]#>[AX!Au18R@uJ"*9&/sp7DO1FtC\5Kn`#*7mQ%4PEDX,r=+>jIG'.e),!;HJ(8RHe'XZbu@q.3r@+GB=8"V8[4UScL)o:c^1ai<ApN3kl9-_P?trCS?jP"<P!?&LUq]*e4'%i;N$g,%RM8/<en8G9e"C99Y(9S&>ZPRDf/d-jF<pRbo.>4prA(A)\4Z.FGncE5VFI8e;.pmn[F\6ac;rC3q`*b"1d?LghslZiW#c.][pHhb%?\_"8m@Dg+UW^XjNG_H<*kHI'*.K2WCR8eo+ZZp$2AUXD+4.oTfk;Guh.>m5(o]FUS^X=uk?dbr49qk/7Et-GcAZ&4m"RD;\cjZU%3IPOKD50Vce`\5Vj*)P\-)j9RUT3DaC?aNq4H8c3?TmD3?.[&:Rb%KTkDm/fQaAr29VSt0]%]3PdGrr'@r*a;^\oISl_Tr1NM\XX%e<%[eZl<kZFX0tJR17Y[6LDG:IeK<.)4Wp:PN;bH^M/ZIkO6)KFNWF=`fq7eRLp"ACN]htfpu<F@YHlAHWXX^>_@Kd;$!#jVt%Nu%Y2oJj:$m;&B#sREP-t+kHTNXPpJL<>CL<Oa[o6J"o@"?,FXuVFV:L^aJ\TH9k,A"G[E5/*p2F$EdS5pF\i+5$<Pm_Al+)/[BNk_J%P,k^LflPjWI2p>1VG/33)qQr_9'HSfTXHXm-I[F.e15[+g8CB+2/IV?S"](HjOWl_D:4l=qCMC97.9Kq<be"?[J/JEKg$S*.CPPt%Fe2I<8uDQK>YV*9,<O"XV,EFJFm'=A\<N`>50GOkC-9YD4fOc/"M>"93%ReXcHShc4k9Lf(@`_i]9P'$Cp#RRMjr8,T=Cue(Zi-G%"\lG4d2@7&j[c/mH0'T8NcbCSO01d;`RueWY;-1X./B)/>Kbto<9nPn_AK\[eP3d.ThC,YM^<,\Fm;9eadu]le=g/,@pQ-YJ\1d,%W'ba&<pEMH$bOl-T;APYUb;,j3"=V.GGpMI#(7Ns#7bN<;[kCeg)]L^mG1,rT9!rtFb`G>Kmb_n7^^okb^ML4+]#MZ6Q8]L)lK:*%=*7V].mI;QRFcg-@s9cLY0di[G#1*!g]L'AY<18=D70lJWQCd`raHqH[d0S@$Y(c0CeJ^MX1#WeSM.D.o,?k8or%A)N9n2H<1/X7%Rf".PJc!jG[>b:CPKi^7opAl;-f[hQYCk-VU#E>[CFu/J[V=Z&o+*=oLLHl"pV^K4]mfJ1ZpO)Znp*>l3ZO-XmaRX&d.jtHT?b*8%9DcBM<]Hr-1i[`Jna,*G/Ur!T`l_t>$G+H-KiZ#9.Y[iLGS9$?<'<Vs.q;eel'Q5Ak"2d7@S:4>m-(Fjnf_M49LUJdbTBDaf12L_%CU=&S;f0>$_`HJ%`c@D@MN8D(lGL8hDYWp/O4MLgG,7-2hk*nQl#Xt>DX,U%;ipg&3S?EoLSa1"=*o&AlY_X74g$3RIs(_K/HTPW%YPmL."@.HOTsW]?4[)"-Uu1j[q9A[.c_!F:n1^Japs#S0IeNl*]pmo,gr/UJ_t8(5B(53]CS"terf?G2rpeh9r@^&VceE$s\%B,=%J(aal)en4fgUfOP*nE\A'Uau'Lkfs=#Bs:Q&(fFb=4d?8h=]n&H<m_tFhUW&nN'qPCNmHs*NlQKY-.J"];s,Uor;o4b#Q/J=7IbF%H-o"&rij/o?g[T70p;7r?8i#9546=[i<R!4mWs)bg[B<t9;1aa/%`Ge]=851^N7"uF*Y:.^:Y(&gKe-C0WCE#11-p%GSr-IbWXud%euNph)8E=s/L#(q:g7'#l;f(0H<m`>^@&!46EQ_\C9FPU)QL!DMHhR]jf7[jY$@:#e5Bi";i)e7?`;KFFhZ#q]ZX^#R`,cX.E<F6%cRpl?F@b$J.db\;?)BL0<)QI?`>"J2/dY1klZa0=E>L:g)J^lY`tW"ld75">E!Y(S.dY&*>_Y,c9dh0?'Oh?a#8\/*nCRZ^n,:Oi%4lWLq55XE9&)MZr(O'iM:.uA2_j\GB='Tpj72MJ<c7PMS-?>6Z=E]T2fM^\2=eoJaPeA2/nc.;ogTQ(Y4UFh*E'5A!S]LPpYC;k#%h5?7]VuCO_QLAuu8rl<]N>c.Nd,3Zo'lqe;2aX-,O+TP2+]-*P8gAsF2G'[%1k(]bm%cF=d]%jdBVh&e7d4oYSlZe\9,WT"N6&Cg%pdIZnb=G&>Z0]Y'L2W>cgrXMAafli',"(^.W1scHQD(K;#F@1^H^U)`E/9FrOdEV911sbPY0%_jb$=@G:9W\dP89Qs09[Dfd^)Vr%'dC.%@b;&c>c0qqKM&mR9,+DJ69T;0>RE@UKrV:)GaqT6&;j+IH"A3G\-a\QKI!aS1_4^@1A*u:;91X'q,X3L9;1O^d.MNEXGbH9%(OD-/pEJV-<tCd5077cQ*]BA;o'jLM;&CYg"'&d*94=d40\5pY@CHN?H/Z7]S<np3X)R'pE9(=bo6SH:8)`#A>ar5X.r6c*6WeXf%XF7bu5q&i&L#o)6IMNMl72B-c9\:Rlo]gD/Log(i1SVsN/2F#Y/@cI_Z5;27I=9`fA0OJ#aCpM$OWb<&[#.,3W^Sn(@427N=TrLC%H$)QD"f\o)jFZ`%.DI"A$DeU#=J@@!1^fO]OD4IpL,a!G(?8H!phrq_\"fmSYZiRG+S#lY*X#iEn:UKD'S-gIp]pdZCtPt-9#N5P%7EEFgAL!uqrlLDHp_8TW#g,PD$#ph21*JLE&+"VpTT<d;Sn0X>HH1N%PborW.V*;!/`=QsOn(A+`^7g/"tth7h/L04.<;U?G4ud=%HV*b>;?T>m(CFW-i^@bpJK-)&+dVX/_W1^e$ipeLI75k"6+s%t^:_sdRnBA[.(CG3'?)m5Gb>V'(rnk^VSe-%Gtj]U7Cg.aB!EnW%)\?-u6E!O-*9#>0;Q!FYll2'`j&jSX_bSSYN$S;<LC^l_7=>'`&,D&EHNF%_V>K.Bp]"m&CBn,Ea*.4Hq0r3&_/CEK=C6`,>0t@`%^K'cQX'elBY>+Q_,hj<R50KJZbmP3`qG_OA?^U.n[PoS_rQ9ec:O/T&P<%Om8Ul0B?^l:8rTVOE3;'ILrp/$_63)H5GFMZ*i&)^'%SIC/_%a3u<69$?HY2X4u&':'I.eL\:q3<B9<>DMb<*cH>:mKute/G>G<-,#+=E1G"e;#Lb<?\A1</mh#;,s@57+B=J-<<!]l4hbu%W`N0+W,>K"de&H4)!Vs#ed#B+=1"uN)k&B0#nGZYoo3]+l5\86WcqG6W:!OMU\[J<&9Z@>e;u.(<CKkVnun-DTT<%s;(%c4;SAlp%8Tg53VnA^TC+;i@Pc?04<2urt=fJu1Kr$7,Vpu9S[8_)32H3t^]Ms<Y!`KhG8o1rUQAYnoMf\-+=.D,$$XZfB[0,.'.e!lHP-Pa/%p5ck3o**/@%oB=u7B]<#b45AlVfs6OLK:eFD7taF?+3Z>b.?fo-!t1sjl^5ko%u\1Q&ksSr;$@"pucMLrd+Gps13%('*"leai@B3%qsfL%[PrG;?3+M^5(<FFP(.*h*8-Q`a]";is30P[CZ!jdHS$pI&.85^,kSf.b`WPt8JK;Nb^uU3%6I.MgdO3)\R?jWF1S;?km3e)%Ep:6LL7NL!4XlH-8YR'J8#B^m?)]2=6f94e$0O\)Ya4nlRqnie3;o'Gs%?o#T?a\+2n3/Pq6(>'T/PU)lGMYS5O`+YmH3_aYraH7%obZA$INrWqmJkshoDQ;q+!9oTP%FOF9tM2#:E'jO]3aJuRj1+AR1%(<i9Yr>]D:U$>A;mdIr2XO8@A$1#"jqGoDW>D^Unp(QgnQ1%^ADpAg@ZG!d\k>-qV>H'nYaX`qu7*So5"@)BE%lFITs+M2IHLLJ*Y"H&+-t`*)ZnH5^$\HY:iMr$pGP:c`&5[#*eaXq7@_-rm[o/%h$>d=\Cga*=a.J6LMs5'C8O+a\+;":HDMufP&albS%mS64=pXEBrr7iO^Da\\O\*m8M@KL2/4tIUm!^Idl-G)O!Hd)Vgc]?N::gb%-%_me/MHb\\482pkbL/\H"WGR1G<mI2+1Yig_T^.d[5r7espj=*c9DHP=dlNP<3]HE_mk9`[8;^@]WpCG(+GT?d@(:n>*hB=a*Y'%Hf!A\N\77.>`S],g<2qe;d2;Xc&GRU(sPW*[Ds\(C/X6(WD.8JdpT\r<N!j\4N.*b?`*AmfBpVb*.r1c)<8<t!os,Uc95ZUP#XJO%h,$ndailNo^G@=sc:!OHl@h:tM+h@TcUnRX6:Df8cA,;Z46bf6XS>6'YWWoS@oej9S?f.ZkLC6#Sd+kT=eu?n!p#^^[,!*Wmp6PL%SElA"qk,">s.m$kJf*HOQW'%-c8p6h@=Lr%\hagA/Y$gR5@MCRVs0-UNZ(Yr30ak&`beM^q*i]h?B>WfA7(k85J8>fRW&Nc8;Cob%h/OftHoMjg?Q.?YUM#Q66(GC_<;iU/p!6%-B>#F!*-^FF=\XJj]kCW?[IfEW>(NR\4l`T:!RKJFb$4;$[q8k)5;V6c`GQ*PG16tN%hN&i3Nqs>om)T`UZ]J!Q4OI!g4dhf9;G5><mW]X?6dN=2eF4=B4Q/DH_Kk=aa+&'D:F.'oE@16')LI%P?KfG/k[R-.A=j<i4/^&=%.<="f_2G3l`^rPHMt6]'`HD_d4>o.\<_e$e4Q'SVHr9J6ATN_dAb+QGNlROre%,A8-'$%A%$Q(rmJ>PB/Kt-M$g/I37F%sqZ_]/c%r)Zq_onVuW5',cHnaje.Ie^Cmc.BUmF)-5Vhnj+#a6i<Zo;=fjJ,f9l(@Z;FqasMtQVYqKl7^^3BjWNC'_G`^qtiI`n"l2.^ZqZ1%OQ26Vlu*sehYm(gqsfa9mTupUL$s@oYN>^lKnkH<Vu'<q+8b5f#NN#VIscWgpZ_VnK*`EFs"0+iM0c]3nFfd67NY-iDVk?I^b6KN%V#:#[I[XH7f,oIUIsClNFg<7$+5Uo8nb25-CW3#js7Ylu>FE:q5LU(hVW%(D8)2q4rVhke=BqAoquYmq+1?Ma26QA&DqagV><]a4%K7i@\l*#K[.>>/-k*PZ3f2BKZp?DCna4mN$gH/`[lF'L_Dh#%jTDt%<5<[i[J+sPOrD?UpRM9*(qKc%()Xo[a:(?ufBh&9\X3(!\%5CNS0FSk%G8"niOGCPnChS%`oHM?l/cEdC\-X<>O5N7Puq==LI#Pun+8J!cKc0t(=/^\K$5C`V//;s0s_TD9G?15BG2m6EVdSZTC%h[B1,3QL@u[u$21=dMbHe(]rP/l#T"/%g!+]taO<-gO$8D>AGReu%PYTjc^!cd.Zc?#=-">oPl7D#[5u:mH$G@_+K_hqpT?AGg]L%E;SV^Hk_XI4FVa.Gk^0GqgAF1kPnZ,:X;gtJ%G[0-i(a"G7X.+b%/DHq\Ps5T5_X9Q](n=FT:V)8Hd)ochC3W_1/(`*qjM)T:Trn%:DonqmiVPfp/tMfk4.m5!UeuDr8."YS6!YtroobNF3==Ehr"G.E0"2W=#)^YO&']_hjuc?qos%#T9$^01VJ6^*<"R)qnOA#r'\Y;%7A"06*pI0[K36sYkZm!1gV(_RRo3;DSa-q*L^W.1+#dO_0qs8;53U'MT+('WnI9k"++?Nm,T-gZ(ThO=Lrjc7+*P4K@f?(5qd08H%_nU(I?iT7)gV;M,PDf)X"HdBd2oj6-=frPnkL>CRcc;jgg6;$pQR[>\CT@\iSpZsWraf8/^C4RLL=d0lj)H8M/p]bWpIQ5W?K@W'%)>8<<W.^q'm'.jW1@h%rJ+pM@LKppfG[\=Dao!M(*O/)1CFjj=:sPP00?WS.^jmt%WWl@p:>Vde&T^:QFKq(q[WdlfMg[+*!m>RP%^*H)7O=s8GdEMs*#GiH^f<?NTFXU[VP/7jEr8B8+ApoiTVFY5lc84@:Xb,AFcn:qr&^4U8<$TRY;<[mOP*&=)>F!Y="9TR4[37tt%K4(N&/Lu^L*t!q)9.X_C-oP],$gtG-P*7)mqFkF*Ea\_%@]@YX,<7EK%J2Y(eU"JOC":Mg<<,9(`Xhkl$letX6c(hG;p9Sq2"+>M%QP#LX`mr,0r@UjC1V&[Nh^/(u#8hNB8PC\J>c]gKADgc47:HT^e_%<3Ce:)<771gML?(epeL8qE;s%?80rhaKqaRi@=!@X&\SR<=%T03eT(X6"sRkhh>;T:Q!mtLSSKhF_cOKn5r8e+u27m=c;&gOZ7((3qPkJh"Y<kc]DU)#ZCW!M';-DV^r7t"c^<X&#eL,"H3h7Itq%X#&==0[!/bQs[h"(RXi<3N=2/#6l3ElrH%idaTJAik*INKGF)V>#C#C@A&4B_MS?r#=b'%-;n;n"1d/+@2'83kAoWlo5>h#Y3%I%%5F.H]P%>r0;Ag<TRZq!HP`sOKLnkS;;Jt]cr"7%,6@T/D,VmD1k;hDP;qr=dj1VVRg6##&.Y7q<7,'.]!!2OqBKLP5GCNG7.Xa\4%AY%rldW6#b):rBdS?Oo4K"9U6elVZ&i_)WSMQDAfM<n>t@*;A/'*ci\<0TH7"K"(r4Bic%M4Ch/OhFPo@*G\(l6/lJ%1r*``MjRS%Z*pD*%;UC'R5*rO/m<po5"90'CQ@BQL%-8V"-$NO3qYl&-;&dJU9%8j6AZbZq/m.eQkS.eMN8TI.jj,+a!),.:B=qM6\=1"b)k1s%?oM"?-?=o.(c@R[0hsq'#4S%DA:t6'@2GjdB1Ok9YA%AmN)EH%Z?e]i'bW,cD$QVe<aio.7SIlQ2NH6'HS9D_earkd?H1VtU[*ZJ%EUj@T:25r'f8PN5?';-<C!XS*n=5\>FMd+a6sXf27d=2EaTIZQ?BVL-SPuYb>Gu*'7Dq+eOSl.oU5hg?-sg!e7<`\F=nh?Q;"GkA%etf[?lY?AN.E6qPEC/2u&4:p_SPgs#^^t3HaXGH:d+MT2!DQ/o,#iF^cu<]WG@=)g-I5<3$Un@DKKto:Er(<>,V&-r&,X.tWP,4#%\iU[N6LSO&XZgg+%@I>r6PAMf04PS8=jeQ?KN+L,(.&[F1ah[HZ+P[Ur,JIr/Jh&dg9Xf8T=a/u8>?hVG:B[95n8?L(l)K,WUpIc%7+T/BaBC7dJqZd*XV^QeNYMKr29'jWRnM&1@SL2hZ!c-bVt-D&DDFWQ`B]0lka7;sEE87s8]C:a\=t)]ZVIBbqNs<0C,*XM\KHIG%)T!@apPphJ3LZNgBX/a,V-,H2=NL$bKUB"kBk0b'#olU1';?GO8#jZSemWa:hk3ZO(fItlO)V^B0n&=UBZbBJAY!IEL2?K&'Q[!P%5rKfuCasm-#KJi[@=\r^lL[Va*ASiW5bQUC.2516#p@fT8jVE;E;ZY>W1m*E,b<`t&YZEE2;a<C"Gumb<Qu`CI4L5=jL+7cAT4O0%'e?i,9h1/:Ab:@+A^NkB[O'7P2h3e](\-U")`/^H&kf8KZo6&4<N.-H,],7;I\d*C!2V0-7'&gp2H'/cnr0(N6F/dCcn/RH$u:8E%R9(q"4)uP\OAJ4&5#_2cFPIIK>0aA^.&MST1)@_)IKO`WBiE4?U'gRMU59Vm7OQt<;s[pY//*!3nJLORV[9Y8Y#?M2=lsC#R&(t3%b&UCK'N'``Waq#E8ZEBOe^8h@,U>6C,#(?V"1o"Kock6?OHKK%MOD/0,W[,B8#QQ92HhXe@q'rn=HGu'O.ft,Uq[0mk9MGK7Fl1R%Yul,PYFq&UQ7r:K5Vg4',gq9ZH'/V-?+gl703esBDQG!qeMS$F!10N!qb,8/4?`=]".7,_2,@qV(jJIi%.JP`1QGn&MBrd8Z;,8I%!L,=i=J*/C'rfa6'51D?KQPKG,C%;^TQ\F,9J:fde`;>j0P7-8ZD+b'*2EsS2&>3hk*a5LJ7P[kT^.]`M6;:N<5?l`84oDJ"bVJg%Y],e(&Bdj)(YN+lPLG5Qdm')Z<j)<R9k&HWoOrlmRj54_!^npLWnd]0$eunYD?g[RJLOf_+h1pdB6J"*LlEZ841S;l$,-qD1)2)h%l'#&W>73P9ED[gCF>3tMGHE%i6)ugR)o,mdQ#')<ls-jt8cHM'^ff\?Z1#Ku=\T9VD?*+BSr/)g'<s5ZL2a&3d8mKGQf5E+Df"qG%\cGd)3nMGro'*)hjGsF<(9qo+'-P_-RRP7mK5LlMm$7[?#Sm`1A"=B=1/5Koah])g:QS0A:gi[nY<aN(6Z#"8.m/VAoYt3:aTL`B%98>u,!Z5N466P^eeCss:^#h%]!]V:BW(Ol;RHlmEoRNYg=TrR9B#L_qPs;R9)!Y!daOULrA=Z_!96\J,9?nU!%`F=KZWB"lFgCcC%a?W7?-&ug#Qu(a7+:*?e-ih+\!5rp,9T9g@I^6*/\:,!^Qf8h/DhI8TRs,N[p7@mRlQBa5&6$l\r<:S2=^Ua0H8E&kfC6+dq)9^;%L5_)L%<bBl%5Q(X9WcM!4b9*31i"$E5(IO"%EQaH!6s1go*^TAOCmfoe30n:`S?-1q'Bm#CH/W7U`I_2;Zf^JTgV+J?k^m\YRWPa%>h.XnqRI#Og<?c-Z4W;b`UU:d+<*_mC/*.q7`;h&-7]K[aS"oOfd:K@dp[faapZKGrW\ok7lSTKSXW<WpD\F1Z_+?TW1YHI,9s:X%NY?M4e?N;6I?8h-BFEB@a+Cbp$i1@%cm[0RE"a`jk1Umbg+:1+NWj9TL7fQKNGTF]AXs!AL7r]?BP5D`%6iM-=O>?Tbp8gr8#qcB%L)m&5f7>Pf4#D(J,lMa/BX;WSWBkKqYHsnH$SB+bd),+?Ns4p$\o?p0AgF6Vd%[["$X1W0Hn8s;)^SG08rJ=k"g%dioc&LkS3&og%'Qd!C6,bcGA:dj4if40o%SXE9d"9:8/8,:9F[8)[ZhOBV=pHc`B3)-5HiEu@qBdHrW\>^YdBf;@n,fe0BFQ<W)g!l%@TtL-",r0p%e@:Hn<,Mb/XB@95[hZWF2%Mr5.+VQoDEp,o<7JO(%+-O.&>C*+<JZr2(u^nL^`E7m]pg.Qd.S#S2UI3GEs5ZtGj0B&AJXV![G)^b%E^2iZ]N8"cq0EW.h@iH%U-U*[;@L3n<QkGZlUZc/6";ugL2d'Vg"'jjVSLqLHbo,>F,"1@L5`KDcX&kI)-?#:_OrdHkR9cg5ufqb%Bk+!c`RnnhF5!:4RZ0@Hc:E9P-tDFX6(Ke*_(E6n!Z$C^\m[P9A5t7qXF54\J#:F<Lc>WF#N?Hi5]deq<2fD[8u,iuT]2b/jQ_;(%!gKDa-?>Ype!h4J3alq^m&m/]BU2d!l$*[`]EuKqKD#Lr<XFf_(GX+6qi.m8&#4MC[d<,lFMumi)B4F+]#i[_0kh+VX"tLmnCnb\%"BR1udi'X?fNLYs"kD-d`gntraW<\_eMeQaN!DQjD8Z-.<J5E`B2B:9<hY__cFp82gV15DI=YkV7#i<E1d!>T0s]<:[VWmZko*YC%X@08Fg4p?2kcq"[ko/3A)R50IcL)E`9Gb2"r#c4]NpusB/a19CY)^W>Ye`7S-42-LpfOf-m>:&PIr>@LaC1I0Zqq<0*;1"W*&d8\%@0XeA3#BmC_ZMDO3:(Lg8hi&0eA$^&'Xf"PWl?<7)Abcj,bM<@;$+>j,V+]A$9%:4#n85+VFM(>P#BMF,9#"!ME2[\eNmIHLu1sh%XEkPhZjWD2>h'@d3]/gU0['[\)SC7-+^@"MZ?o#>8qgd4l.c]G9`t=Y+hC`0B!q#.&+Mg*L[3]1BmqdX_[pT4Wbbdg)5UTc,C0]+%&fLh`XFL[[gUqMaKXt*XY'm4(f88QpUU0dJ*S\$^kgP/qBWs=Q!!Y>.)\*+SOH'V)PRcl)a8dM?`_Au<*ht%2UTp>o2O<u1qIq@_%;jR><OrYAAfq=3")hd(s*(@]?op*5ZePEk#f][&8btHD+IP8^9?g#gj(HEFDD.q!Yr#M7tG[QMaHg,$F`Y`d`p?0=Wc%sR*okp=F%5@^H)K%8E5JRR/S%5/qKdBMj6d=eK=O58e!V$jn9O)8B^*B`V,6*^l8hhcnPTH\O@@YZKeWK)(X"U9#S<[bq;E"<T@@'+nT1K0]b%Eon/S6t>-^ehUWq)'M6/St'8W.4d'$#kJn@:r$SMND"k[=p?lUUKZm%9@+Mgq9i]Jh^]D+m[TS<qKI`&ZjsDmGMJ8f2(Resp2M)g%Ii-opaOmk(ioqR99+PIrU:H9hjPb]N=r,tNehDD6JU.#)J?7B(Qf2.)^@IqKUdVnBgWc@q"b(;2F:^di;-8/.2A9mP)9jNU[gn\b%PDV^H(lX6jEmf]FF)At;TV#*Z`!qV.BS^M3YljS=S'd16CP^>:/89RaLk()207DhH+9ai6%Cm?ITm%3$AK!f\<>NO)Cn9tRb#;P!%kDSceFF]kN/!j!?\f"=ec.tNM]'5-"6Tg>i3mHOf7hn5hfR;@Rc%^15+8]"Xn`K_%*PPn`69'SS4%'in#XebSPJfl!TiarK'(X_!%KjKM&fZu;tZW;L,(t=YlGiGa5!FkS"%G,8)#Y9A?1R&`'O\U-sC<F@5$iSYJM*F)O$*&.8*!&"p2%a8Q_@&n(G`0p)<`iN=pJ'Bn%[-)/C)`19-,K?3o$D'08(L)D!8ImQ;im`,VX*$:&L:P:#/S:)L(7ad1Wu=@S0dQn&Z,qbPX?6KV&Dd4%&57?u&>Eh-b#kBdV%ae)%3b3o<h%Cj^NhFHG97,;f5fq-t8ic0^.`HpKo"7e`>)UqQ8]O9]L3H\9$L23!l$e<$mtR2O8t,%pG6EHNPQ9X$QBGe_jeHih`?@j/%/P]6b%]_pO]uYG/;9k8#^(a;`3^YZReSH?h;B>J?(H$HIn4-7l[o)*dV87e2MeFAf2kccr=etJ#)la=SJ?o[0WDu"l/V"ZL`Y&8]%`W8%$(u5<TK(r9i%G`a@mk'PF%>^Kh(hR$I1d;coFob"R'qLf3]jX1+^2:<O?g5cb771i%^Vd:jP'-MdJJNP$ak"RASjhI:U^D@)%5ccCE._4:jUe-E4J_8J[33tM?;J<3.Gig?oVCB>UZ+bgW&Bi=<@>HIa6VsIL7oFj)L20/2!,G+`hc6sVe0^Uq$bO>[H?H%,V)&G)%SGdlGUt!&m/;N2JYhElS0OCK_$A'SR)8JFXjm[B5/2%,HKitLN"_CE7>XR!LNo,"N\0JUB5AT<;F*Bq^qm5E+D^bBqmbhPYrU0bI%n(fZkAJ).#hCY5Kh'WT2C&g3?;]BaOj"2[XQdPn3UOg)rO>*XE%$9C"AVp,NP[jekGY=X:+'Z%64<dWH**hD&=dr+#MN\(Am\23W%i[Vd4,(O#o%2U`>Ync^C=Pb1,ctY<ak`u3X#AeeqA'_Wt:j^baJnT$]VN;[t3DCfE$]G^KXqD0h=A8uTcI!Rk&:bns1crh[R*!Bk%9![*HA.tbfZ+u?"ZfJsYJ#*S;#*=-[A>HGEB6;0\F(If\.pk+M5b:>^3ca"?JCOoGKoq:>O@&fW`3<!+:fK$sR<fo9',NF8iCKd&%m*N>B@-)"<!"e_:i8bA>HUY>%bRn/T64rI%iW[.Go^'JV(+i^e\2&%S7ZS&T'%IC-JCh:gNh/NlN3I:6F2PO'nIQl*_%_hmC]NLF%FE=O]0bFhEgJ(dW0=K0bp+j5o@l5n?/5lQtliBr3+HBuYeA)].d#fMMhZ1H^po8G^QBZ45-tNkRJ8Q3F6OD7q_9KN<(ucd)$f(54%q^7!?e0Nsba<Z-e8`!P-+fJ<'hMD8T+lB!PS`ioA%%uNjO&_,(ddntpc4?i]qVI:"TPhs4I`5]t&1q.cB8pf/]`H#&d@oNa(m$a(%HGP"dVK"Jc`7[s_&IU9+CsKPdJ'VE^@WP"p)pJfBU)Ai2@qlW$6V%R%+S[CS>DiJK-ULB,\`q3!:.MBEd10EhcG[/!(lUXG7O2q2%HC%rjN,B1R=A6kOiNb"c#G5IdS`i>:Rgr0+n5pap,7(Q+@2b-E(1h?qJp^J=[4u5\:Sn73_qZE,cIDZ-)35mr7s(up@QU2V9JAYH%;:]7XLNI#D,u[W.\16e)+c5"+QlKoNU!Ps_6.sAm^)b'>_e9GUJhr.\S\%/KQ0'3f7qpl!(+?8L65-qo>jLM-+O&7'1Kp?jGW!#p%elr7A9ZSV!5Og$pbLPla#.RXFgN9As+pd42K=Y&"3eu?/L*&>R%/8W]NRrcY0=N'F\>\PH_mR14f[?&$WH_a5!DnqD,D:Vpri?Ja%.fe0>FIXLBXTNEoGdj(aqR*-WgfD)[UC!T2]-5i3e0d>e',WAgI8FuH^X=B3LA*IaiUb>t\WU!*$5R2MRNK'498.]`WW@&sfc2"B%.X0ZU]0XZu$tMnn!LYO'>Jrjl"ML^#VT_k@=VOluY<XF5(t.HBZ4IM(78U1:!*uIDW3*dP2EWCV<BX>u&"Gme/-B!P)U:F76+-Y<%Rs?,:VQlEfi'SJV"Yn3U+WHmb!c`RFF+J>Md8??oSL\4V8oZYt$u!_:;]_Ia+[#A+WXDJG1;W\oK./1-4\]L](JQG8jW%YH-?Fi?%V^LlM5YILg3%at1#5lX=;J.ASYoC7iN>N1+XKML+etCWiU:Jm421=!G#2IqpD!K\%XKLfoPGZo77Q`D_R]ps+"bpr;nPsC&#71&<%bM"/6<aG.6>/FNW7rTA>[shs`*OkN'<]aKd+h7"E(-Cg#';^&a6%`0WAi$XtZ>-CbWQ,jH<%G:5^Lk=X18i$bHXB%(e;jN)4AA@D%4*e\DZf__//(I@b*c2b33b/-40DcMl`S.O_51RUV0q+L\1MLLGS'Q)O_nAkqO)i>R-,8aEo87Bt:afdhZ,7XA\8XL"n5]#Vk(LRZ%=Q7DKo0R^]aq*,-=m]<J69,Oce7&?g-B1R3j6+EGJ,<8!l)Al0:\N0@rZ8@JO4.T/9r8K<D%'dl_SJm.T-=%<GKOL)J]2\/;`I<u%Gg:g,MMiM\MC(]dO:X7s1[=,=3J-')\hFDd"_?P%iaSY@;@6GOY,G/(<C:/uCDHN@"[`/rmUFp#0rA&3,2f_YbSpQ5MDTLOGn>l$%#Lg:$Yq:-XGV#/-Hf9V9R1_joDj=]?.:'Fbf,D"d&@]Z'2+61HarG%-(q5(h1/=^WU9Tl.DNM)l5&+o"DIJFJjQR32R.4%[YoR3n%I^=b=m(#8_6jn30@hj#V/_a=p5"KN['L3M30,&p>k;^ju#k%r4+]Wb>Wh!!jV=A5)NQRdL23sEL*=b)_E"T2!ER+Pr]t2)@]S\MC%%^cl'[6.Rkc[,IZL#3`f&[Kk<^g1NLMAmnc"5Ns!X.H8pUUQ13ShRZ]\1jNF6KhlCB7aM_U0e@UPHhe[<V[tFfaYamYEGb\*,JbG%9Ci9"NmD;.?bhALR*\!Dc?e:N%qo@L7/BJ&K%!_!5Wgo)dl8q=dV5=8T%=;W>r+4&Wtl(Vn1m`nB/2CI9HD%eJpn;*$"hccmMRli%B7$D;6jR(qToJ3p/.j)(l$dNcSgI.=edu<3.BbCmTqWoZAdC[(ckR#,qL^LE3)eplU<Y#^QaMX&UE,2bib^;dA6HgpAJ`JQ)Vbn7%%;Uf<cL[GpSYY?(\q\SrV>"=johW*sEVjC''3+`0AWd^%l+C(gLmZ6b)i$s"@0.j2d\)14!M$Lh(7;n<4b/>"C5Ml2XUZu<*dE9?%\CeWa957Brk_tuu$kY9Db9XY?Bs3VrUR5[e/<uGmhso,ekIT#/ja.!!O3,<=K<MF1H:$+s7"ONX@bobR2TgY<MaD$J&R)_\Z4to*%pWcZF;5!kVBX>UG-:1)0T*bic3sNO-#70@c6Pk0Y<'I]hE"$3B#^>&@";a0rO-e39&3D#2-m0+Saf?/&X/b96K@6FV2.*$n;qnG\%2XE:uEe1@PiBmSKk;L^]Su9C%-Jcd9[]p=OA`dlsm`b`f>-8n`";&rYXPpLO8TYB6m'WEgQ#)U)jJUA)SW5OfkR:MANb/qs/=DD,%,J_:'G!q!A,`n6HDPXg'B7ZPsO$1:Wn=5#b`0`-fBNZ=aSiAeB$@,9s7B\uX2"(#tM&T*Ar@%Gm?"PQk[,WTRBnn00d>M!^Lj!5D%?ETA/!aE)'WeVMq7&o2D*joX<,,_IofW8I+YNDV!1[M:[2^662b\3)?N%[4k=q[ch`U475+;+t'aKlH;(00\Kb%rNj3HRMs6A$gh%$/?fdN#MmO!%;!oQI?4k)Pl&dQGd'5D@L9KG^kstCl-g&aR`NFNdT+V-1;aOA]S-f;c&;A8dDUJ.\'KNMnT9SL"tE?.&[pCaX\lT%eLbJrG90q_1tB0,KBRAB=`.rYAakWYJLP6._e5$iFd6lEN(Mb5.h[L>,'Fa2YH_[l3]<MpX1!\'#ohld[W9paJ"ZYmYZ3jd"<-Ej%Etf&9:SP"hPG.M;^Y.@DY>P0.P0;D]/h[4T:`J@0*UD!=J@$7-]<aFDX>dC02/gI:B8*X9Y6Z]/U*4(YMSN4ro_OAuLr_'%:i^/Y%_'Hr:"J/Pd>uGGBZBu][bM0mI-=S8AOZ)#2\.j&\DP9b)_jU5^N<O"b,bB#e%H5$*e9sLb++[egR\6[nk/Df'k-hfe"<mk:"FP%N%#:Ie"8\X^0?EcjD2R`0Ve*+du3k=1iGO;L7!olf_(rD0WLBrQCY=OMj\X]#I,%>Z?6]m10U%De\JQrQ76>OP:/7H$%[Djps/T%)F%V$>G&&\bM,JZWpkbnD9`?oC&%r*3"!.=;nJZ*!;0^LN:WK@X&?54f]t))OO.3H1A<Ler/CNf.p*Ba*[F5s8Aq6!:J^qaKsPUJVD,%ZJfL@K>(C<g5S@#,?uJ97>S,qJ)?b.pE9@SYS)[FJdgL[@*u1djPtEF`<O+uM&M)$o3iQeQg%_4G4V3'BF&Vj4KtKtW36L(o@cju%=`j]U<P]W)J5F[>NGc7'`*qo0Lnt^C2$*KfG\n$OZM;s0$U_.`$R@W`JVcZsH"0AF_DSm#&cO""eU[uD"ra0Ecl4:h!4fA7<bB4N%(05]KCZn)C5c>QV`c>aUWcad2_1_o#@NLF7LtgFVE5@TJCffX47]r<`@*F4.!lP4$BPo!)_5Rf&[#5r\+KRJ'"=._U=;KXcBBU68%Tb.K=l#V[Y*W\kk@Yp;T_KfS-Z*IMjM&qoH!X=H2eJmhB6gpAG]&$MYG?+grOMEm<eHQK1BK\-o>;"g89V.VI9JZf"/RsGVG'\c>%,1*<%XW9,'j"5DoC#IB!6B[TA]#QTZ-?s%Z^.Pm>kQqb42oL9(]2&BE(6,TWF4KHPf."sikWa6-%DGro..2E-9]2[KWf+#;#`W9^%^*>Rk^]ekD#d.G`W^EII35/d;LTbjVrfniL*"4GbVJs)BMcKpX0;:dlfF2AB&9:GZUFrc_aAbdh*]>[RQ,T+"f9^R\/IXU\\k4nP%6U[h1/8Or"dR:g\dNK[bi*Bg'VOX7$;VRTL"7.#K')AJ]MZp?.aHR`&#Mi+)et?^o`WRYC*36bY#2G3X)fdb-d-IC\LSJj&B&tjQ%$q%We)Uihfepu=,VG(b.4jC<Xe-MU\5<-&JK\-*kN,#"OhZQ*^@1[iL-VthF&S9<ChkO/@L^nt>1.!EV,H93;G_=iF7,F]"7Q4`D%RNAG]Gjbhm7:st8jjYL(enREOVF6\&lI`.eCb8dG'b)(Z*Q@3sQu=E>Oj^kGd"aE)$g&cu8`c\=TjXo1psb0CP*/ZEK@q@aH2M@f%3hSkh_QDZM1-eNC=cU\jbQ_M#UPXWVS8J&:VJE;CLfb^ggpaN\C-Bb[4(*+gcO_u%[5U4)62e\qG%oA;9gu<M%$WQE(*b?m!D=n&%DN/GIPU=`]QajITNa&?s!K/9RJK\hG<f(Ln^di&")UpK/DO%Vu5$!#B<c&7/bGnZK^DXqmF]lIBcWAIZdO^'M8FAN99Js!g%`<nW%%7Q!FbuCB&c*5<Y$6d+*%5I/SOObAh8<RIRVh<?U5ta=7Q'=geMN-<+)AEP@+qD>-)!n3@C8PCilZSM2oDim^SL"I)+BpEd;c$e)%VSMCj]1rS22m&$&#uFul'J554EYrX+n4Mg)TUn3kPQ`54]1iQ)AaZ<9^tnYu>d,G/br`e3Xb&j80C'hE&m/Id<Y%P>B6fe"Yb^M#%!b.NQ./LA_d5s7HPPJIR<L^R>T7XJrKt[\g.9eH'?^^KWK6,9k>kC@!XWa,4\Lr3,.'+lj-&gAGDn.'mVW.8JR]kpoA.`!^+iCY?%Y!l3^<Si%)Z0KaPeuJPU3nA\kRu3S;a%EFH9BefZCIO_X;IWk\kue:"7bq;X/s^BlPK3'9Kh>]Qi^.s.9't8?l)JTZU+*\QJ^CE6%BR-N>SCbR\k1.5LY&)^-,s+S:CrhSZ.A!DV$E-i+6>+GUQ[[uo;dQE0[VJPK-1"l\jPT2BWB<#F2Q^'XYq1l%Ep]UfQ/2hjA(O?$%bsHsTorWO1QJT7]_6g4gYtWpV?+["d;!H&\+]XZSe%g/nW&,;,rQj,VA6@B7q):kbfV2Vl_r,S]k"9iDd\HjY>ka4Uea`o65Hns.%Sk]7%4'FH]D]6B)?6W%nS7Z#;p!(p?k&JgQGoMq.XDYFP`86ER*NS$TU)\poaP-Q$ObR"RdFH1bQpr>nBW9&T=YIrA_F&?HpRpuV%O6hp1&+ntc[TT]j47N!D4NkVOCOm)9I-D-[^sts+#RTm@;.D+,JK)UudX`RW9Cip1s/]N_9BTL5bT#-'QGd0I)91kGp*$lA0P9$A%E3^bt%Fa("hj=M;k8co1OE60<Ng2I4m)H9`0N0O<@PQ)NN:E"fs4-6V`h_%9X*#Uk"Th81<'ggjQ%uD0!G"96n%>dXR"ickY>3H1%O1k1s,t):oqbl[1ASmI@p3JZ_ArGO33D[eL#K&k^9LC=d`<g>EX@ce#n=Z6eEA:\Modp[1D+]/#l,i4*$W^3FD$s.aB\,1:)!'DP%AA\JXDP.\k:WFk%>pHj[*\@obNG\-@DWneWDckMtOO#Ir=Ro$B<aNej-Eh8>a]kSM[fMX-?$Eo(83:j,eQJA`pPAf+qK&@>FK7/9%!ijdeH6o4Sn;<M`@TI:)h1N;$(:7cCok67h/4s*jjW3a>D.'fVj`[5]`J(lhFDDG'3Rt$a$;;dff<5=pf"Me7<\9??HGc8-A]1s7%IDmL9]%G/(=pATq>hm/42ti!%r]'mKQAL6Nm0K_$M]SU1p[9u@V5%m]5Bm\_4dR[YN2SY%*m+-T(ssl%>/!)\USF70C5m>J/f<@,%N6jaT6>dSK%ue]",:$tT.]rfRqSiME.2\qj*O._82hi&c=R#'lYoijloQ%eB&)bD(g3kr,N/\'oq?gNSdfRGdf8ZWeDGAL&/PF,*%HZN1*k.!]5*2PX'dNUTT#o$iL>ZlE]]Xf$6dPi]--/,p0]XBC$@3BLE83Lm^S&\53GYqTmr?0nHLg#8B[N2P^.,$Mk^'R>6FHH,i%!&V)omEupG74L:%c"/,;.,[04aHl5=JnQ.f[:G()c(m62MRLJ`fdKn=ei'[WDOF3)%C>%]F2g!V/TXnMQaQ"Qg^*bj'uQcj;jY;P%;@&R@[40[bC6+SCP)7-qHb)cbgD1S[[r/f!C=prgm4PWS:7.lYVOq`"`]8Bg&$V^BJ])bc1cp8E2g^6Vi_H[RW8=iE8eS;DS4r_n%".X)CW3R1@Zkd=?/Q5(qF8@(M6Z&LJ(\8P*PE40.^MAV>)KrG)M^2b\Ue;0?c",0?*H<LM2%)eg9R^0<Ae!'/<qNK#di=%@CMI,3%ADhNA-^mJo@dA_V5q>[l>G/gqWti*uT!`",SQQ%T`.m$PEZ)Z')M!@Xl,KI*:'Vjr%$gBGU`((RI#]+k9Cp4cceT(Jl`-qa$>FQN%&;dgV>Bh[+?o5pR7+VY,Z""^/'ST\nR6ieKkX!7sf[;;'1)5o"D$6*">`>cLrSab!BRfC.9hf7F;/GJmbf68PMh_&%o>JhF%<E;D%=Opg6;Hkn^q61[\H=7j4**ZNFC0?K%T[G@r$QsKW_JE\aV6_2PV<qXKGV\`$!#3pn-Y>9iS96[sJ:)*6;=c:shs@'l=W4>T)g7.b%S*iVD^g\[sF^e@1>qQ!1Q+iA^/KP.Y#$BlXLtCS3[ae\ADM1j7%CU#T0PEo2BW>UB9RN,f0!7[<3'dScZE(D<NCp1S#jLCS%2h%?%<sJQMg#[skncn5aY=<PUUFi2\;dY;Gs0Rd8Ui,=YNRg2IJc3Juh1#<\m6CQE`o03$nMlK:/^=$CC@J*Tl&gK7o;6q6-;t"E;`\S6%D_tI:VYdoC6WneNLC[*m?tEZgL?6+=$>JD%#K<O+CM.a'D=]>6#Y?=XE\ThgZK&gRm.AB*Ek#._nVn/_`q8O(E-U4SO1MbdBTWX3%hRet.QAAas"M?nHL*:#'G\4emdbn$$X$?=/VdRYFf5c>fUT&nbYaQk(l\XX;GiJlLBB*S9`M'C^!V*=eUV_Z.h7E)UAB\\oWR[")%1o`[F!$+<g2^mA/NL$X1mtJY+6/_9B-`I)2'[Vl>Tpl'F3,?^7TMbF`pqf)A`9Z!@(+L:"dHcMLVb)EK5_]N/;_c-==q=t#65k`)%^:CUG;(LEMj=HdY2EZ:PAD!9&bcp\t2*#/s&ZL;'PfE&.V7p$PQ<"dYaOQTcor)aWH](77(.ijoS4Hr'hVJ>nXX>P+Cgg.lP+iu%%#F%dbY.\YtR1-W'8?I"JK9S/pf0#9[$E85-BkS2uj@INlJklsHs"W2=Dfm2^okLKq,A7D:D,j?OMsh*1T^f@K.3NORinI("*?ROG%at,+m$.*E;EHAEqM5RG[[&kT=@<(n=O-$IQ?#<,U[[=1t9gS!P.&gd:$Bo0_gMm:j;:%u-0$\=c2n3hcBo?kHk2IN!@bZ(5g_aD0%,cb:u]Ha<&f#Vfj1KMuY_lI_*&YXK?RPEX]!-3_E5p<o4PJlTcMOpJV<5_H=53Kp2%0.TQ\PZh*&-au`D17,+?rjOV`W6`o5QNq;%LorkU67=:WM@e'*0#7Oe;?b"p;0l,#^86*F;N"pM8X(/NU/\9s4%kPm+l=_p;>7>42M7f`!pV]eTIsm3D$.Z,!]&VgMbLDeNIcf?%=P#2[CU\F[2k"`[bH#B&UCWF0Gclf.7J2er)X%I,1nObFN4L']ip;h66>J64a+Oc$QB1K-0P$C]lp@F!4@7ePoOT$%0pa5[(re$q%OVHOgMSWMIEq:'H(E61.=V7!dO*>M&]lBX"`b!O?d45BXT%d3DDG)i*V64oFK:jKZ>D/P+(!IC29eV74)FQLiafT\3nZ9sgQ<?=J%BQ)k6PnF/a1r<Den>;l;b>&s,c9YBQ!"JObVfL;O7Nu/`"@k+TDC.P'l%t>\Q"LWWAl=9:\tF7(*H=VEbqH7^]k<imQjthn:4m)%%Wr;mT0E?8'$),%mB>+5HktZn3W)]n9aFFgRJH?A:gj61tTD?&0HOX!hM&I#HaIK3/$`,6^krgq^n0#9lHo!!Eq=P#e<[=F.?.5(u%$s;WJ!fUBB5mZij2qO'qoGENUDrrofd7C)R9\V?!\KNnhjD^R-LZ<ClgI;<i?`eVbKaD`]<fQV.r<8E"C/.-rq`+bLi@*#d9GKE9%1['12(Zfnm(hsQ]_fN)-0Q+lb]$"<0ABh:LN#H_XL00l[=%:T](]Y"l$QMSE3(-"W,Jsd@Q2guHVrCp^@ulji=b=Be`W4"K>,VH%%7-OoXQ=ZlO);1q2J`-/@!a[N>;8>2/(jAk]&;>&fXMp%krlQ2:3FJR9fX6>)#%LOffeo__'TZA>fZUqsaEo%/;):3ad%GU/0mnTA%rh?p?*PNT8*HdXhj?13d^pTNpi1*JS7fi[@?t%F5ejC9sTgd!%@%_/>mR7Ug6F`7C0+@G'd3aU7^qe=Y4d<#kjp#K+37[\rI85:-%@a/[q%>audn=]kA7t>A(>`M;SY8d)u@=_%f:&Pi^Mas:"o'.2@iAq+&HbCPXNtu8_1Gl/(@.qauRTtd2)B+l$#-9I#%QrGY,G1O`%IbEuRq"[CO213ocStKcH.P:P5bCU<4Xf`CnCIaALVSs89:-f/83Y;XB%@&Ot$]P#3G)0!BNqSgJ4U_>fgSGd'!&,fk.3LU-*ai$!%Q14FQk(%'^0!*U&Xi-)ij00aLEFOQ?-<cr]R03KpHdsf24u2gP>(tA`%Pd<V?WkVr&dI1`TMGr%W+)8%hT!N]!,K2'h4'A&c&'UX%:@lqU%fk=lC5<@(c^XTB49!D_qQu8bHNFVqc\r*:&Jf&P3oCn9molR7BJ&YDN@8@K@).C#QDA!,!#]h3FuNgn^s*Hf=pc5V9tE)[%hZT<&l$<Yb$.uFQ*I?"iQ)(U\V%WnTC#K6U$/E\A/=R\O9amUa\f&_t1Wnj_1@JNX]EqC&kTV..P;K(0gBKa\!;3HZjJL'!_JAgB%1M(![nAM5C)e$,7(Ia3aG+@?25j"p_q`HBp/.M96A$B`=(?T)uOB(Co*nYIEORe:tj'6PbZm.YiGWi']`SaHt7'OYq`[\"Ag<hcr%F.t%'R^!,C5Ot?OhO&oHD3e2Ha1r;q,Qjf$o_M&B#IOZ-MOg^r4eJRkWZ\X\q2sCY.(oZj;p"W05+Cg&oQZPT_WC/:P.VHkH_8$N%+pO3T`s*&[--Oj$-c'0PHok'PXRU9=MjAhA6W\U6-^OpY<%EWfbM';.3R/-+<)n\\^lk^DJ$8r61uRL1YS:CE(!eT4PprIL"6Hpd%<L<Z/6nioJLA'GXi@&r;MeYdF6JpgTQc'Q"'Z62Rlo?pd4Bru40fYrM>l^H7ZFp>?R:g>Vj8]`^bc\DWbs4lQ`L7&h2aW(qi#^7n%gdFstgp:]9&;gfaHZ3gbV[:To6:6K),4pjj-'KZth$uT)F.hf[+efd\2K(/YB?-@.)hkb.3BL)LMgYbN)[HGHHsh#I?A7>0TX<P[%(j1Obk>a/pN4`rCff"JlX))c>#KtHU"`q,]U:pu<&r[Dn$oh(?LF<fsB_8Y_)3#N4Ee3H=7N`8Y7""_?kojIumPl3mNm7it`!/V2%,2QYP`0sSAL`6VkiL]"jk_'$FFA@C0M]02dh1Og8q!Hi=4m@p=F\]p(fTO&PB[*:*dZ@uuX`@!.,`K?:/WH?2Xh'[.J:SI<?OKVh%VtOB%Sg4i8_/:)!WdM''6Tl(SZ8+O@O\F(8Lbli'D?W#k6*r,3Se:-#\m/VVWRcR%'T"L`F%4Zn"[\=RKEc=8/]/0s)b9N6#Pt9f%T#L9og.WWLfAU\46@IJJLU@!cD_DVY,UcKj-F+qZP&#+jY?J)$K]Y+'CMG@:o#g\L,1I(]pU4nep16t9E(Y'?%0n",)F!I-Po`,B%mMe)dI+s?h*`I,l2kQjOqmkp]QFn9-cH"-9GW:\0!SW[7`rgmC,CPW[@HH4ak&=Uj=bsGU!@tUhBjk#AX56eW&XO5H)b)YPg"b_^%BC%Mfn(TaR:!ZAZRr&#_oHd#-Nn/r`>1S3S!d_;'jj)?f^l;nJc;#<o-kZU^(;5WoG7ur9=a28T3OPB&*4ifkS%$@5_;ZDHo"]%R%".tq6%qd['qr_d04$W=c&n`u>(9UgGAZe&d*f^iH5)el2Jg0KUE,%PJd%^?0To*1,];g@8d?PR7d-btJgJ2*o]BFu$e*u2<4H$))%U?9QD2?:+B;g?Hsd)D[;^^JJq&8],_8;ps?RI$C9;6F!tF/W3L[kn0fNY46>mmb[SB]*ZkfQb_G(ta3p\f<O0T+/t[4;T+/#mP7F%KttM0QZYh9irj"$@c&$jiKAL0;8<h3noe=@O"-%TKd:f8"4<Z_B=B(i):SsX.!(".gYQV4m.A96\`^90o[GI23=hQ*;P'O6q#5i?%e8!$5P%iFhKBoM:QD=F\7%_;9k1p3toT,$.it`:316j"96."_DL#hd3dAD>6alcXQg`.KBl*Z)h/=I,&<MsKc$Xb)^WnV\qno8_P%`WoOe>\Fs\<Iem$gGLe;1j@GrRZN-@-F;n\$j/]a/l-i90C$t.A@j51-*>'8?-jgT3uKT[4lX^%L_:b9CBH/m_^Qn@kjLV"o[DH)%-oTt`Y+?Hd;9tTqfp)nAS^_j&4b9GraQT\%YR]3kNZDraB>b?`"p2<0Pa=aGeYPoL`6\Wm1#k]W?6`2?$5E\l0=YbP%cO4]:;":b%+R89$EI0`JX?k[-X)JF6G-R#>>Wl;9Ai/.42<e<BNSO]leu%XUCe!h5QE%t0oUQ-8p3,&rCn$PT6^\mPHE=r+#I(>JS[,Z,#?SN\%RYNJ(>PRgb&g1CLXj)!)k:G.hcjm0O)0J$kF^P-Jmp5#]Ou52EKuJo=!6NJ_l+2k+7TjSG[0GhXWBBL//<dE'Ff!nH2IKoOIIp@a%ldVNgf&;op;QmcJBoRUpkA+e*hbJ<70Z?dPcUn@fHQ!F]^_&kFdaAUK@G]a#Dqa.rI1s6%n9;SR6X<U+lE[`hoMXAa-'`09FBQ[)%Vc!&fm0M*1[G'$,i40&,N]<>2RSuaaqnri@(?p0%7$"%H$15f3.*Z7)o\?(@H?^SMDbY(1)+9?'#1Es+LnoSaN,-@lOJ&Khl,B=-%164e8G[Bb3QsMg@LSpa5,Fe7,cNS@`XuSo-jE?QJA[#&R_O6k<:a-s.Mu>m]e+:GhL8YKH;/s-^YS0FRE!)gZFErLZ9!ci2Md7lK%4.&Z%LQ:/3-hWsXK,"::H7[DOJJljX(gZ/aRV*\!?<,R4)LC$.0]QUWgNC6qaOM8hKIgsP65MiC)5mAso^F6/-.Acqqg"9uF?Xc,%5gP5:Q6>KL<Zg++:`<b1J8Q:8B_0J3L`F'uS<\dtBX^gIf0-@1`D50R[P?e/bcGS!1jW5B,;O/6k_-B=2Q)"s7Wr8HL8P[=IYrk1%j;'B\m"0_qY&3^:E\'%6DitqHe1Ds&ne.gJ2r.aMc/D12kDnb,'LTHmdSrA04X$&&_-W2->%j=p@E.o5kIE0pQeQ>&%\3:nfN#n8%>]eFg-TJK@eWdo!?-kM'E5-WD^ZpP^cjLWX`hoIR[],WUE,u@g$JprnOM4k3#B1a(L8NS4MeUYhpFGJU`&MZ$SXO3M#Z5K.O;Qa7%WU80'k6(*CHLTcMk18qV;0gn/2FIquI\c4tb$LD`e$cT:]h]TrN*i28Xr0?O]!Zr%Y%TICq:euO]'Z,0h'"-V[q0#'pO:#(f7hul%^2OGA9ig;T5:<"T]1kcsDX`V>?@okL]@Z#rbLl;n>jaqe'\W1UXb?]/lfa/4U6f8i4RL1[]pFIu[P\iW`dkP5_*ccbgaR)U$q>[<%kL$ttAG(?B'$QiqWj#!ACOFWUF_Ci)a[XTpO/$Ut=:9FuCZ.i$md.C(CjQoRj<V@W+I\&?!6L`;6h77D0[F%`F&E5p?VB8fgtf]5%s$#^n#eiSYY5Oc@6i+gHg$Rn%b/4Oj2d3Uo6l>.f!]&rergb:E*EDKJXEg"9O7f*N^?QP^N>0DZmD3uHNPs"sI'Pgsa)fNa%Lq>V%3V4;G[*S#<lS[>dh.VKc2eVN`S&5K/Nk]ITS$+GoR=;[FnFl#<YP1h2hJBq&lFYfCmXP7YqsNGBC%KfOgRmrD[i[dr52SQ]J!=l[%5<[hPH@C7QhgYF^j.ClnQBqI>mGj9%5Q(*2iU`u1VcuacK9X+Kk5##@rOWS<_"O]'kO&4TmdD^gVa'%PIJ;\J8QENeCB+(uq"2c(%;O&NO?V't^p0#-,n9Up\s6Cd+r^j-&s7#r?@d_UL07<e=s7?2AJ$kTG^:O=2@IsL"C\W*e~>%AI9_PrivateDataEnd