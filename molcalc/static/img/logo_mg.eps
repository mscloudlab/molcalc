%!PS-Adobe-3.1 EPSF-3.0%%Title: logo_mg.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Barb Backes%%CreationDate: 6/25/03%%BoundingBox: 0 0 140 58%%HiResBoundingBox: 0 0 139.4058 57.9356%%CropBox: 0 0 139.4058 57.9356%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors: %%DocumentCustomColors: (PANTONE 123 C)%%+ (PANTONE 208 C)%%CMYKCustomColor: 0 0.24 0.94 0 (PANTONE 123 C)%%+ 0 1 0.36 0.37 (PANTONE 208 C)%%RGBCustomColor: %AI7_Thumbnail: 128 56 8%%BeginData: 6896 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD07FFA1FD2069A1FD0DFFCBA1A1709AFD2369FD09FF9BFD1169A8%FFFFA1709BA1FD08FF70FD20699BFD09FFA2706FFD2869FD09FFA1FD1169%CAFFCA9B946F94FD09FF70FD2069FD07FF9B94FD2B69FD09FF9BFD1169A2%FFA8C46F9B9AFD0AFFFD2069A1FD04FFCAFD1D6999FD1069FD09FFA1FD11%69CAFFFF709B6F9BFD0AFFCAFD1F69A1FFFFFFCAFD1D69C199FD1069FD09%FF9BFD1169A8FFFFFFA8CAFD0CFFFD1F696FFFFFA2FD1D69C1C0FD1169FD%09FFA1FD1169CAFD11FF70FD1F69CBCBFD1D6999C699696969999FFD0C69%FD09FF9BFD1169A8FD11FF94FD1F69A26FFD1C6999C0C669696993C093FD%0C69FD09FFA1FD1169CAFD11FFFD206970FD1C6993C0C7996969C1C6C1FD%0D69FD09FF9BFD1169A8FD10FFA2FD1C6993986FFD1E699EC7C06969C1C6%C1FD04699293FD0869FD09FFA1FD1169CAFD10FFA1FD1D69C1C099FD1069%6FFD07996F6969699FC7C69969C1C6C76F696993C0C16FFD0869FD09FF9B%FD1169A2FD10FF6FFD1E69C1C093FD0D696F98C6C0C6C0C6C0C6C0C69E99%98C6C0C66EC1C0C66E696999C0C1FD0A69FD09FFA1FD1169CAFD10FFFD10%6994FD0F69C1FD0D6993C0C7C6C7C6C7C6C7C6C7C6C7C6C7C6C79EC7C6C7%996999C7C6C1FD0B69FD09FF9BFD1169A8FD0FFFCAFD10699BFD09696FC0%926FFD106999C6C0C7C6C6C0C7C6C6C0C7C6C6C0C7C6C6C0C79E939EC7C6%C1FD04696EC16FFD0569FD09FFA1FD1169CAFD0FFF9BFD1069FFFD0A6993%C7C6C16FFD0E69C1C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C1C6C7%C6C1696969C1C0C793FD0669FD09FF9BFD1169A8FD0FFF94FD0F699AFF94%FD0B699FC0C698FD0D6998C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6%C0C6C099699998C6C0C1FD0869FD09FFA1FD1169CAFD0FFFFD1069A1FF9B%FD0C6999C0C7FD0D6999C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7%C6C199C7C6C7C099FD0969FD09FF9BFD1169A8FD0EFFA2FD1069CAFFCAFD%06696F9F92936969696F98FD0E69C1C6C6C0C7C6C6C0C7C6C6C0C7C6C6C0%C7C6C6C0C7C6C6C0C7986F6969696F6EC193696969FD09FFA1FD1169CAFD%0EFFA1FD0F696FFFFFFFFD06699399C7C6C79F996F93FD0F6999C0C7C6C7%C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C76F936F999EC7C6C799936969%69FD09FF9BFD1169A2FD0EFF70FD0F6970FFFFFF70FD08699398C6C0C6C0%99FD106998C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C698C1C0C6C0C6%9E99FD0669FD09FFA1FD1169CAFD0EFFFD1069A2FFFFFFA1FD0A696FC1C6%C79FFD126999C1C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C16FFD%0869FD09FF9BFD1169A8FD0DFFCAFD1069A8FFFFFFA2FD04696F6F936FFD%056998C7FD1569999EC7C6C6C0C7C6C6C0C7C6C6C0C7C6C69893FD056993%6F936969FD09FFA1FD1169CAFD0DFF9BFD1069FD05FFFD046999C1C6C7C6%C7C6C79FC19E99FD16696FC1C6C7C6C7C6C7C6C7C6C7C6C7C0C19EC1C6C7%C6C7C6C7986969FD09FF9BFD1169A8FD0DFF94FD0F699AFD05FF94FD0669%6E999EC6C0C6C0C6C093FD17696F98C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6%9E996E6FFD0469FD09FFA1FD1169CAFD0DFFFD10699BFD05FF9BFD0A6999%99C7C6C7C093FD1969C1C6C7C6C7C6C7C6C7C6C799996FFD0869FD09FF9B%FD1169A8FD0CFFA2FD1069CAFD05FFCAFD0769936F93989998C1C0C79EFD%1A6993C0C6C0C7C6C6C0C7989998936F6FFD0669FD09FFA1FD1169CAFD0C%FFA1FD1069FD07FF6969939EC7C6C7C6C7C6C7C6C7C6C7C6C7C093FD1969%93C0C7C6C7C6C7C6C7C6C7C6C7C6C7C6C79F9969FD09FF9BFD1169A2FD0C%FF6FFD0F696FFD07FF6F6969936E99989998C198C6C0C6C0C6C0C6C099FD%1A6998C6C0C6C0C6C0C69EC1989998996E936969FD09FFA1FD1169CAFD0C%FFFD1069A1FD07FFA1FD0A696FBBC0C7C6C7C6C7C6C79993FD1769939EC7%C6C7C0BB93FD0A69FD09FF9BFD1169A8FD0BFFCAFD1069A2FD07FFA2FD06%696F92C1C6C6C0C7C6C6C0C7C6C6C0C7C099FD17696F9EC7C6C6C0C7C6C1%9893FD0669FD09FFA1FD1169CAFD0BFF9BFD1069FD09FF69696F9998C7C6%C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C79E996FFD146999C6C7C6C7C6C7%C6C7C6C79F996F6969FD09FF9BFD1169A8FD0BFF94FD0F6994FD09FF9469%999899929993936E936F999EC6C0C6C0C6C0C6C0C6C0C6C0C69899FD1369%C69E9F6F936E9398999299989F6969FD09FFA1FD1169CAFD0BFFFD10699B%FD09FF9BFD0869999FC7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C79993%FD106999C7C6C79999FD0969FD09FF9BFD1169A8FD0AFFA2FD10699B9BA1%9BA19BA19BA19B9BFD066993C1C0C7C6C6C0C7C6C6C0C7C6C6C0C7C6C6C0%C7C6C6C0C7C6C16FFD0E6993C0C7C6C6C0C793FD0769FD09FFA1FD1169CA%FD0AFFA1FD1F6999C0C7C6C798999399C6C7C6C7C6C7C6C7C6C7C6C7C6C7%C6C7C6C7C6C799FD0D696F996F999FC7C6C7C099FD0569FD09FF9BFD1169%A2FD0AFF70FD1D696EC69E996E6F69696EC1C0C6C0C6C0C6C0C6C0C6C0C6%C0C6C0C6C0C6C0C6C0C66EFD0D69C0C16E69696F6E999EC66E696969FD09%FFA1FD1169CAFD0AFFFD1E6993FD05699399C7C6C7C0C7C6C7C6C7C6C7C6%C7C6C7C6C7C6C7C6C7C6C7C6C7FD0D69C7C6C79993FD056993696969FD09%FF9BFD1169A8FD09FFCAFD2369939EC6C0C193939EC7C6C6C0C7C6C6C0C7%C6C6C0C7C6C6C0C7C6C6C093FD0C6993C1C0C7C093FD0869FD09FF9BFD11%69CAFD09FF9BFD2269C1C6C799936993C0C7C6C7C6C7C6C7C6C7C6C7C6C7%C6C7C6C7C6C7C6C76FFD0C6999699399C7C6C1FD0769CBFD08FFFD1269A8%FD09FF94FD2169C79E99696969939EC6C09F98C6C0C6C0C6C0C6C0C6C0C6%C0C6C0C6C0C6C0FD0C6993C099696969999EC66EFD056970FD07FF70FD12%69CAFD09FFFD2169936FFD046999C6C7C0936FC7C6C7C0C7C6C7C6C7C6C7%C6C7C6C7C6C7C699FD0C696FC7C699FD04696F93FD066970FD04FFCA70FD%1369A8FD08FFA2FD266999C6C6986969C1C0C798C1C0C7C0C6C0C7C6C6C0%C7C6C69E99FD0E6992C7C699FD2569CAFD08FFA1FD256999C6C16F6969C1%C6C79393C6C7C0936F9998C19FC19EC193FD1269C1C6C1FD2469A2FD08FF%6FFD1069A19BA19BA19BA19BA19BA19BA19BA1FD0569999E9369696999C0%C76F6998C6C093FD196999696969939E99FD2369CAFD08FFFD1069A1FD0F%FFA1FD096993C6C76F696FC7C6C1FD196999C693FD2869A8FD07FFCAFD10%69A2FD0FFFA1FD08696F9EC1696969C1C0C1FD1B69C1C0FD2869CAFD07FF%9BFD1069FD11FFFD086998C169696993C6C1FD1D69C19FFD2769A1FD07FF%94FD0F6994FD11FF70FD07696FFD046998C7FD1B69A169696993FD27699B%FD07FFFD10699BFD11FF9BFD0B696FC793FD1A69CAFFC4FD2B69FD06FFA2%FD1069CAFD11FFA2FD0B699992FD1A69A2FFFFFF9BFD186970FD116976FD%05FFA1FD1069CBFD12FFFD256970FD06FFC4FD156994CACBFD12699BFD04%FF70FD0F696FFD13FF6FFD22699BA8FD08FFCB70FD12699AA8FFFF70FD12%69A1FFFFFFFD1069A1FD13FFA1FD1D699A9AA2A8FD0DFFCAA270FD0C6994%9ACBFD05FF9AFD1269A8FFFFA2CAA2CAA2CAA2CAA2CAA2CAA2CAA2CAA8FD%13FFA8CAA2CAA2CAA2CAA2CAA2CAA2CAA2CAA2CAA2CAA2CAA2CAA2CAA8FD%18FFCAA2A19BA19BA19BA2A2CBFD0AFFA2CAA2CAA2CAA2CAA2CAA2CAA2CA%A2CAA2FDFCFFFD06FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/exec_file	statusdict /currentfilenameextend known{		{			0 () /SubFileDecode filter cvx exec		}	}{				{cvx exec}	}ifelsedef/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		currentdict /lw_initializepage known not			{			/lw_initializepage /initializepage load def			/initializepage				{				lw_initializepage				/initializepage {} def				}def			}if		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: logo_mg.eps 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -57.9356 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 57.9356 li139.406 57.9356 li139.406 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"136.402 57.334 mo136.402 57.334 135.451 56.2774 133.871 54.584 cv131.908 52.4844 132.02 50.2598 132.02 50.2598 cv132.02 40.9532 li132.02 0.022461 li112.926 0.022461 li112.926 40.1993 li112.689 44.0059 108.961 44.9766 106.893 44.9102 cv103.93 44.8184 102.217 43.1622 102.217 40.3184 cv102.213 0.038086 li83.6168 0.038086 li83.6128 0.022461 li79.2652 0.022461 75.8511 0.0390626 70.5093 0.0390626 cv60.3355 0.0390626 50.7276 1.59571 47.4903 10.0342 cv45.5689 2.55274 li45.0967 1.08399 43.4903 0.0244141 41.9058 0.0244141 cv39.4083 0.0244141 li14.5293 0.0253907 li12.6832 0.0253907 li8.65235 0.0253907 li8.1753 0.0253907 8.00196 0.175782 8.25245 0.514649 cv8.25245 0.514649 9.15235 1.37891 10.7872 3.24122 cv13.0577 5.82715 12.1651 9.28711 12.1651 9.28711 cv0 57.8223 li17.7144 57.8223 li20.2696 47.1583 li37.3658 47.1583 li40.0318 57.8223 li58.2359 57.8223 li60.0206 57.8223 61.8394 57.8223 63.3658 57.8223 cv72.9371 57.8223 80.7242 56.8477 84.5757 50.8868 cv87.4468 56.3204 93.6246 58.875 104.525 57.9356 cv108.32 57.6094 112.051 55.834 113.652 53.0215 cv114.387 55.3594 li115.025 56.7715 116.322 57.8145 118.172 57.8145 cv126.775 57.8145 li128.264 57.8145 li136.004 57.8145 li136.48 57.8145 136.654 57.6739 136.402 57.334 cvcp22.9156 36.627 mo28.8199 12.9024 li34.7559 36.627 li22.9156 36.627 lifalse sop/0 <</Name (PANTONE 208 C)/CSA /1 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /ColorLookup [ [ 0 0 0 0 ] [ 0 0.00392157 0.00141177 0.00145099 ][ 0 0.00784314 0.00282353 0.00290197 ] [ 0 0.0117648 0.0042353 0.00435295 ][ 0 0.0156863 0.00564706 0.00580393 ] [ 0 0.0196079 0.00705883 0.00725491 ][ 0 0.0235295 0.00847059 0.00870589 ] [ 0 0.027451 0.00988236 0.0101569 ][ 0 0.0313726 0.0112942 0.0116079 ] [ 0 0.0352942 0.0127059 0.0130589 ][ 0 0.0392157 0.0141177 0.0145099 ] [ 0 0.0431373 0.0155295 0.0159608 ][ 0 0.0470589 0.0169412 0.0174118 ] [ 0 0.0509804 0.018353 0.0188628 ][ 0 0.054902 0.0197648 0.0203138 ] [ 0 0.0588236 0.0211765 0.0217648 ][ 0 0.0627451 0.0225883 0.0232157 ] [ 0 0.0666667 0.024 0.0246667 ][ 0 0.0705883 0.0254118 0.0261177 ] [ 0 0.0745098 0.0268236 0.0275687 ][ 0 0.0784314 0.0282353 0.0290197 ] [ 0 0.082353 0.0296471 0.0304706 ][ 0 0.0862746 0.0310589 0.0319216 ] [ 0 0.0901961 0.0324706 0.0333726 ][ 0 0.0941177 0.0338824 0.0348236 ] [ 0 0.0980393 0.0352942 0.0362746 ][ 0 0.101961 0.0367059 0.0377255 ] [ 0 0.105883 0.0381177 0.0391765 ][ 0 0.109804 0.0395295 0.0406275 ] [ 0 0.113726 0.0409412 0.0420785 ][ 0 0.117648 0.042353 0.0435295 ] [ 0 0.121569 0.0437648 0.0449804 ][ 0 0.125491 0.0451765 0.0464314 ] [ 0 0.129412 0.0465883 0.0478824 ][ 0 0.133334 0.048 0.0493334 ] [ 0 0.137255 0.0494118 0.0507844 ][ 0 0.141177 0.0508236 0.0522353 ] [ 0 0.145099 0.0522353 0.0536863 ][ 0 0.14902 0.0536471 0.0551373 ] [ 0 0.152942 0.0550589 0.0565883 ][ 0 0.156863 0.0564706 0.0580393 ] [ 0 0.160785 0.0578824 0.0594902 ][ 0 0.164706 0.0592942 0.0609412 ] [ 0 0.168628 0.0607059 0.0623922 ][ 0 0.17255 0.0621177 0.0638432 ] [ 0 0.176471 0.0635295 0.0652942 ][ 0 0.180393 0.0649412 0.0667451 ] [ 0 0.184314 0.066353 0.0681961 ][ 0 0.188236 0.0677648 0.0696471 ] [ 0 0.192157 0.0691765 0.0710981 ][ 0 0.196079 0.0705883 0.0725491 ] [ 0 0.2 0.072 0.074 ][ 0 0.203922 0.0734118 0.075451 ] [ 0 0.207844 0.0748236 0.076902 ][ 0 0.211765 0.0762353 0.078353 ] [ 0 0.215687 0.0776471 0.079804 ][ 0 0.219608 0.0790589 0.0812549 ] [ 0 0.22353 0.0804706 0.0827059 ][ 0 0.227451 0.0818824 0.0841569 ] [ 0 0.231373 0.0832942 0.0856079 ][ 0 0.235295 0.0847059 0.0870589 ] [ 0 0.239216 0.0861177 0.0885098 ][ 0 0.243138 0.0875295 0.0899608 ] [ 0 0.247059 0.0889412 0.0914118 ][ 0 0.250981 0.090353 0.0928628 ] [ 0 0.254902 0.0917648 0.0943138 ][ 0 0.258824 0.0931765 0.0957647 ] [ 0 0.262746 0.0945883 0.0972157 ][ 0 0.266667 0.096 0.0986667 ] [ 0 0.270589 0.0974118 0.100118 ][ 0 0.27451 0.0988236 0.101569 ] [ 0 0.278432 0.100236 0.10302 ][ 0 0.282353 0.101648 0.104471 ] [ 0 0.286275 0.103059 0.105922 ][ 0 0.290197 0.104471 0.107373 ] [ 0 0.294118 0.105883 0.108824 ][ 0 0.29804 0.107295 0.110275 ] [ 0 0.301961 0.108706 0.111726 ][ 0 0.305883 0.110118 0.113177 ] [ 0 0.309804 0.11153 0.114628 ][ 0 0.313726 0.112942 0.116079 ] [ 0 0.317648 0.114353 0.11753 ][ 0 0.321569 0.115765 0.118981 ] [ 0 0.325491 0.117177 0.120432 ][ 0 0.329412 0.118589 0.121883 ] [ 0 0.333334 0.12 0.123334 ][ 0 0.337255 0.121412 0.124785 ] [ 0 0.341177 0.122824 0.126236 ][ 0 0.345099 0.124236 0.127687 ] [ 0 0.34902 0.125648 0.129138 ][ 0 0.352942 0.127059 0.130589 ] [ 0 0.356863 0.128471 0.13204 ][ 0 0.360785 0.129883 0.133491 ] [ 0 0.364706 0.131295 0.134942 ][ 0 0.368628 0.132706 0.136393 ] [ 0 0.37255 0.134118 0.137844 ][ 0 0.376471 0.13553 0.139295 ] [ 0 0.380393 0.136942 0.140746 ][ 0 0.384314 0.138353 0.142197 ] [ 0 0.388236 0.139765 0.143648 ][ 0 0.392157 0.141177 0.145099 ] [ 0 0.396079 0.142589 0.14655 ][ 0 0.4 0.144 0.148 ] [ 0 0.403922 0.145412 0.149451 ][ 0 0.407844 0.146824 0.150902 ] [ 0 0.411765 0.148236 0.152353 ][ 0 0.415687 0.149648 0.153804 ] [ 0 0.419608 0.151059 0.155255 ][ 0 0.42353 0.152471 0.156706 ] [ 0 0.427451 0.153883 0.158157 ][ 0 0.431373 0.155295 0.159608 ] [ 0 0.435295 0.156706 0.161059 ][ 0 0.439216 0.158118 0.16251 ] [ 0 0.443138 0.15953 0.163961 ][ 0 0.447059 0.160942 0.165412 ] [ 0 0.450981 0.162353 0.166863 ][ 0 0.454902 0.163765 0.168314 ] [ 0 0.458824 0.165177 0.169765 ][ 0 0.462746 0.166589 0.171216 ] [ 0 0.466667 0.168 0.172667 ][ 0 0.470589 0.169412 0.174118 ] [ 0 0.47451 0.170824 0.175569 ][ 0 0.478432 0.172236 0.17702 ] [ 0 0.482353 0.173648 0.178471 ][ 0 0.486275 0.175059 0.179922 ] [ 0 0.490197 0.176471 0.181373 ][ 0 0.494118 0.177883 0.182824 ] [ 0 0.49804 0.179295 0.184275 ][ 0 0.501961 0.180706 0.185726 ] [ 0 0.505883 0.182118 0.187177 ][ 0 0.509804 0.18353 0.188628 ] [ 0 0.513726 0.184942 0.190079 ][ 0 0.517648 0.186353 0.19153 ] [ 0 0.521569 0.187765 0.192981 ][ 0 0.525491 0.189177 0.194432 ] [ 0 0.529412 0.190589 0.195883 ][ 0 0.533334 0.192 0.197334 ] [ 0 0.537255 0.193412 0.198785 ][ 0 0.541177 0.194824 0.200236 ] [ 0 0.545098 0.196236 0.201687 ][ 0 0.54902 0.197648 0.203138 ] [ 0 0.552942 0.199059 0.204589 ][ 0 0.556863 0.200471 0.20604 ] [ 0 0.560785 0.201883 0.207491 ][ 0 0.564706 0.203295 0.208942 ] [ 0 0.568628 0.204706 0.210393 ][ 0 0.57255 0.206118 0.211844 ] [ 0 0.576471 0.20753 0.213295 ][ 0 0.580393 0.208942 0.214746 ] [ 0 0.584314 0.210353 0.216197 ][ 0 0.588236 0.211765 0.217648 ] [ 0 0.592157 0.213177 0.219099 ][ 0 0.596079 0.214589 0.22055 ] [ 0 0.6 0.216 0.222 ][ 0 0.603922 0.217412 0.223451 ] [ 0 0.607844 0.218824 0.224902 ][ 0 0.611765 0.220236 0.226353 ] [ 0 0.615687 0.221648 0.227804 ][ 0 0.619608 0.223059 0.229255 ] [ 0 0.62353 0.224471 0.230706 ][ 0 0.627451 0.225883 0.232157 ] [ 0 0.631373 0.227295 0.233608 ][ 0 0.635295 0.228706 0.235059 ] [ 0 0.639216 0.230118 0.23651 ][ 0 0.643138 0.23153 0.237961 ] [ 0 0.647059 0.232942 0.239412 ][ 0 0.650981 0.234353 0.240863 ] [ 0 0.654902 0.235765 0.242314 ][ 0 0.658824 0.237177 0.243765 ] [ 0 0.662746 0.238589 0.245216 ][ 0 0.666667 0.24 0.246667 ] [ 0 0.670589 0.241412 0.248118 ][ 0 0.67451 0.242824 0.249569 ] [ 0 0.678432 0.244236 0.25102 ][ 0 0.682353 0.245648 0.252471 ] [ 0 0.686275 0.247059 0.253922 ][ 0 0.690197 0.248471 0.255373 ] [ 0 0.694118 0.249883 0.256824 ][ 0 0.69804 0.251295 0.258275 ] [ 0 0.701961 0.252706 0.259726 ][ 0 0.705883 0.254118 0.261177 ] [ 0 0.709804 0.25553 0.262628 ][ 0 0.713726 0.256942 0.264079 ] [ 0 0.717648 0.258353 0.26553 ][ 0 0.721569 0.259765 0.266981 ] [ 0 0.725491 0.261177 0.268432 ][ 0 0.729412 0.262589 0.269883 ] [ 0 0.733334 0.264 0.271334 ][ 0 0.737255 0.265412 0.272785 ] [ 0 0.741177 0.266824 0.274236 ][ 0 0.745098 0.268236 0.275687 ] [ 0 0.74902 0.269648 0.277138 ][ 0 0.752942 0.271059 0.278589 ] [ 0 0.756863 0.272471 0.28004 ][ 0 0.760785 0.273883 0.281491 ] [ 0 0.764706 0.275295 0.282942 ][ 0 0.768628 0.276706 0.284393 ] [ 0 0.77255 0.278118 0.285844 ][ 0 0.776471 0.27953 0.287295 ] [ 0 0.780393 0.280942 0.288746 ][ 0 0.784314 0.282353 0.290197 ] [ 0 0.788236 0.283765 0.291648 ][ 0 0.792157 0.285177 0.293098 ] [ 0 0.796079 0.286589 0.29455 ][ 0 0.8 0.288 0.296 ] [ 0 0.803922 0.289412 0.297451 ][ 0 0.807844 0.290824 0.298902 ] [ 0 0.811765 0.292236 0.300353 ][ 0 0.815687 0.293648 0.301804 ] [ 0 0.819608 0.295059 0.303255 ][ 0 0.82353 0.296471 0.304706 ] [ 0 0.827451 0.297883 0.306157 ][ 0 0.831373 0.299295 0.307608 ] [ 0 0.835295 0.300706 0.309059 ][ 0 0.839216 0.302118 0.31051 ] [ 0 0.843138 0.30353 0.311961 ][ 0 0.847059 0.304942 0.313412 ] [ 0 0.850981 0.306353 0.314863 ][ 0 0.854902 0.307765 0.316314 ] [ 0 0.858824 0.309177 0.317765 ][ 0 0.862746 0.310589 0.319216 ] [ 0 0.866667 0.312 0.320667 ][ 0 0.870589 0.313412 0.322118 ] [ 0 0.87451 0.314824 0.323569 ][ 0 0.878432 0.316236 0.32502 ] [ 0 0.882353 0.317648 0.326471 ][ 0 0.886275 0.319059 0.327922 ] [ 0 0.890196 0.320471 0.329373 ][ 0 0.894118 0.321883 0.330824 ] [ 0 0.89804 0.323295 0.332275 ][ 0 0.901961 0.324706 0.333726 ] [ 0 0.905883 0.326118 0.335177 ][ 0 0.909804 0.32753 0.336628 ] [ 0 0.913726 0.328942 0.338079 ][ 0 0.917648 0.330353 0.33953 ] [ 0 0.921569 0.331765 0.340981 ][ 0 0.925491 0.333177 0.342432 ] [ 0 0.929412 0.334589 0.343883 ][ 0 0.933334 0.336 0.345334 ] [ 0 0.937255 0.337412 0.346785 ][ 0 0.941177 0.338824 0.348236 ] [ 0 0.945098 0.340236 0.349687 ][ 0 0.94902 0.341648 0.351138 ] [ 0 0.952942 0.343059 0.352589 ][ 0 0.956863 0.344471 0.35404 ] [ 0 0.960785 0.345883 0.355491 ][ 0 0.964706 0.347295 0.356942 ] [ 0 0.968628 0.348706 0.358393 ][ 0 0.972549 0.350118 0.359844 ] [ 0 0.976471 0.35153 0.361295 ][ 0 0.980393 0.352942 0.362746 ] [ 0 0.984314 0.354353 0.364197 ][ 0 0.988236 0.355765 0.365648 ] [ 0 0.992157 0.357177 0.367098 ][ 0 0.996079 0.358589 0.36855 ] [ 0 1 0.36 0.37 ]] >>add_csd1 /0 get_csdsepcs1 sepf43.358 10.7657 mo43.3531 10.7696 li43.3174 10.8067 li43.3067 10.8184 li43.3179 10.8282 li43.3555 10.8633 li46.627 13.8985 li46.6973 13.9629 li46.7188 13.9825 li46.7222 13.9542 li46.7354 13.8594 li46.8042 13.3506 46.8951 12.8399 47.0049 12.3399 cv47.0127 12.3057 li47.0147 12.295 li47.0054 12.2891 li46.9747 12.2715 li43.8111 10.3565 li43.7759 10.336 li43.7652 10.3282 li43.7569 10.3379 li43.7291 10.3692 li43.7247 10.3731 li43.6988 10.4024 li43.7374 10.3985 li43.8047 10.3926 li43.8428 10.3887 li43.8121 10.3653 li43.6719 10.2598 43.4507 10.2813 43.3292 10.4102 cv43.2686 10.4747 43.2378 10.5626 43.2452 10.6485 cv43.253 10.7344 43.2955 10.8106 43.3653 10.8633 cv43.3916 10.8829 li43.3892 10.8497 li43.3838 10.7754 li43.3814 10.7422 li43.358 10.7657 li/1 <</Name (PANTONE 123 C)/CSA /1 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /ColorLookup [ [ 0 0 0 0 ] [ 0 0.000941177 0.00368628 0 ][ 0 0.00188236 0.00737255 0 ] [ 0 0.00282353 0.0110589 0 ][ 0 0.00376471 0.0147451 0 ] [ 0 0.00470589 0.0184314 0 ][ 0 0.00564706 0.0221177 0 ] [ 0 0.00658824 0.025804 0 ][ 0 0.00752942 0.0294902 0 ] [ 0 0.00847059 0.0331765 0 ][ 0 0.00941177 0.0368628 0 ] [ 0 0.010353 0.0405491 0 ][ 0 0.0112942 0.0442353 0 ] [ 0 0.0122353 0.0479216 0 ][ 0 0.0131765 0.0516079 0 ] [ 0 0.0141177 0.0552942 0 ][ 0 0.0150589 0.0589804 0 ] [ 0 0.016 0.0626667 0 ][ 0 0.0169412 0.066353 0 ] [ 0 0.0178824 0.0700393 0 ][ 0 0.0188236 0.0737255 0 ] [ 0 0.0197648 0.0774118 0 ][ 0 0.0207059 0.0810981 0 ] [ 0 0.0216471 0.0847844 0 ][ 0 0.0225883 0.0884706 0 ] [ 0 0.0235295 0.0921569 0 ][ 0 0.0244706 0.0958432 0 ] [ 0 0.0254118 0.0995294 0 ][ 0 0.026353 0.103216 0 ] [ 0 0.0272942 0.106902 0 ][ 0 0.0282353 0.110589 0 ] [ 0 0.0291765 0.114275 0 ][ 0 0.0301177 0.117961 0 ] [ 0 0.0310589 0.121648 0 ][ 0 0.032 0.125334 0 ] [ 0 0.0329412 0.12902 0 ][ 0 0.0338824 0.132706 0 ] [ 0 0.0348236 0.136393 0 ][ 0 0.0357648 0.140079 0 ] [ 0 0.0367059 0.143765 0 ][ 0 0.0376471 0.147451 0 ] [ 0 0.0385883 0.151138 0 ][ 0 0.0395295 0.154824 0 ] [ 0 0.0404706 0.15851 0 ][ 0 0.0414118 0.162197 0 ] [ 0 0.042353 0.165883 0 ][ 0 0.0432942 0.169569 0 ] [ 0 0.0442353 0.173255 0 ][ 0 0.0451765 0.176942 0 ] [ 0 0.0461177 0.180628 0 ][ 0 0.0470589 0.184314 0 ] [ 0 0.048 0.188 0 ][ 0 0.0489412 0.191687 0 ] [ 0 0.0498824 0.195373 0 ][ 0 0.0508236 0.199059 0 ] [ 0 0.0517648 0.202746 0 ][ 0 0.0527059 0.206432 0 ] [ 0 0.0536471 0.210118 0 ][ 0 0.0545883 0.213804 0 ] [ 0 0.0555295 0.217491 0 ][ 0 0.0564706 0.221177 0 ] [ 0 0.0574118 0.224863 0 ][ 0 0.058353 0.22855 0 ] [ 0 0.0592942 0.232236 0 ][ 0 0.0602353 0.235922 0 ] [ 0 0.0611765 0.239608 0 ][ 0 0.0621177 0.243295 0 ] [ 0 0.0630589 0.246981 0 ][ 0 0.064 0.250667 0 ] [ 0 0.0649412 0.254353 0 ][ 0 0.0658824 0.25804 0 ] [ 0 0.0668236 0.261726 0 ][ 0 0.0677648 0.265412 0 ] [ 0 0.0687059 0.269098 0 ][ 0 0.0696471 0.272785 0 ] [ 0 0.0705883 0.276471 0 ][ 0 0.0715295 0.280157 0 ] [ 0 0.0724706 0.283844 0 ][ 0 0.0734118 0.28753 0 ] [ 0 0.074353 0.291216 0 ][ 0 0.0752942 0.294902 0 ] [ 0 0.0762353 0.298589 0 ][ 0 0.0771765 0.302275 0 ] [ 0 0.0781177 0.305961 0 ][ 0 0.0790589 0.309648 0 ] [ 0 0.08 0.313334 0 ][ 0 0.0809412 0.31702 0 ] [ 0 0.0818824 0.320706 0 ][ 0 0.0828236 0.324393 0 ] [ 0 0.0837647 0.328079 0 ][ 0 0.0847059 0.331765 0 ] [ 0 0.0856471 0.335451 0 ][ 0 0.0865883 0.339138 0 ] [ 0 0.0875294 0.342824 0 ][ 0 0.0884706 0.34651 0 ] [ 0 0.0894118 0.350197 0 ][ 0 0.090353 0.353883 0 ] [ 0 0.0912942 0.357569 0 ][ 0 0.0922353 0.361255 0 ] [ 0 0.0931765 0.364942 0 ][ 0 0.0941177 0.368628 0 ] [ 0 0.0950589 0.372314 0 ][ 0 0.096 0.376 0 ] [ 0 0.0969412 0.379687 0 ][ 0 0.0978824 0.383373 0 ] [ 0 0.0988236 0.387059 0 ][ 0 0.0997648 0.390746 0 ] [ 0 0.100706 0.394432 0 ][ 0 0.101648 0.398118 0 ] [ 0 0.102589 0.401804 0 ][ 0 0.10353 0.405491 0 ] [ 0 0.104471 0.409177 0 ][ 0 0.105412 0.412863 0 ] [ 0 0.106353 0.416549 0 ][ 0 0.107295 0.420236 0 ] [ 0 0.108236 0.423922 0 ][ 0 0.109177 0.427608 0 ] [ 0 0.110118 0.431295 0 ][ 0 0.111059 0.434981 0 ] [ 0 0.112 0.438667 0 ][ 0 0.112942 0.442353 0 ] [ 0 0.113883 0.44604 0 ][ 0 0.114824 0.449726 0 ] [ 0 0.115765 0.453412 0 ][ 0 0.116706 0.457098 0 ] [ 0 0.117648 0.460785 0 ][ 0 0.118589 0.464471 0 ] [ 0 0.11953 0.468157 0 ][ 0 0.120471 0.471844 0 ] [ 0 0.121412 0.47553 0 ][ 0 0.122353 0.479216 0 ] [ 0 0.123295 0.482902 0 ][ 0 0.124236 0.486589 0 ] [ 0 0.125177 0.490275 0 ][ 0 0.126118 0.493961 0 ] [ 0 0.127059 0.497648 0 ][ 0 0.128 0.501334 0 ] [ 0 0.128942 0.50502 0 ][ 0 0.129883 0.508706 0 ] [ 0 0.130824 0.512393 0 ][ 0 0.131765 0.516079 0 ] [ 0 0.132706 0.519765 0 ][ 0 0.133648 0.523451 0 ] [ 0 0.134589 0.527138 0 ][ 0 0.13553 0.530824 0 ] [ 0 0.136471 0.53451 0 ][ 0 0.137412 0.538196 0 ] [ 0 0.138353 0.541883 0 ][ 0 0.139295 0.545569 0 ] [ 0 0.140236 0.549255 0 ][ 0 0.141177 0.552942 0 ] [ 0 0.142118 0.556628 0 ][ 0 0.143059 0.560314 0 ] [ 0 0.144 0.564 0 ][ 0 0.144942 0.567687 0 ] [ 0 0.145883 0.571373 0 ][ 0 0.146824 0.575059 0 ] [ 0 0.147765 0.578746 0 ][ 0 0.148706 0.582432 0 ] [ 0 0.149648 0.586118 0 ][ 0 0.150589 0.589804 0 ] [ 0 0.15153 0.593491 0 ][ 0 0.152471 0.597177 0 ] [ 0 0.153412 0.600863 0 ][ 0 0.154353 0.604549 0 ] [ 0 0.155295 0.608236 0 ][ 0 0.156236 0.611922 0 ] [ 0 0.157177 0.615608 0 ][ 0 0.158118 0.619295 0 ] [ 0 0.159059 0.622981 0 ][ 0 0.16 0.626667 0 ] [ 0 0.160942 0.630353 0 ][ 0 0.161883 0.63404 0 ] [ 0 0.162824 0.637726 0 ][ 0 0.163765 0.641412 0 ] [ 0 0.164706 0.645098 0 ][ 0 0.165648 0.648785 0 ] [ 0 0.166589 0.652471 0 ][ 0 0.16753 0.656157 0 ] [ 0 0.168471 0.659844 0 ][ 0 0.169412 0.66353 0 ] [ 0 0.170353 0.667216 0 ][ 0 0.171295 0.670902 0 ] [ 0 0.172236 0.674589 0 ][ 0 0.173177 0.678275 0 ] [ 0 0.174118 0.681961 0 ][ 0 0.175059 0.685648 0 ] [ 0 0.176 0.689334 0 ][ 0 0.176942 0.69302 0 ] [ 0 0.177883 0.696706 0 ][ 0 0.178824 0.700393 0 ] [ 0 0.179765 0.704079 0 ][ 0 0.180706 0.707765 0 ] [ 0 0.181648 0.711451 0 ][ 0 0.182589 0.715138 0 ] [ 0 0.18353 0.718824 0 ][ 0 0.184471 0.72251 0 ] [ 0 0.185412 0.726196 0 ][ 0 0.186353 0.729883 0 ] [ 0 0.187295 0.733569 0 ][ 0 0.188236 0.737255 0 ] [ 0 0.189177 0.740942 0 ][ 0 0.190118 0.744628 0 ] [ 0 0.191059 0.748314 0 ][ 0 0.192 0.752 0 ] [ 0 0.192942 0.755687 0 ][ 0 0.193883 0.759373 0 ] [ 0 0.194824 0.763059 0 ][ 0 0.195765 0.766746 0 ] [ 0 0.196706 0.770432 0 ][ 0 0.197648 0.774118 0 ] [ 0 0.198589 0.777804 0 ][ 0 0.19953 0.781491 0 ] [ 0 0.200471 0.785177 0 ][ 0 0.201412 0.788863 0 ] [ 0 0.202353 0.792549 0 ][ 0 0.203295 0.796236 0 ] [ 0 0.204236 0.799922 0 ][ 0 0.205177 0.803608 0 ] [ 0 0.206118 0.807294 0 ][ 0 0.207059 0.810981 0 ] [ 0 0.208 0.814667 0 ][ 0 0.208942 0.818353 0 ] [ 0 0.209883 0.82204 0 ][ 0 0.210824 0.825726 0 ] [ 0 0.211765 0.829412 0 ][ 0 0.212706 0.833098 0 ] [ 0 0.213648 0.836785 0 ][ 0 0.214589 0.840471 0 ] [ 0 0.21553 0.844157 0 ][ 0 0.216471 0.847844 0 ] [ 0 0.217412 0.85153 0 ][ 0 0.218353 0.855216 0 ] [ 0 0.219295 0.858902 0 ][ 0 0.220236 0.862589 0 ] [ 0 0.221177 0.866275 0 ][ 0 0.222118 0.869961 0 ] [ 0 0.223059 0.873648 0 ][ 0 0.224 0.877334 0 ] [ 0 0.224942 0.88102 0 ][ 0 0.225883 0.884706 0 ] [ 0 0.226824 0.888393 0 ][ 0 0.227765 0.892079 0 ] [ 0 0.228706 0.895765 0 ][ 0 0.229648 0.899451 0 ] [ 0 0.230589 0.903138 0 ][ 0 0.23153 0.906824 0 ] [ 0 0.232471 0.91051 0 ][ 0 0.233412 0.914196 0 ] [ 0 0.234353 0.917883 0 ][ 0 0.235295 0.921569 0 ] [ 0 0.236236 0.925255 0 ][ 0 0.237177 0.928942 0 ] [ 0 0.238118 0.932628 0 ][ 0 0.239059 0.936314 0 ] [ 0 0.24 0.94 0 ]] >>add_csd1 /1 get_csdsepcs1 sepf0.3 lw0 lc0 lj4 ml[] 0 dshtrue sadj43.358 10.7657 mo43.3531 10.7696 li43.3174 10.8067 li43.3067 10.8184 li43.3179 10.8282 li43.3555 10.8633 li46.627 13.8985 li46.6973 13.9629 li46.7188 13.9825 li46.7222 13.9542 li46.7354 13.8594 li46.8042 13.3506 46.8951 12.8399 47.0049 12.3399 cv47.0127 12.3057 li47.0147 12.295 li47.0054 12.2891 li46.9747 12.2715 li43.8111 10.3565 li43.7759 10.336 li43.7652 10.3282 li43.7569 10.3379 li43.7291 10.3692 li43.7247 10.3731 li43.6988 10.4024 li43.7374 10.3985 li43.8047 10.3926 li43.8428 10.3887 li43.8121 10.3653 li43.6719 10.2598 43.4507 10.2813 43.3292 10.4102 cv43.2686 10.4747 43.2378 10.5626 43.2452 10.6485 cv43.253 10.7344 43.2955 10.8106 43.3653 10.8633 cv43.3916 10.8829 li43.3892 10.8497 li43.3838 10.7754 li43.3814 10.7422 li43.358 10.7657 licptrue sop1 /1 get_csdsepcs1 seps40.1871 14.9004 mo40.1836 14.9043 li40.1553 14.9473 li40.147 14.96 li40.1597 14.9688 li40.2022 14.9961 li46.5386 19.1192 li46.627 19.1768 li46.6534 19.1934 li46.65 19.1622 li46.6387 19.0586 li46.5684 18.3965 46.5328 17.71 46.5328 17.0157 cv46.5328 16.9864 46.5333 16.9581 46.5337 16.9297 cv46.5347 16.8575 li46.5352 16.8233 li46.5049 16.8233 li46.5113 16.8106 li46.524 16.8086 li46.522 16.8086 46.5069 16.8028 46.4937 16.7969 cv40.5557 14.4249 li40.5157 14.4083 li40.504 14.4043 li40.4971 14.4151 li40.4751 14.4522 li40.4722 14.4571 li40.4532 14.4903 li40.4893 14.4795 li40.5552 14.461 li40.5914 14.4502 li40.5582 14.4327 li40.4 14.3506 40.1856 14.4063 40.0904 14.5538 cv40.044 14.626 40.0298 14.7149 40.0518 14.7969 cv40.0748 14.8829 40.1314 14.9522 40.2115 14.9942 cv40.2413 15.0088 li40.2325 14.9766 li40.2139 14.9043 li40.2056 14.8711 li40.1871 14.9004 lifalse sop1 /1 get_csdsepcs1 sepf40.1871 14.9004 mo40.1836 14.9043 li40.1553 14.9473 li40.147 14.96 li40.1597 14.9688 li40.2022 14.9961 li46.5386 19.1192 li46.627 19.1768 li46.6534 19.1934 li46.65 19.1622 li46.6387 19.0586 li46.5684 18.3965 46.5328 17.71 46.5328 17.0157 cv46.5328 16.9864 46.5333 16.9581 46.5337 16.9297 cv46.5347 16.8575 li46.5352 16.8233 li46.5049 16.8233 li46.5113 16.8106 li46.524 16.8086 li46.522 16.8086 46.5069 16.8028 46.4937 16.7969 cv40.5557 14.4249 li40.5157 14.4083 li40.504 14.4043 li40.4971 14.4151 li40.4751 14.4522 li40.4722 14.4571 li40.4532 14.4903 li40.4893 14.4795 li40.5552 14.461 li40.5914 14.4502 li40.5582 14.4327 li40.4 14.3506 40.1856 14.4063 40.0904 14.5538 cv40.044 14.626 40.0298 14.7149 40.0518 14.7969 cv40.0748 14.8829 40.1314 14.9522 40.2115 14.9942 cv40.2413 15.0088 li40.2325 14.9766 li40.2139 14.9043 li40.2056 14.8711 li40.1871 14.9004 licptrue sop1 /1 get_csdsepcs1 seps37.8663 19.4629 mo37.8638 19.4688 li37.8423 19.5157 li37.836 19.5293 li37.8501 19.5352 li37.8965 19.5557 li47.8511 23.9043 li47.9737 23.9571 li48.0103 23.9737 li47.9932 23.9376 li47.9356 23.8165 li47.5132 22.9268 47.1822 21.962 46.9512 20.9483 cv46.9439 20.918 li46.9419 20.9083 li46.9327 20.9063 li46.9019 20.8995 li38.1382 18.9376 li38.0953 18.9278 li38.0826 18.9258 li38.0777 18.9376 li38.0626 18.9786 li38.0606 18.9844 li38.0479 19.0196 li38.0811 19.004 li38.1436 18.9727 li38.1768 18.9571 li38.1416 18.9454 li37.9693 18.8887 37.7686 18.9786 37.7032 19.1397 cv37.6714 19.2168 37.6739 19.3028 37.71 19.3809 cv37.7471 19.461 37.8184 19.5235 37.9053 19.5528 cv37.9371 19.5626 li37.9234 19.5313 li37.8936 19.4629 li37.8799 19.4327 li37.8663 19.4629 lifalse sop1 /1 get_csdsepcs1 sepf37.8663 19.4629 mo37.8638 19.4688 li37.8423 19.5157 li37.836 19.5293 li37.8501 19.5352 li37.8965 19.5557 li47.8511 23.9043 li47.9737 23.9571 li48.0103 23.9737 li47.9932 23.9376 li47.9356 23.8165 li47.5132 22.9268 47.1822 21.962 46.9512 20.9483 cv46.9439 20.918 li46.9419 20.9083 li46.9327 20.9063 li46.9019 20.8995 li38.1382 18.9376 li38.0953 18.9278 li38.0826 18.9258 li38.0777 18.9376 li38.0626 18.9786 li38.0606 18.9844 li38.0479 19.0196 li38.0811 19.004 li38.1436 18.9727 li38.1768 18.9571 li38.1416 18.9454 li37.9693 18.8887 37.7686 18.9786 37.7032 19.1397 cv37.6714 19.2168 37.6739 19.3028 37.71 19.3809 cv37.7471 19.461 37.8184 19.5235 37.9053 19.5528 cv37.9371 19.5626 li37.9234 19.5313 li37.8936 19.4629 li37.8799 19.4327 li37.8663 19.4629 licptrue sop1 /1 get_csdsepcs1 seps73.1421 41.6016 mo73.1421 37.459 68.4976 35.8633 63.1202 34.0176 cv57.5796 32.1133 51.2999 29.9571 48.2989 24.5235 cv48.2857 24.5 li48.2818 24.4922 li48.2735 24.4922 li48.2461 24.4903 li36.6319 23.7579 li36.5875 23.7559 li36.5738 23.7549 li36.5718 23.7676 li36.564 23.8116 li36.5626 23.8184 li36.5562 23.8536 li36.586 23.8321 li36.6431 23.792 li36.6729 23.7715 li36.6368 23.7657 li36.4556 23.7364 36.274 23.8565 36.2408 24.0274 cv36.2247 24.1075 36.2427 24.1905 36.2916 24.2598 cv36.3433 24.335 36.4258 24.3848 36.5166 24.4004 cv36.5508 24.4053 li36.5318 24.377 li36.4908 24.3165 li36.4712 24.2872 li36.4639 24.3213 li36.4625 24.3282 li36.4512 24.375 li36.4483 24.3887 li36.4625 24.3926 li36.5093 24.4043 li48.1812 27.4004 li48.1856 27.4024 li48.1866 27.4024 li48.188 27.4024 li48.1924 27.4024 li48.2261 27.4053 48.2564 27.42 48.2764 27.4434 cv48.2916 27.4629 48.2989 27.4844 48.2969 27.5069 cv48.2916 27.5586 48.2359 27.6124 48.1685 27.6075 cv48.1646 27.6065 li48.1631 27.6065 li48.1617 27.6065 li48.1573 27.6075 li48.1578 27.6075 36.0826 28.7403 36.0826 28.7403 cv36.0352 28.7442 li36.0215 28.7461 li36.022 28.7598 li36.0235 28.8067 li36.0235 28.8145 li36.025 28.8477 li36.0494 28.8223 li36.0997 28.7715 li36.1241 28.7461 li36.0889 28.7461 li35.9034 28.7461 35.7471 28.8926 35.7471 29.0684 cv35.7471 29.1504 35.7803 29.2266 35.8414 29.2891 cv35.9058 29.3536 35.9961 29.3907 36.0889 29.3907 cv36.1241 29.3907 li36.0997 29.3653 li36.0494 29.3126 li36.025 29.2872 li36.0235 29.3223 li36.0235 29.3301 li36.022 29.377 li36.0215 29.3907 li36.0352 29.3926 li36.0826 29.3965 li48.1416 30.5293 li48.146 30.5293 li48.147 30.5293 li48.1485 30.5293 li48.1529 30.5293 li48.2168 30.5235 48.273 30.5645 48.2784 30.6172 cv48.2813 30.6465 48.271 30.6758 48.2515 30.7012 cv48.2334 30.7227 48.209 30.7344 48.1822 30.7364 cv48.1778 30.7383 li48.1763 30.7383 li48.1753 30.7383 li48.171 30.7383 li36.5069 33.7325 li36.4605 33.7442 li36.4463 33.7461 li36.4493 33.7618 li36.459 33.8086 li36.4605 33.8145 li36.4678 33.8477 li36.4874 33.8204 li36.5289 33.7598 li36.5484 33.7305 li36.5137 33.7364 li36.4229 33.752 36.3409 33.8008 36.2891 33.877 cv36.2403 33.9454 36.2217 34.0293 36.2378 34.1094 cv36.2715 34.2813 36.4527 34.4004 36.6338 34.3711 cv36.67 34.3653 li36.6402 34.3438 li36.5835 34.3028 li36.5538 34.2813 li36.5596 34.3184 li36.5606 34.3243 li36.5679 34.3692 li36.5699 34.3809 li36.5835 34.3809 li36.629 34.379 li48.7178 33.6172 li48.7222 33.6172 li48.7237 33.6172 li48.7247 33.6172 li48.7291 33.6153 li48.792 33.5997 48.8565 33.6309 48.8726 33.6856 cv48.8804 33.7129 48.8765 33.7442 48.8604 33.7715 cv48.8462 33.7969 48.8243 33.8145 48.7989 33.8204 cv48.7945 33.8204 li48.793 33.8223 li48.792 33.8223 li48.7881 33.8243 li37.8912 38.5821 li37.8458 38.6016 li37.8321 38.6075 li37.8379 38.6211 li37.8575 38.6661 li37.8599 38.6719 li37.8731 38.7032 li37.8873 38.6719 li37.918 38.6055 li37.9317 38.5743 li37.8995 38.586 li37.813 38.6133 37.7418 38.6758 37.7046 38.7559 cv37.668 38.834 37.6656 38.92 37.6978 38.9981 cv37.7632 39.1602 37.9639 39.2481 38.1358 39.1915 cv38.1714 39.1797 li38.1377 39.1641 li38.0757 39.1348 li38.042 39.1172 li38.0547 39.1524 li38.0572 39.1583 li38.0723 39.1993 li38.0772 39.2129 li38.0894 39.209 li38.1324 39.1993 li49.8829 36.5684 li49.8873 36.5684 li49.8887 36.5684 li49.8897 36.5684 li49.8941 36.5665 li49.9507 36.543 50.0367 36.5723 50.064 36.627 cv50.0748 36.6465 50.0757 36.6719 50.0669 36.6954 cv50.0562 36.7266 50.0328 36.75 50.0035 36.7618 cv49.9996 36.7637 li49.9981 36.7637 li49.9971 36.7657 li49.9932 36.7676 li40.1939 43.1426 li40.1514 43.17 li40.1387 43.1778 li40.147 43.1915 li40.1753 43.2325 li40.1788 43.2383 li40.1973 43.2657 li40.2061 43.2344 li40.2247 43.1622 li40.233 43.129 li40.2032 43.1446 li40.1231 43.1856 40.0665 43.2559 40.0435 43.3418 cv40.0215 43.4239 40.0357 43.5118 40.0821 43.584 cv40.1773 43.7325 40.3912 43.7872 40.5499 43.7051 cv40.5835 43.6876 li40.5469 43.6778 li40.481 43.6583 li40.4444 43.6485 li40.4639 43.6817 li40.4673 43.6856 li40.4893 43.7227 li40.4957 43.7344 li40.5074 43.7286 li40.5474 43.7129 li51.6001 39.2989 li51.6041 39.2969 li51.6055 39.2969 li51.6065 39.295 li51.6104 39.293 li51.6636 39.2598 51.7393 39.2715 51.7764 39.3184 cv51.7969 39.3438 51.8062 39.3809 51.8003 39.4141 cv51.7974 39.4317 51.7891 39.4551 51.7666 39.4688 cv51.7627 39.4708 li51.7618 39.4727 li51.7608 39.4727 li51.7574 39.4766 li43.3448 47.2754 li43.3072 47.3106 li43.296 47.3223 li43.3067 47.3321 li43.3423 47.3692 li43.3472 47.3731 li43.3702 47.3965 li43.3726 47.3653 li43.3785 47.2891 li43.3809 47.2559 li43.3545 47.2754 li43.2847 47.3301 43.2422 47.4043 43.2349 47.4903 cv43.2271 47.5762 43.2574 47.6641 43.3184 47.7286 cv43.44 47.8594 43.6612 47.879 43.8013 47.7735 cv43.8321 47.752 li43.794 47.7461 li43.7261 47.7403 li43.688 47.7364 li43.7134 47.7657 li43.7178 47.7696 li43.7452 47.8008 li43.7535 47.8106 li43.7647 47.8047 li43.8003 47.7833 li53.8301 41.7149 li53.834 41.7129 li53.8355 41.711 li53.8365 41.711 li53.8399 41.7071 li53.8858 41.6661 53.9629 41.6661 54.0084 41.7071 cv54.0626 41.7559 54.0704 41.7833 54.0704 41.7969 cv54.0704 41.8008 54.0704 41.8184 54.0337 41.8516 cv54.0298 41.8555 li54.0289 41.8555 li54.0279 41.8575 li54.025 41.8614 li47.2481 50.8575 li47.2173 50.8965 li47.2085 50.9102 li47.2208 50.918 li47.2623 50.9493 li47.2676 50.9532 li47.2945 50.9727 li47.2911 50.9395 li47.2842 50.8633 li47.2808 50.8301 li47.2579 50.8555 li47.2007 50.918 47.1729 50.9961 47.1802 51.0801 cv47.1876 51.168 47.2344 51.252 47.3086 51.3067 cv47.4527 51.4161 47.6744 51.4004 47.7925 51.2754 cv47.8189 51.2461 li47.7803 51.25 li47.7129 51.254 li47.6744 51.2579 li47.7046 51.2813 li47.71 51.2852 li47.7422 51.3106 li47.752 51.3184 li47.7613 51.3106 li47.793 51.2833 li56.4893 43.752 li56.4932 43.7481 li56.4942 43.7461 li56.4952 43.7461 li56.4981 43.7422 li56.5357 43.6934 56.6119 43.6817 56.6612 43.7149 cv56.7027 43.7442 56.7286 43.7774 56.7334 43.8086 cv56.7364 43.8301 56.7305 43.8477 56.7164 43.8672 cv56.7134 43.8711 li56.7124 43.8711 li56.7115 43.8731 li56.7095 43.877 li51.7857 53.7754 li51.7632 53.8223 li51.7569 53.834 li51.7701 53.8418 li51.815 53.8633 li51.8213 53.8672 li51.8511 53.8809 li51.8423 53.8497 li51.8223 53.7774 li51.8135 53.7442 li51.7955 53.7735 li51.7515 53.8418 51.7388 53.9219 51.7603 54.002 cv51.7833 54.0899 51.8453 54.1661 51.9302 54.209 cv52.0933 54.293 52.3091 54.2442 52.4014 54.0997 cv52.4219 54.0684 li52.3853 54.0782 li52.3189 54.0938 li52.2818 54.1036 li52.3155 54.1211 li52.3213 54.125 li52.358 54.1465 li52.3692 54.1524 li52.377 54.1426 li52.4034 54.1094 li57.3956 47.9454 li57.4112 47.9258 li57.3873 47.9219 li57.2999 47.9024 li57.2759 47.8985 li57.2823 47.9219 li57.2852 47.9336 li57.3101 48.0293 li57.3179 48.0586 li57.3365 48.0352 li57.3985 47.9571 li59.608 45.2305 li59.6353 45.1954 li59.5928 45.2051 li59.5328 45.2188 li59.4903 45.2305 li59.5298 45.2481 li60.981 45.9219 62.4068 46.3516 63.5435 46.4629 cv66.9302 46.7891 70.0953 46.0274 71.8042 44.4747 cv72.6929 43.668 73.1421 42.7012 73.1421 41.6016 cvfalse sop1 /1 get_csdsepcs1 sepf73.1421 41.6016 mo73.1421 37.459 68.4976 35.8633 63.1202 34.0176 cv57.5796 32.1133 51.2999 29.9571 48.2989 24.5235 cv48.2857 24.5 li48.2818 24.4922 li48.2735 24.4922 li48.2461 24.4903 li36.6319 23.7579 li36.5875 23.7559 li36.5738 23.7549 li36.5718 23.7676 li36.564 23.8116 li36.5626 23.8184 li36.5562 23.8536 li36.586 23.8321 li36.6431 23.792 li36.6729 23.7715 li36.6368 23.7657 li36.4556 23.7364 36.274 23.8565 36.2408 24.0274 cv36.2247 24.1075 36.2427 24.1905 36.2916 24.2598 cv36.3433 24.335 36.4258 24.3848 36.5166 24.4004 cv36.5508 24.4053 li36.5318 24.377 li36.4908 24.3165 li36.4712 24.2872 li36.4639 24.3213 li36.4625 24.3282 li36.4512 24.375 li36.4483 24.3887 li36.4625 24.3926 li36.5093 24.4043 li48.1812 27.4004 li48.1856 27.4024 li48.1866 27.4024 li48.188 27.4024 li48.1924 27.4024 li48.2261 27.4053 48.2564 27.42 48.2764 27.4434 cv48.2916 27.4629 48.2989 27.4844 48.2969 27.5069 cv48.2916 27.5586 48.2359 27.6124 48.1685 27.6075 cv48.1646 27.6065 li48.1631 27.6065 li48.1617 27.6065 li48.1573 27.6075 li48.1578 27.6075 36.0826 28.7403 36.0826 28.7403 cv36.0352 28.7442 li36.0215 28.7461 li36.022 28.7598 li36.0235 28.8067 li36.0235 28.8145 li36.025 28.8477 li36.0494 28.8223 li36.0997 28.7715 li36.1241 28.7461 li36.0889 28.7461 li35.9034 28.7461 35.7471 28.8926 35.7471 29.0684 cv35.7471 29.1504 35.7803 29.2266 35.8414 29.2891 cv35.9058 29.3536 35.9961 29.3907 36.0889 29.3907 cv36.1241 29.3907 li36.0997 29.3653 li36.0494 29.3126 li36.025 29.2872 li36.0235 29.3223 li36.0235 29.3301 li36.022 29.377 li36.0215 29.3907 li36.0352 29.3926 li36.0826 29.3965 li48.1416 30.5293 li48.146 30.5293 li48.147 30.5293 li48.1485 30.5293 li48.1529 30.5293 li48.2168 30.5235 48.273 30.5645 48.2784 30.6172 cv48.2813 30.6465 48.271 30.6758 48.2515 30.7012 cv48.2334 30.7227 48.209 30.7344 48.1822 30.7364 cv48.1778 30.7383 li48.1763 30.7383 li48.1753 30.7383 li48.171 30.7383 li36.5069 33.7325 li36.4605 33.7442 li36.4463 33.7461 li36.4493 33.7618 li36.459 33.8086 li36.4605 33.8145 li36.4678 33.8477 li36.4874 33.8204 li36.5289 33.7598 li36.5484 33.7305 li36.5137 33.7364 li36.4229 33.752 36.3409 33.8008 36.2891 33.877 cv36.2403 33.9454 36.2217 34.0293 36.2378 34.1094 cv36.2715 34.2813 36.4527 34.4004 36.6338 34.3711 cv36.67 34.3653 li36.6402 34.3438 li36.5835 34.3028 li36.5538 34.2813 li36.5596 34.3184 li36.5606 34.3243 li36.5679 34.3692 li36.5699 34.3809 li36.5835 34.3809 li36.629 34.379 li48.7178 33.6172 li48.7222 33.6172 li48.7237 33.6172 li48.7247 33.6172 li48.7291 33.6153 li48.792 33.5997 48.8565 33.6309 48.8726 33.6856 cv48.8804 33.7129 48.8765 33.7442 48.8604 33.7715 cv48.8462 33.7969 48.8243 33.8145 48.7989 33.8204 cv48.7945 33.8204 li48.793 33.8223 li48.792 33.8223 li48.7881 33.8243 li37.8912 38.5821 li37.8458 38.6016 li37.8321 38.6075 li37.8379 38.6211 li37.8575 38.6661 li37.8599 38.6719 li37.8731 38.7032 li37.8873 38.6719 li37.918 38.6055 li37.9317 38.5743 li37.8995 38.586 li37.813 38.6133 37.7418 38.6758 37.7046 38.7559 cv37.668 38.834 37.6656 38.92 37.6978 38.9981 cv37.7632 39.1602 37.9639 39.2481 38.1358 39.1915 cv38.1714 39.1797 li38.1377 39.1641 li38.0757 39.1348 li38.042 39.1172 li38.0547 39.1524 li38.0572 39.1583 li38.0723 39.1993 li38.0772 39.2129 li38.0894 39.209 li38.1324 39.1993 li49.8829 36.5684 li49.8873 36.5684 li49.8887 36.5684 li49.8897 36.5684 li49.8941 36.5665 li49.9507 36.543 50.0367 36.5723 50.064 36.627 cv50.0748 36.6465 50.0757 36.6719 50.0669 36.6954 cv50.0562 36.7266 50.0328 36.75 50.0035 36.7618 cv49.9996 36.7637 li49.9981 36.7637 li49.9971 36.7657 li49.9932 36.7676 li40.1939 43.1426 li40.1514 43.17 li40.1387 43.1778 li40.147 43.1915 li40.1753 43.2325 li40.1788 43.2383 li40.1973 43.2657 li40.2061 43.2344 li40.2247 43.1622 li40.233 43.129 li40.2032 43.1446 li40.1231 43.1856 40.0665 43.2559 40.0435 43.3418 cv40.0215 43.4239 40.0357 43.5118 40.0821 43.584 cv40.1773 43.7325 40.3912 43.7872 40.5499 43.7051 cv40.5835 43.6876 li40.5469 43.6778 li40.481 43.6583 li40.4444 43.6485 li40.4639 43.6817 li40.4673 43.6856 li40.4893 43.7227 li40.4957 43.7344 li40.5074 43.7286 li40.5474 43.7129 li51.6001 39.2989 li51.6041 39.2969 li51.6055 39.2969 li51.6065 39.295 li51.6104 39.293 li51.6636 39.2598 51.7393 39.2715 51.7764 39.3184 cv51.7969 39.3438 51.8062 39.3809 51.8003 39.4141 cv51.7974 39.4317 51.7891 39.4551 51.7666 39.4688 cv51.7627 39.4708 li51.7618 39.4727 li51.7608 39.4727 li51.7574 39.4766 li43.3448 47.2754 li43.3072 47.3106 li43.296 47.3223 li43.3067 47.3321 li43.3423 47.3692 li43.3472 47.3731 li43.3702 47.3965 li43.3726 47.3653 li43.3785 47.2891 li43.3809 47.2559 li43.3545 47.2754 li43.2847 47.3301 43.2422 47.4043 43.2349 47.4903 cv43.2271 47.5762 43.2574 47.6641 43.3184 47.7286 cv43.44 47.8594 43.6612 47.879 43.8013 47.7735 cv43.8321 47.752 li43.794 47.7461 li43.7261 47.7403 li43.688 47.7364 li43.7134 47.7657 li43.7178 47.7696 li43.7452 47.8008 li43.7535 47.8106 li43.7647 47.8047 li43.8003 47.7833 li53.8301 41.7149 li53.834 41.7129 li53.8355 41.711 li53.8365 41.711 li53.8399 41.7071 li53.8858 41.6661 53.9629 41.6661 54.0084 41.7071 cv54.0626 41.7559 54.0704 41.7833 54.0704 41.7969 cv54.0704 41.8008 54.0704 41.8184 54.0337 41.8516 cv54.0298 41.8555 li54.0289 41.8555 li54.0279 41.8575 li54.025 41.8614 li47.2481 50.8575 li47.2173 50.8965 li47.2085 50.9102 li47.2208 50.918 li47.2623 50.9493 li47.2676 50.9532 li47.2945 50.9727 li47.2911 50.9395 li47.2842 50.8633 li47.2808 50.8301 li47.2579 50.8555 li47.2007 50.918 47.1729 50.9961 47.1802 51.0801 cv47.1876 51.168 47.2344 51.252 47.3086 51.3067 cv47.4527 51.4161 47.6744 51.4004 47.7925 51.2754 cv47.8189 51.2461 li47.7803 51.25 li47.7129 51.254 li47.6744 51.2579 li47.7046 51.2813 li47.71 51.2852 li47.7422 51.3106 li47.752 51.3184 li47.7613 51.3106 li47.793 51.2833 li56.4893 43.752 li56.4932 43.7481 li56.4942 43.7461 li56.4952 43.7461 li56.4981 43.7422 li56.5357 43.6934 56.6119 43.6817 56.6612 43.7149 cv56.7027 43.7442 56.7286 43.7774 56.7334 43.8086 cv56.7364 43.8301 56.7305 43.8477 56.7164 43.8672 cv56.7134 43.8711 li56.7124 43.8711 li56.7115 43.8731 li56.7095 43.877 li51.7857 53.7754 li51.7632 53.8223 li51.7569 53.834 li51.7701 53.8418 li51.815 53.8633 li51.8213 53.8672 li51.8511 53.8809 li51.8423 53.8497 li51.8223 53.7774 li51.8135 53.7442 li51.7955 53.7735 li51.7515 53.8418 51.7388 53.9219 51.7603 54.002 cv51.7833 54.0899 51.8453 54.1661 51.9302 54.209 cv52.0933 54.293 52.3091 54.2442 52.4014 54.0997 cv52.4219 54.0684 li52.3853 54.0782 li52.3189 54.0938 li52.2818 54.1036 li52.3155 54.1211 li52.3213 54.125 li52.358 54.1465 li52.3692 54.1524 li52.377 54.1426 li52.4034 54.1094 li57.3956 47.9454 li57.4112 47.9258 li57.3873 47.9219 li57.2999 47.9024 li57.2759 47.8985 li57.2823 47.9219 li57.2852 47.9336 li57.3101 48.0293 li57.3179 48.0586 li57.3365 48.0352 li57.3985 47.9571 li59.608 45.2305 li59.6353 45.1954 li59.5928 45.2051 li59.5328 45.2188 li59.4903 45.2305 li59.5298 45.2481 li60.981 45.9219 62.4068 46.3516 63.5435 46.4629 cv66.9302 46.7891 70.0953 46.0274 71.8042 44.4747 cv72.6929 43.668 73.1421 42.7012 73.1421 41.6016 cvcptrue sop1 /1 get_csdsepcs1 seps88.9624 50.9629 mo88.9683 50.959 li89.0113 50.9297 li89.023 50.9219 li89.0132 50.9083 li88.9839 50.8672 li86.3628 47.3868 li86.3042 47.3086 li86.2867 47.2852 li86.2769 47.3145 li86.2476 47.4063 li86.0874 47.9102 85.9058 48.4004 85.7066 48.8672 cv85.691 48.9004 li85.6871 48.9102 li85.6949 48.918 li85.7242 48.9415 li88.439 51.293 li88.4703 51.3204 li88.48 51.3282 li88.4878 51.3223 li88.521 51.2969 li88.5269 51.293 li88.5582 51.2676 li88.5171 51.2657 li88.4507 51.2598 li88.4117 51.2559 li88.439 51.2852 li88.5582 51.4102 88.7789 51.4258 88.9234 51.3184 cv88.9976 51.2618 89.0425 51.1797 89.0503 51.0918 cv89.0582 51.0079 89.0308 50.9278 88.9742 50.8653 cv88.9507 50.8418 li88.9468 50.875 li88.941 50.9493 li88.9371 50.9825 li88.9624 50.9629 lifalse sop1 /1 get_csdsepcs1 sepf88.9624 50.9629 mo88.9683 50.959 li89.0113 50.9297 li89.023 50.9219 li89.0132 50.9083 li88.9839 50.8672 li86.3628 47.3868 li86.3042 47.3086 li86.2867 47.2852 li86.2769 47.3145 li86.2476 47.4063 li86.0874 47.9102 85.9058 48.4004 85.7066 48.8672 cv85.691 48.9004 li85.6871 48.9102 li85.6949 48.918 li85.7242 48.9415 li88.439 51.293 li88.4703 51.3204 li88.48 51.3282 li88.4878 51.3223 li88.521 51.2969 li88.5269 51.293 li88.5582 51.2676 li88.5171 51.2657 li88.4507 51.2598 li88.4117 51.2559 li88.439 51.2852 li88.5582 51.4102 88.7789 51.4258 88.9234 51.3184 cv88.9976 51.2618 89.0425 51.1797 89.0503 51.0918 cv89.0582 51.0079 89.0308 50.9278 88.9742 50.8653 cv88.9507 50.8418 li88.9468 50.875 li88.941 50.9493 li88.9371 50.9825 li88.9624 50.9629 licptrue sop1 /1 get_csdsepcs1 seps92.8863 47.3868 mo92.8902 47.3829 li92.9273 47.3458 li92.9371 47.334 li92.9273 47.3243 li92.8882 47.2891 li87.2906 42.0958 li87.2124 42.0254 li87.191 42.002 li87.1871 42.0352 li87.1812 42.1387 li87.1285 42.9239 87.0445 43.6895 86.9332 44.42 cv86.9273 44.4512 li86.9253 44.4629 li86.9351 44.4668 li86.9624 44.4844 li92.4332 47.795 li92.4683 47.8165 li92.48 47.8223 li92.4878 47.8145 li92.5152 47.7833 li92.5191 47.7793 li92.5464 47.75 li92.5074 47.754 li92.439 47.7598 li92.4019 47.7637 li92.4332 47.7872 li92.5718 47.8926 92.7925 47.8711 92.9156 47.7422 cv92.9761 47.6758 93.0074 47.5899 92.9996 47.502 cv92.9918 47.418 92.9488 47.3418 92.8785 47.2891 cv92.8531 47.2696 li92.855 47.3028 li92.8609 47.377 li92.8628 47.4102 li92.8863 47.3868 lifalse sop1 /1 get_csdsepcs1 sepf92.8863 47.3868 mo92.8902 47.3829 li92.9273 47.3458 li92.9371 47.334 li92.9273 47.3243 li92.8882 47.2891 li87.2906 42.0958 li87.2124 42.0254 li87.191 42.002 li87.1871 42.0352 li87.1812 42.1387 li87.1285 42.9239 87.0445 43.6895 86.9332 44.42 cv86.9273 44.4512 li86.9253 44.4629 li86.9351 44.4668 li86.9624 44.4844 li92.4332 47.795 li92.4683 47.8165 li92.48 47.8223 li92.4878 47.8145 li92.5152 47.7833 li92.5191 47.7793 li92.5464 47.75 li92.5074 47.754 li92.439 47.7598 li92.4019 47.7637 li92.4332 47.7872 li92.5718 47.8926 92.7925 47.8711 92.9156 47.7422 cv92.9761 47.6758 93.0074 47.5899 92.9996 47.502 cv92.9918 47.418 92.9488 47.3418 92.8785 47.2891 cv92.8531 47.2696 li92.855 47.3028 li92.8609 47.377 li92.8628 47.4102 li92.8863 47.3868 licptrue sop1 /1 get_csdsepcs1 seps96.0562 43.254 mo96.0601 43.2481 li96.0894 43.2051 li96.0992 43.1934 li96.0855 43.1856 li96.0425 43.1563 li87.1792 37.3887 li87.0874 37.3301 li87.0582 37.3106 li87.064 37.3438 li87.0796 37.4532 li87.1949 38.2344 87.2535 39.0586 87.2535 39.8965 cv87.2515 40.1876 li87.2496 40.3106 li87.2496 40.3458 li87.2789 40.3458 li87.273 40.3575 li87.2593 40.3594 li87.2613 40.3594 87.2789 40.3672 87.2906 40.3711 cv95.689 43.7286 li95.7281 43.7442 li95.7398 43.7481 li95.7457 43.7383 li95.7691 43.7012 li95.771 43.6954 li95.7906 43.6622 li95.7554 43.6739 li95.689 43.6915 li95.6519 43.7012 li95.6871 43.7188 li95.8453 43.8008 96.0582 43.7461 96.1539 43.5977 cv96.2007 43.5254 96.2144 43.4376 96.1929 43.3555 cv96.1695 43.2696 96.1128 43.2012 96.0328 43.1602 cv96.0035 43.1446 li96.0113 43.1758 li96.0289 43.2481 li96.0367 43.2813 li96.0562 43.254 lifalse sop1 /1 get_csdsepcs1 sepf96.0562 43.254 mo96.0601 43.2481 li96.0894 43.2051 li96.0992 43.1934 li96.0855 43.1856 li96.0425 43.1563 li87.1792 37.3887 li87.0874 37.3301 li87.0582 37.3106 li87.064 37.3438 li87.0796 37.4532 li87.1949 38.2344 87.2535 39.0586 87.2535 39.8965 cv87.2515 40.1876 li87.2496 40.3106 li87.2496 40.3458 li87.2789 40.3458 li87.273 40.3575 li87.2593 40.3594 li87.2613 40.3594 87.2789 40.3672 87.2906 40.3711 cv95.689 43.7286 li95.7281 43.7442 li95.7398 43.7481 li95.7457 43.7383 li95.7691 43.7012 li95.771 43.6954 li95.7906 43.6622 li95.7554 43.6739 li95.689 43.6915 li95.6519 43.7012 li95.6871 43.7188 li95.8453 43.8008 96.0582 43.7461 96.1539 43.5977 cv96.2007 43.5254 96.2144 43.4376 96.1929 43.3555 cv96.1695 43.2696 96.1128 43.2012 96.0328 43.1602 cv96.0035 43.1446 li96.0113 43.1758 li96.0289 43.2481 li96.0367 43.2813 li96.0562 43.254 licptrue sop1 /1 get_csdsepcs1 seps100.498 29.086 mo100.498 29.0059 100.465 28.9258 100.404 28.8653 cv100.338 28.8008 100.248 28.7637 100.156 28.7637 cv100.121 28.7637 li100.146 28.7891 li100.195 28.8399 li100.221 28.8653 li100.221 28.8301 li100.221 28.8243 li100.223 28.7774 li100.223 28.7637 li100.209 28.7618 li100.162 28.7579 li88.0992 27.625 li88.0953 27.6241 li88.0933 27.6241 li88.0914 27.6241 li88.0874 27.625 li88.0269 27.629 87.9781 27.5899 87.9722 27.5333 cv87.9683 27.503 87.9781 27.4727 87.9957 27.4512 cv88.0093 27.4366 88.0289 27.42 88.0621 27.417 cv88.0679 27.4161 li88.0699 27.4161 li88.0738 27.4151 li99.7378 24.4229 li99.7847 24.4112 li99.8003 24.4073 li99.7964 24.3926 li99.7847 24.3458 li99.7828 24.3399 li99.775 24.3057 li99.7574 24.334 li99.7164 24.3946 li99.6968 24.4239 li99.73 24.418 li99.8218 24.4043 99.9039 24.3536 99.9546 24.2793 cv100.004 24.209 100.023 24.126 100.008 24.045 cv99.9742 23.875 99.7925 23.7549 99.6109 23.7833 cv99.5738 23.7891 li99.605 23.8106 li99.6617 23.8516 li99.691 23.8731 li99.6851 23.836 li99.6832 23.8301 li99.6753 23.7862 li99.6734 23.7735 li99.6597 23.7735 li99.6168 23.7764 li87.5132 24.5381 li87.5093 24.5381 li87.5074 24.5381 li87.5074 24.5391 li87.5015 24.5391 li87.441 24.5547 87.3824 24.5235 87.3648 24.4688 cv87.357 24.4405 87.3609 24.4083 87.3746 24.3838 cv87.3824 24.3692 87.4 24.3487 87.4332 24.3409 cv87.4371 24.3399 li87.439 24.3389 li87.4429 24.3379 li98.3531 19.5743 li98.4 19.5538 li98.4136 19.5469 li98.4078 19.5333 li98.3882 19.4883 li98.3843 19.4825 li98.3707 19.4512 li98.357 19.4825 li98.3277 19.5489 li98.3121 19.5801 li98.3453 19.5704 li98.4332 19.5411 98.5035 19.4795 98.5406 19.3985 cv98.5757 19.3213 98.5796 19.2354 98.5464 19.1573 cv98.482 18.9961 98.2808 18.9073 98.1089 18.9629 cv98.0738 18.9747 li98.107 18.9913 li98.1695 19.0215 li98.2027 19.0381 li98.191 19.004 li98.1871 18.9971 li98.1734 18.9551 li98.1675 18.9434 li98.1558 18.9454 li98.1128 18.9551 li86.3316 21.5909 li86.3277 21.5918 li86.3257 21.5918 li86.3257 21.5928 li86.3199 21.5948 li86.2593 21.6202 86.1792 21.5997 86.1539 21.5518 cv86.1421 21.5293 86.1421 21.502 86.15 21.4766 cv86.1617 21.4493 86.1812 21.4258 86.2085 21.4151 cv86.2124 21.4131 li86.2144 21.4131 li86.2164 21.4122 li86.2183 21.4102 li96.0503 15.0137 li96.0953 14.9854 li96.107 14.9766 li96.0992 14.9649 li96.0699 14.9219 li96.066 14.917 li96.0464 14.8887 li96.0386 14.9219 li96.021 14.9942 li96.0132 15.0264 li96.0425 15.0118 li96.1226 14.9688 96.1792 14.9004 96.2007 14.8145 cv96.2242 14.7325 96.2085 14.6436 96.1636 14.5713 cv96.0679 14.4239 95.855 14.3692 95.6949 14.4502 cv95.6617 14.4678 li95.6988 14.4786 li95.7632 14.4961 li95.8003 14.5059 li95.7808 14.4737 li95.7769 14.4688 li95.7554 14.4327 li95.7496 14.4219 li95.7378 14.4268 li95.6988 14.4424 li84.5972 18.875 li84.5933 18.877 li84.5914 18.877 li84.5874 18.8799 li84.5328 18.9141 84.4664 18.9063 84.4312 18.8614 cv84.4117 18.836 84.4039 18.8047 84.4078 18.7754 cv84.4117 18.7579 84.4214 18.7344 84.4449 18.7188 cv84.4488 18.7168 li84.4507 18.7159 li84.4507 18.7149 li84.4546 18.711 li92.9 10.8799 li92.939 10.8458 li92.9507 10.834 li92.939 10.8243 li92.9039 10.7872 li92.9 10.7823 li92.8746 10.7579 li92.8726 10.7911 li92.8668 10.8663 li92.8648 10.8995 li92.8921 10.879 li92.9605 10.8272 93.0035 10.751 93.0113 10.6661 cv93.0191 10.5782 92.9878 10.4922 92.9273 10.4278 cv92.8062 10.2969 92.5835 10.2764 92.4449 10.3819 cv92.4136 10.4043 li92.4527 10.4083 li92.5191 10.4151 li92.5582 10.419 li92.5328 10.3907 li92.5289 10.3848 li92.5269 10.3848 92.4996 10.3545 92.4996 10.3545 cv92.4918 10.3458 li92.48 10.3516 li92.4449 10.3731 li82.3668 16.4688 li82.3628 16.4717 li82.3609 16.4727 li82.3589 16.4737 li82.357 16.4766 li82.3121 16.5157 82.2378 16.5118 82.189 16.4668 cv82.1695 16.4493 82.1578 16.4258 82.1578 16.4014 cv82.1578 16.377 82.1695 16.3536 82.189 16.336 cv82.1929 16.3321 li82.1949 16.3311 li82.1949 16.3301 li82.1988 16.3262 li88.9976 7.29883 li89.0289 7.25782 li89.0386 7.2461 li89.025 7.23633 li88.9839 7.20704 li88.9781 7.20313 li88.9507 7.1836 li88.9546 7.2168 li88.9624 7.292 li88.9664 7.32422 li88.9878 7.30079 li89.0464 7.23926 89.0738 7.16016 89.066 7.07618 cv89.0582 6.98731 89.0113 6.9043 88.9371 6.84961 cv88.7945 6.74024 88.5718 6.75586 88.4546 6.88086 cv88.4273 6.91016 li88.4664 6.90626 li88.5328 6.90235 li88.5718 6.89844 li88.5425 6.875 li88.5367 6.8711 li88.5035 6.84571 li88.4937 6.8379 li88.4839 6.84571 li88.4546 6.87305 li79.7124 14.4415 li79.7085 14.4454 li79.7066 14.4454 li79.7066 14.4473 li79.7046 14.4512 li79.6656 14.5 79.5914 14.5157 79.5406 14.4825 cv79.5113 14.4649 79.4918 14.4376 79.4859 14.4083 cv79.4839 14.3946 79.4839 14.3731 79.4996 14.3536 cv79.5035 14.3497 li79.5035 14.3477 li79.5054 14.3458 li79.5074 14.3418 li84.4624 4.38086 li84.4839 4.33594 li84.4898 4.32227 li84.4761 4.31543 li84.4332 4.29297 li84.4253 4.29004 li84.396 4.2754 li84.4058 4.30762 li84.4253 4.37891 li84.4332 4.41211 li84.4507 4.38282 li84.4957 4.31446 84.5074 4.23438 84.4878 4.1543 cv84.4624 4.06641 84.4019 3.99122 84.316 3.94727 cv84.1539 3.86329 83.9371 3.91211 83.8453 4.05567 cv83.8257 4.0879 li83.8628 4.07813 li83.9292 4.06153 li83.9644 4.05274 li83.9312 4.03418 li83.9253 4.03126 li83.8882 4.01075 li83.8785 4.00489 li83.8707 4.01465 li83.8433 4.04688 li82.521 5.67774 li82.5074 5.69532 li82.5289 5.70215 li82.6168 5.7334 li82.6382 5.74024 li82.6382 5.71876 li82.6382 5.71094 li82.6382 5.57032 li82.6382 5.52735 li82.6109 5.56055 li82.521 5.66993 li76.5132 13.0606 li76.4859 13.0938 li76.5269 13.084 li76.5874 13.0704 li76.6304 13.0616 li76.5914 13.043 li74.5757 12.0606 71.1539 11.459 69.5914 11.459 cv69.5621 11.459 69.5132 11.4571 69.4507 11.4551 cv66.2466 11.377 63.8609 12.0079 62.5552 13.2833 cv61.7999 14.0196 61.417 14.9708 61.417 16.1094 cv61.417 17.6758 62.3008 18.959 64.1968 20.1475 cv65.8931 21.21 68.2476 22.0997 70.7418 23.0411 cv73.9937 24.2696 77.6812 25.6622 80.7027 27.7442 cv84.1675 30.1329 86.2085 33.0547 86.9429 36.6758 cv86.9507 36.709 li86.9507 36.7168 li86.9605 36.7188 li86.9918 36.7266 li98.105 39.2149 li98.148 39.2247 li98.1617 39.2266 li98.1656 39.2149 li98.1812 39.1758 li98.1832 39.17 li98.1968 39.1348 li98.1617 39.1504 li98.1011 39.1797 li98.066 39.1954 li98.1031 39.2071 li98.275 39.2637 98.4742 39.1758 98.5406 39.0137 cv98.5718 38.9356 98.5699 38.8497 98.5328 38.7715 cv98.4957 38.6915 98.4253 38.629 98.3394 38.6016 cv98.3062 38.5918 li98.3199 38.6211 li98.3511 38.6895 li98.3648 38.7188 li98.3785 38.6895 li98.3804 38.6836 li98.4 38.6368 li98.4058 38.6231 li98.3921 38.6172 li98.3472 38.5977 li87.4585 33.8418 li87.4546 33.8399 li87.4527 33.8379 li87.4507 33.8379 li87.4468 33.8379 li87.4214 33.8321 87.4019 33.8145 87.3882 33.7911 cv87.3707 33.7618 87.3668 33.7286 87.3746 33.7012 cv87.3921 33.6465 87.4546 33.6153 87.5191 33.6309 cv87.523 33.6309 li87.525 33.6329 li87.5289 33.6329 li99.6128 34.3946 li99.6578 34.3985 li99.6714 34.3985 li99.6734 34.3848 li99.6812 34.3418 li99.6812 34.336 li99.6871 34.2989 li99.6578 34.3204 li99.6011 34.3614 li99.5718 34.3829 li99.607 34.3887 li99.7886 34.418 99.9703 34.2969 100.004 34.127 cv100.02 34.0469 100.002 33.9629 99.9527 33.8926 cv99.9 33.8184 99.8179 33.7676 99.7281 33.754 cv99.6929 33.7481 li99.7124 33.7774 li99.7535 33.8379 li99.773 33.8653 li99.7808 33.8321 li99.7828 33.8262 li99.7925 33.7793 li99.7945 33.7637 li99.7808 33.7598 li99.7339 33.7481 li88.0835 30.7579 li88.0796 30.7559 li88.0777 30.7559 li88.0757 30.7559 li88.0718 30.7559 li88.0406 30.754 88.0132 30.7383 87.9918 30.7149 cv87.9742 30.6934 87.9664 30.67 87.9703 30.6446 cv87.9742 30.5938 88.0269 30.5391 88.0953 30.545 cv88.0992 30.545 li88.1011 30.545 li88.105 30.545 li100.162 29.4141 li100.209 29.4102 li100.223 29.4083 li100.223 29.3946 li100.221 29.3477 li100.221 29.3418 li100.221 29.3047 li100.195 29.3301 li100.145 29.3829 li100.121 29.4083 li100.156 29.4083 li100.248 29.4083 100.338 29.3711 100.404 29.3067 cv100.465 29.2461 100.498 29.168 100.498 29.086 cvfalse sop1 /1 get_csdsepcs1 sepf100.498 29.086 mo100.498 29.0059 100.465 28.9258 100.404 28.8653 cv100.338 28.8008 100.248 28.7637 100.156 28.7637 cv100.121 28.7637 li100.146 28.7891 li100.195 28.8399 li100.221 28.8653 li100.221 28.8301 li100.221 28.8243 li100.223 28.7774 li100.223 28.7637 li100.209 28.7618 li100.162 28.7579 li88.0992 27.625 li88.0953 27.6241 li88.0933 27.6241 li88.0914 27.6241 li88.0874 27.625 li88.0269 27.629 87.9781 27.5899 87.9722 27.5333 cv87.9683 27.503 87.9781 27.4727 87.9957 27.4512 cv88.0093 27.4366 88.0289 27.42 88.0621 27.417 cv88.0679 27.4161 li88.0699 27.4161 li88.0738 27.4151 li99.7378 24.4229 li99.7847 24.4112 li99.8003 24.4073 li99.7964 24.3926 li99.7847 24.3458 li99.7828 24.3399 li99.775 24.3057 li99.7574 24.334 li99.7164 24.3946 li99.6968 24.4239 li99.73 24.418 li99.8218 24.4043 99.9039 24.3536 99.9546 24.2793 cv100.004 24.209 100.023 24.126 100.008 24.045 cv99.9742 23.875 99.7925 23.7549 99.6109 23.7833 cv99.5738 23.7891 li99.605 23.8106 li99.6617 23.8516 li99.691 23.8731 li99.6851 23.836 li99.6832 23.8301 li99.6753 23.7862 li99.6734 23.7735 li99.6597 23.7735 li99.6168 23.7764 li87.5132 24.5381 li87.5093 24.5381 li87.5074 24.5381 li87.5074 24.5391 li87.5015 24.5391 li87.441 24.5547 87.3824 24.5235 87.3648 24.4688 cv87.357 24.4405 87.3609 24.4083 87.3746 24.3838 cv87.3824 24.3692 87.4 24.3487 87.4332 24.3409 cv87.4371 24.3399 li87.439 24.3389 li87.4429 24.3379 li98.3531 19.5743 li98.4 19.5538 li98.4136 19.5469 li98.4078 19.5333 li98.3882 19.4883 li98.3843 19.4825 li98.3707 19.4512 li98.357 19.4825 li98.3277 19.5489 li98.3121 19.5801 li98.3453 19.5704 li98.4332 19.5411 98.5035 19.4795 98.5406 19.3985 cv98.5757 19.3213 98.5796 19.2354 98.5464 19.1573 cv98.482 18.9961 98.2808 18.9073 98.1089 18.9629 cv98.0738 18.9747 li98.107 18.9913 li98.1695 19.0215 li98.2027 19.0381 li98.191 19.004 li98.1871 18.9971 li98.1734 18.9551 li98.1675 18.9434 li98.1558 18.9454 li98.1128 18.9551 li86.3316 21.5909 li86.3277 21.5918 li86.3257 21.5918 li86.3257 21.5928 li86.3199 21.5948 li86.2593 21.6202 86.1792 21.5997 86.1539 21.5518 cv86.1421 21.5293 86.1421 21.502 86.15 21.4766 cv86.1617 21.4493 86.1812 21.4258 86.2085 21.4151 cv86.2124 21.4131 li86.2144 21.4131 li86.2164 21.4122 li86.2183 21.4102 li96.0503 15.0137 li96.0953 14.9854 li96.107 14.9766 li96.0992 14.9649 li96.0699 14.9219 li96.066 14.917 li96.0464 14.8887 li96.0386 14.9219 li96.021 14.9942 li96.0132 15.0264 li96.0425 15.0118 li96.1226 14.9688 96.1792 14.9004 96.2007 14.8145 cv96.2242 14.7325 96.2085 14.6436 96.1636 14.5713 cv96.0679 14.4239 95.855 14.3692 95.6949 14.4502 cv95.6617 14.4678 li95.6988 14.4786 li95.7632 14.4961 li95.8003 14.5059 li95.7808 14.4737 li95.7769 14.4688 li95.7554 14.4327 li95.7496 14.4219 li95.7378 14.4268 li95.6988 14.4424 li84.5972 18.875 li84.5933 18.877 li84.5914 18.877 li84.5874 18.8799 li84.5328 18.9141 84.4664 18.9063 84.4312 18.8614 cv84.4117 18.836 84.4039 18.8047 84.4078 18.7754 cv84.4117 18.7579 84.4214 18.7344 84.4449 18.7188 cv84.4488 18.7168 li84.4507 18.7159 li84.4507 18.7149 li84.4546 18.711 li92.9 10.8799 li92.939 10.8458 li92.9507 10.834 li92.939 10.8243 li92.9039 10.7872 li92.9 10.7823 li92.8746 10.7579 li92.8726 10.7911 li92.8668 10.8663 li92.8648 10.8995 li92.8921 10.879 li92.9605 10.8272 93.0035 10.751 93.0113 10.6661 cv93.0191 10.5782 92.9878 10.4922 92.9273 10.4278 cv92.8062 10.2969 92.5835 10.2764 92.4449 10.3819 cv92.4136 10.4043 li92.4527 10.4083 li92.5191 10.4151 li92.5582 10.419 li92.5328 10.3907 li92.5289 10.3848 li92.5269 10.3848 92.4996 10.3545 92.4996 10.3545 cv92.4918 10.3458 li92.48 10.3516 li92.4449 10.3731 li82.3668 16.4688 li82.3628 16.4717 li82.3609 16.4727 li82.3589 16.4737 li82.357 16.4766 li82.3121 16.5157 82.2378 16.5118 82.189 16.4668 cv82.1695 16.4493 82.1578 16.4258 82.1578 16.4014 cv82.1578 16.377 82.1695 16.3536 82.189 16.336 cv82.1929 16.3321 li82.1949 16.3311 li82.1949 16.3301 li82.1988 16.3262 li88.9976 7.29883 li89.0289 7.25782 li89.0386 7.2461 li89.025 7.23633 li88.9839 7.20704 li88.9781 7.20313 li88.9507 7.1836 li88.9546 7.2168 li88.9624 7.292 li88.9664 7.32422 li88.9878 7.30079 li89.0464 7.23926 89.0738 7.16016 89.066 7.07618 cv89.0582 6.98731 89.0113 6.9043 88.9371 6.84961 cv88.7945 6.74024 88.5718 6.75586 88.4546 6.88086 cv88.4273 6.91016 li88.4664 6.90626 li88.5328 6.90235 li88.5718 6.89844 li88.5425 6.875 li88.5367 6.8711 li88.5035 6.84571 li88.4937 6.8379 li88.4839 6.84571 li88.4546 6.87305 li79.7124 14.4415 li79.7085 14.4454 li79.7066 14.4454 li79.7066 14.4473 li79.7046 14.4512 li79.6656 14.5 79.5914 14.5157 79.5406 14.4825 cv79.5113 14.4649 79.4918 14.4376 79.4859 14.4083 cv79.4839 14.3946 79.4839 14.3731 79.4996 14.3536 cv79.5035 14.3497 li79.5035 14.3477 li79.5054 14.3458 li79.5074 14.3418 li84.4624 4.38086 li84.4839 4.33594 li84.4898 4.32227 li84.4761 4.31543 li84.4332 4.29297 li84.4253 4.29004 li84.396 4.2754 li84.4058 4.30762 li84.4253 4.37891 li84.4332 4.41211 li84.4507 4.38282 li84.4957 4.31446 84.5074 4.23438 84.4878 4.1543 cv84.4624 4.06641 84.4019 3.99122 84.316 3.94727 cv84.1539 3.86329 83.9371 3.91211 83.8453 4.05567 cv83.8257 4.0879 li83.8628 4.07813 li83.9292 4.06153 li83.9644 4.05274 li83.9312 4.03418 li83.9253 4.03126 li83.8882 4.01075 li83.8785 4.00489 li83.8707 4.01465 li83.8433 4.04688 li82.521 5.67774 li82.5074 5.69532 li82.5289 5.70215 li82.6168 5.7334 li82.6382 5.74024 li82.6382 5.71876 li82.6382 5.71094 li82.6382 5.57032 li82.6382 5.52735 li82.6109 5.56055 li82.521 5.66993 li76.5132 13.0606 li76.4859 13.0938 li76.5269 13.084 li76.5874 13.0704 li76.6304 13.0616 li76.5914 13.043 li74.5757 12.0606 71.1539 11.459 69.5914 11.459 cv69.5621 11.459 69.5132 11.4571 69.4507 11.4551 cv66.2466 11.377 63.8609 12.0079 62.5552 13.2833 cv61.7999 14.0196 61.417 14.9708 61.417 16.1094 cv61.417 17.6758 62.3008 18.959 64.1968 20.1475 cv65.8931 21.21 68.2476 22.0997 70.7418 23.0411 cv73.9937 24.2696 77.6812 25.6622 80.7027 27.7442 cv84.1675 30.1329 86.2085 33.0547 86.9429 36.6758 cv86.9507 36.709 li86.9507 36.7168 li86.9605 36.7188 li86.9918 36.7266 li98.105 39.2149 li98.148 39.2247 li98.1617 39.2266 li98.1656 39.2149 li98.1812 39.1758 li98.1832 39.17 li98.1968 39.1348 li98.1617 39.1504 li98.1011 39.1797 li98.066 39.1954 li98.1031 39.2071 li98.275 39.2637 98.4742 39.1758 98.5406 39.0137 cv98.5718 38.9356 98.5699 38.8497 98.5328 38.7715 cv98.4957 38.6915 98.4253 38.629 98.3394 38.6016 cv98.3062 38.5918 li98.3199 38.6211 li98.3511 38.6895 li98.3648 38.7188 li98.3785 38.6895 li98.3804 38.6836 li98.4 38.6368 li98.4058 38.6231 li98.3921 38.6172 li98.3472 38.5977 li87.4585 33.8418 li87.4546 33.8399 li87.4527 33.8379 li87.4507 33.8379 li87.4468 33.8379 li87.4214 33.8321 87.4019 33.8145 87.3882 33.7911 cv87.3707 33.7618 87.3668 33.7286 87.3746 33.7012 cv87.3921 33.6465 87.4546 33.6153 87.5191 33.6309 cv87.523 33.6309 li87.525 33.6329 li87.5289 33.6329 li99.6128 34.3946 li99.6578 34.3985 li99.6714 34.3985 li99.6734 34.3848 li99.6812 34.3418 li99.6812 34.336 li99.6871 34.2989 li99.6578 34.3204 li99.6011 34.3614 li99.5718 34.3829 li99.607 34.3887 li99.7886 34.418 99.9703 34.2969 100.004 34.127 cv100.02 34.0469 100.002 33.9629 99.9527 33.8926 cv99.9 33.8184 99.8179 33.7676 99.7281 33.754 cv99.6929 33.7481 li99.7124 33.7774 li99.7535 33.8379 li99.773 33.8653 li99.7808 33.8321 li99.7828 33.8262 li99.7925 33.7793 li99.7945 33.7637 li99.7808 33.7598 li99.7339 33.7481 li88.0835 30.7579 li88.0796 30.7559 li88.0777 30.7559 li88.0757 30.7559 li88.0718 30.7559 li88.0406 30.754 88.0132 30.7383 87.9918 30.7149 cv87.9742 30.6934 87.9664 30.67 87.9703 30.6446 cv87.9742 30.5938 88.0269 30.5391 88.0953 30.545 cv88.0992 30.545 li88.1011 30.545 li88.105 30.545 li100.162 29.4141 li100.209 29.4102 li100.223 29.4083 li100.223 29.3946 li100.221 29.3477 li100.221 29.3418 li100.221 29.3047 li100.195 29.3301 li100.145 29.3829 li100.121 29.4083 li100.156 29.4083 li100.248 29.4083 100.338 29.3711 100.404 29.3067 cv100.465 29.2461 100.498 29.168 100.498 29.086 cvcptrue sop1 /1 get_csdsepcs1 seps137.096 0 mo138.369 0 139.406 1.03614 139.406 2.31055 cv139.406 3.58399 138.369 4.62012 137.096 4.62012 cv135.822 4.62012 134.785 3.58399 134.785 2.31055 cv134.785 1.03614 135.822 0 137.096 0 cvcp137.102 4.27442 mo138.164 4.27442 138.965 3.417 138.965 2.31055 cv138.965 1.20313 138.164 0.345704 137.102 0.345704 cv136.027 0.345704 135.227 1.20313 135.227 2.31055 cv135.227 3.417 136.027 4.27442 137.102 4.27442 cvcp136.213 0.953126 mo137.25 0.953126 li137.869 0.953126 138.178 1.20313 138.178 1.71485 cv138.178 2.1504 137.902 2.4629 137.48 2.4629 cv138.248 3.66016 li137.781 3.66016 li137.025 2.4629 li136.654 2.4629 li136.654 3.66016 li136.213 3.66016 li136.213 0.953126 licp136.654 2.11719 mo137.18 2.11719 li137.518 2.11719 137.736 2.04688 137.736 1.69532 cv137.736 1.38868 137.461 1.29883 137.18 1.29883 cv136.654 1.29883 li136.654 2.11719 lifalse sop1 /0 get_csdsepcs1 sepf%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 10.0%%For: (Barb Backes) (Arizona State University)%%Title: (logo_mg.eps)%%CreationDate: 6/25/03 10:16 AM%AI9_DataStream%Gb"/LgN"ULZ/legJ(QD;+aFRNKfc<\S.i024rR?tLEqrJE&]m,p3)@(2T[)pP'+Kf1=o,te\7-.rA$#Q-'GZZ!_<<:6NX38okJdH%l1Y)Km>'fZhquZ(E^)brDI37rf@d3+s)n:bmdYh%T"CG]OEKa#O8Z`$F76^rpZ4NX/k`2:h:8Ea]A'6m%sM*ea2c`dc/$:tS&kom%I_*;/\_b#db3qMW#gJk7^!Jt2T&tt*GMhlGh<]UGh=u2P0@F*?T6F3,IuYehrUSc_+"lGX924tsGPEn-5bh\6]_o!t>-a6DP@S%U%gjFEqHFS@6Ha)'re(n@p4ma;.NTP>H=-#T$rA=9>Bg)"Nit%J;Lf-TW2+V<I[b!IMmG5\#bGTVH#8YDXmiR8X2fno!E-[5qI(O`O%P%nOG]#fK*U_@qoD4p'a]j6$Yh:H"Nk0AbXl>nX8@(r\[<aYjjGE[&FiETtOb)]kXS?/NU48CjHrD?<h.2:r?8NMX\EZBq1Lt0l?%<&3<$V>U>Zcen(Q>[ogtmr&0"`%lNVNc0.9Qc*G<=QD9/f_+[9Q_//e3)9(-9)a57Hk)a^^/s5)KeiOUs7pMkf)]RBB28IGaUUN_%lK;RsdEL@SCMgqP13`>WjATtCO3=m/c]h"lo^?rFmr'hNG0i">YtmbUW-c6hdCUt&arg2DT9&9Gqsf",e!p0"QWMeJ:NqjaE9Q.b%?W#Ai%o;(hs0i86G(*bD:\:,P2nOk&hd/NEVA<P2/GA2]qq]Md\KAt3D_=7^'Z^3_`asJjh;uP0h32UGbpOP#2tPbV7pg]@G]EQN%:.<X:JZnNd\)6$?+)lSh]'_]*6e!4@.J77YAFu#jO3a15?_sSO$n]'AVH0IW[+^F3`*6*%Y90o3>i375`X@A4hS$V8h`Z@n]6\cJ%`_.4io2NEW48\qKl%0V5cdW.K9lO(Fh`b;[+#QiqA*"5YH(Flj\,Y,Y))Eue\(:*?m^jQ)IJj*<nlc7Kq'qqgX]UJ5hl\W)/nJd4%Xn2SHrI)EXq.]R_He$5>#l6>irRprAF1#ar#l6UcrA4ZU1^&9=h.gYib#t]aeu,%'.VGU#H+Rp9p:\oH^!cQDV5=&qWVTr#oIp0B%<3)9^X]AVG[F.iO/#Cp:p!`:dB.^gQlK?nRbE-6)97GM;5Lkqao+5N;oVYT$TCf$ZBqJR)q3gqIIk$HO8:PBhgISQMp.9c!PP.Os%C/#ZqeuV$_TA"5^Xf1qbgZ3%RIAPA@kte//DA?sYURZCa3Jne&rQ15h3OpO+jGg8lkA?4t"i$9oqklZd-I*`\c-J@ZqHKr+Ir0p#%.P.Y!e"?K4^#T%V:NEUor_tB7TDmn&;G&pOCgUC_18(-rq.Xn>r]'18`Go\R_Ocs<jd^_'?.RfnM\PPOBs`(Y1:;=0R_@j]g->P8%<0V=g+30%Gor$5Omq/blA2i?'aKYn@GE^u4.o"`^F%QdNU$5"8;iWrMj/B:iNgk(GAu,*Z]IQutS[Gdd5N`hCVe/hq3ThA$f!*+0%j`f3tQC5F$g,`tL)lHR,.G[_d8,:W^UC9"S+(r-Dni.0&;&`(Y4cW"l[IN#*A\BYZ>_b!29rmLE97freNPG9(,G3$6r0k;kM9,I]%?`!7;r6;EKq-7]N]@tkG_,&).r)t`K4T=Kpm+$DVAGj]Uc%aR)DgliH([\cYSc7]_o!ppR\+J"e<D;.i=16k;gTGrP'=O.g[>a1@%?hV[kohk4?HU2e?(>H6<\R0TP)0oP#_6e#[\(f>6*=Gau>i*WaXF2,303MU,EZo;<IaLZZO8K^!*GCA>Ksm=<D*)T]iE&<L6<U:G%-,E/PmY,hdk!4B>qlPeTl;nR\,BXp6b"[sn[ho-niE>GJ\S3YLp;dOh(J``N<fIJrXn8V<ohaA^5^8CJm'X:6>)Z^ieDB.'artnC%H(!9t3FI+Q!A324PgZ*@'9j!-Xq*':D=>^M>'#[9E3Wl/<FP41HX>rmXs^'DX`r>lPj9jbfZ;s><EXIn)ME1&B+J=/U]I!-p2"6i%`a%hod`TtgqQuOA0g;PL&-q)fW@.?lg3eNGQ$\OuZVak@rI'r7])D[+N=7%NOjom[>!d^[7^OJ,RA55LTp:X9/Y&S![`,LOStGm%%,F:Fin/92Wi.MleZV"r=et@*<+6f9XVucA7,H^.JhpUOmX[@kce?n*Md<)Cdg,ca;`+(p*LT!L2/$`l1oIKoZFKc6%43Eo8;a.WS%eirlE=S)!XQ50eS3NP.(-g(1!rt/]3D>#\"-fl(4PU!pg?dpf$8$SBW?eKYqH^O7gl.=TNdHceV>R*GHs#N>H,HIq](pucnH85T;%-j.ok<#Y%pD*b"keTt[E2YmjJY_BOVCX'(^7Y('2^4)!NgmSFAqEFQKRK'[*ei7*bN[[0t()\)XqBl+s]:`3)bqq#2b1a%a&>=/D%$N^4O-ZrqJUnd_kpsfQ?dr@dKTcTufI_Cu)(@JsW\E:9&?/L$nC,=uaUI]7iX,a_e-HQ&GA_H8tAhFP#5XS?>H9JM=64Z)4f#('D%TV7Ajkjg\[-i`Y"Er*=e0(O9k44\a:!Bg!K6e%uOe=M_BWr6u"3A5@8&b<s.>!/bjlbObrXQ>.=`L_AU3G4i[F-[F(QkNe"`uI6I%:%[=hLt54g*LSLEk`/\L-t/I9htn02F=ab2A#F`YnX7+EE>blFe&BdWf(qpuLG=;8kG`;XjkUJDd=73/dis?amA2n92b;IC:]0rH%LJ#mu;F`]TdGiMjB9D<f*E.<Ob<mASeqd3\)&8"hFj0TSKPB>0UZ]X<CP,[:X)&X9`u<&@;JPq`f9rMu'@C,sWtYHuD+(iMah9l$%5@`%B*M<+sJ*XAZVuJ`MU!!NIe^#I'DQaYHqTsaQDDqLuH]4)KH%^W]4KmFpNTks`S_IfTeoFPjND$OUPqi$:ZcG'!N3d?M;#E?B%]bn.Yeh4PR)ZH(PlX,Ps"cRq;ZHL_SB\TqnCPXh=&4;_HUTbU-Hd=?Tr5,Xs?XT#n+eGQ![1Qq#P>5l/69VYIW^cq"B:+slfOH^`%gR$p-nL8Ct"',IBau6ANMqq116\k=Z<\B#sCQZe5&c8i!=Sicb0X'.OCP18\7mpuVf@[;LLcSN<?M;P=etK59#-$hs<a(E<($Ld6%dl)XG6B%jlH$qHnpBko.[G"DGbYcq6>nuDb:%ipKrp5nO:2!5q_4,*kIaJP4q&Xk::"IE*PCUSOUY8\l88.n$7I.GTg<ih/Z&*b-%]`"ZEB>5V9.mtuV.HZ*OU06ZC)2&1I&+%'b(<a$pCH"&0Z'A($F*Bb0)Rl@cPu6Gmok>CYQ"Zek?:PI1\IJ'-6SH]&DAcNlIPj,^%hP06]k>''4WRB3JAQ"kmI[c;jrMI[sm>1>+o;Rkm&._HH*'FQSPB@KkF(MhV%97=3=_f7b>d>t"Ku!%Qo:^Lp'fiFNXl/+f?1*L<%eln@k5GN@OO#$Bi@MP"IJPW5H2#%ro3uZ0:13,)F2V9n1mrZNZ18:Y_[MM;jX95oGE$VY?Ym_*2-2WacPaGnpR%^h`=Pd6s)WqLO%*2kN$WF7ZY2+t-1jehZ/,1^=@]4Hau-<K+h>?4G\4'KA@)rK$u=WQN[(Q_cdNXjcM#CXr3EDbK%%+!,*DR?LaOu9V*:`lNe>L^+$%=h)<A7-.rp=[/%7BGRLLAhIhAmb-K_m4>8$CKC!B92'hNkt6DnQLKC_eMWifC[0>sDc^-^A!PeMS(m\Ke&T4(G9:tjp9Euc^4!N'%\bj1gL;39#\%AP6pY>G[o=M3oK_kOG[j5Tnh9Y).Grti3SWA"Os(lt%H1eZBs-WiFL[1kokHfg(GrPKhjnm`'BE)`o%#USjI[Ag.%[boYQOblcd\.)ZWF^&#HDDn!WB!kcZ(7TbO2eA13BbNF6j#:j#;n1\cfB^t5\R)B7Fe,YX3j7!nY/Au:HqOUVg8rl+eS6O"euop\%VH$lTQ%m9k].Gtbol@HF/f2][=dN]fQY@>(@Hj+rg!(;e`Fc@j!F7;n&lR7K=l`"T`'mdQR2bfURss1s0OG_E(/_spZ6Z]!ms5Ss%\uG#,WlquPIBBhZC9FPU)QL!DMO'Q&=dN,kQ::%2/Z%Nk8h?\2i_$,"7p_,8?=mJ$e6I%>.E<F6cRsFJZq[$s:91`qMq"Yn9$/TZ%QpUAc,n]=MM<h[/bIA)qYHc"c;iEG!+'n6M2Jg5kXMQ_D`5'u--m=?[@L0dT(HT>()o)(s^[qokqs'*c55FDppYP_kD;E46h9%<<%<dRnRES2WS?#\X\;<(CuZBMi_QCSFd-[kE'-]E1GGGi&'s#KE-YMLiQ6md#r4mD)jODed8hG'*nj37%-piLbHc^&@hUPNrS`mY"c%c0i9$j.CKR2g7KCI-s.Xin90=lE61%)2-Zg9G_-OQVK*.1ZCa5Xj]uf00P<Cj"*?s1'.h$M3X%@`bg,O,NNF3U5W4JAL>=Hb:kP[%37fpegX+%RHPu)s6_7lQX3ACHk$fWXZ3f:<aW,SoX!i%TAaZQ:0U^+LbipHlB;q(dp+k;u-9]Q5<tU%<#fB8f@["72'.NGq/Q&;j%MtEqU>DP,<7&hLt/tGP$(MSdOFh*a)LgVm1\.k'1MeI!D-Xu@0>bd*l(@eLN`s\$mQ,rWqDYm2igl&g8OaD'JM"oMDX[FgQ/N$aS%U*s=^-Apen;4oCrZk.ppM.1<;gLVb$k!e=)BO2G`XJ1OZdE%Sdk%:SA==;f@6u*HfAPlsnj&h1BY=6.TPWMb:+DRN:rQDd0/Qdg'%=Qq`qHFrF[<d:ke;/A`<)cFY@/B"Ee`3sJ?gY#US;@JSE[MU)(&huef(aNg!N717Tk^V#]WO5WN[>)q(X0mWB;VTa>I]3K$Y[V@f%&o<t>ZN,o\2GLqd+gs2/$Ti6AI'6r?Q8!Grm!9L220f@;:CUZ_nPf#q?injalF6'1Fp>rEY_['s7CA%HfLE9/qCPVmj&9>4ePIS0%9/W%:-<#o$I]L%tBA,jeCPB@(#JA"L!nO`679,g\/BCN[Nj,\f2HHr]6^T.-G(p%P^uVY,G#u+H\UaMC@=m#8(DpU=`<k[/%<?tr%<jSmbC.u'NT%-*,M-e(nX.`k:=KB"#@C"Es(Dq$Ih$N4J%=!C8=#7#:C7DXf9]QC9I1<g&,$V!=G>c@[M%LZ-Q(C/!&[+R&FnCMm%W:<!te:o!:s+huurU'"67kn?mL=:ugcVB#jEk;9k])SCn0)_h1g?$SWh>A5.05j6\:Vo*RB]AkA(]5p&CbGLn.6a>6S)`[E)=osP%1""<C2(&4=>YesYFthau9_e.B%l8YgkHeUFT:bi?-6?*83:eq"rH"2&r:D':^bGf3fs;mlS.Ie9"sO?-DK\>XN^[AqnTAd]adbC4%H=rgsD2s4NK$Ju9Je!Dc_p.*skVq]ckW?_0aM?8Qd"0Ptd#$,/d#l\?d$]\ORE<CqUX5pcX3e&sZd?2.]/9OS%g*muep<71DiL]1%3CE#Y6f?JKd,341^uq*:U#2R,U$n]LU&UekJe+<<)knRO.tTR?mfF5$Imf>#T4D8bIYjYQ^5:\qcetIbMkZE0S"c[PX.lqp];!3;%bL1HT>Ou%j>K[mh(S)Au(EF>uQoVEc1tJ4AH6bP<+mt4$O*9MM34F(:I,>)Ki@d2Q!N,[TZa1G\-TLqHj9tF$N6^tJVhaU8h<5U@%H!\g,m/)'mJ?j@r]B&Q7>^gFm-GKNT1EQS*r:tgGr+R58?dA]LQYudDp`I85?^&&bNfRB"r'I$fB7SX+pE+<No/ASE&Zkn*Sq;@h%'?H_Xh;!I-A;,:1BdMYsK\eZ-N"!K&;(1TG(@9F+m!pq'o5N?&_[]4Y3j3mP!"Ofi3j,YpLL'-Tl2tuj']\`)2!hFsojDG5*"\BS%4>[L_Uq`O=.#",^UC@-#@f-`QkkU'A$[MUEB(n93rO^grT5O0QIl$ugcZZk]0;$QtIjJltq7k0\Is_.arasbQ](ssaG+[l71DRQG%0BRJb4Ztd,"jd;#lp&4V]mb;Wbg$092Ld='b&8s^4W<#N`BM#L]\1F%JVgknc^qaMUb"[SNmP7:6]&S&5$Ru@>+%&6o2#/W48il(%+(h/DmQ^KnnY(@h%Yn#W'khS=C`f:9_u`+?@*beaGQUQ!<WDXeR6OC1:9H@3GB9&lV!)iEPjiO,9\>T-@m9W8dPF%SOHecth"5Xt%k@#CR8E4=C7=H42F.Nlo8Z2>t9T:TgFMO)%jG?etP&Q3fo8kVan3/:T@'<MbM*C>$kZ!<IHIEmYVOMbk<*'t_jCY##q/O3oGrfC^%*V2Xqp/rkZO!f.q'/aG?i2.jE+*=S[00<M\o@$-s!Zq!C46l6BB92q9eC!]gTA=r\%sutt@)C*[BN&Lk"sZ4o'L*oN':&iNS+,L9%4H0\,jm"OeR1:sds#_1f^Wc/-8rS)^NYL*!'8l)d2>9YT+]dPmF[J;K-W?:=s,O124#/8%e;6*^JP?1F8%"$qUEWAPl_.;=%Q\l%%'jl%ko=[HG=&nM$TrRs!>s2$Jae8&PX7TfGJF%%Qq**/PGJ]/DXq05+#'HR<KA+0K1P3.iLF1+`F`L9qI`^3Q,7T;W*,2'1:r,Fn%duc3J0b.>GZjWhPbn%5XUhOcqCr:A#cO]hIVp&:"%cN(`QqXsCn)S.(%Lq;g6TWBR&b?Qi6gbK@:HI`i-Gk)Y$V89d2tifm`"8`.%Z,I<Q7nV;]4Cn(TY=9%I`93h3\UE;&`Z"luJ@h$$(i@u52uIY[7_?+\O)VBLUN)bA#qFqcLH=kFPgr^&*i[ro1ldM9CY`FW1%KU_%H1!rhNe<C"3T,Z.&)B3#GnV&W+^lbpEG53qOX&Un"65DQn^r^=EB<CE@?bcIBKBk"cVO*lC>s]P1$*GML\h2Q_HS7\m,)H2=E>h8%]o6F8OC=Zk(Z.E]?d:>SpNAQu/_^p/+'CR1a=;5A>!?-$K&E8(U"=L,Da%Uik3g^s(Unn-Rsg%#M9IPIn?jUFI[Dc15!Am!s6f;M%,2dkNqhVZDLC[0Zl5/1dg?7cD/,H1/rq6]sSZ6u8US7Ap-!kCrFa8%LrSc`+reKg?;pCj-Ht_iVZ7e,G]t&OCNHO0!q#0bkr;?*^%]:8-,O5h'NOR_dHOpIJSS)*K/a.XD8N]^TPs4G,R.hbdoHh]Rg>+hA>+*TYfpQJ>^aQ;gdq&_42m[pO\\bk^cm<b8:Da,BSdAGmj%j1W06B`@B0Qb'[dVL1[L9Fokc:jB/2h<XbsItOZb.o#M<55^B&S5MoLf3cV>T1KL`bD3"amk,^=c`cgB))m&t^&NKZDnh%t_o$A9%q^ZBqQW5M,2(N%+-hS\d^IU@ni"p)t#2HOqr7k(3IsSW;ICp@&^:jAGR_+#5J%Yc!X/DH%?A_dFn6Y"S+s2:3FG"rZ8V4I'fAGpI%NTf\(:\UKQA?l+^RXG(kHr85bar"VAm?RKf-ee<8M8Lc['-Ve0/sY"cp\3;&#M`[DDB1ta0-C4+*QX5,qoe^l/cVu4bnm"DmKUDZ%aD,p9ls)LL.pr9"j732]ZQFBm:GNgF?f#&E?6,*d?BMiq:H-n7]D9qDmn^]Yo'tu'mVf_X@?OD!?enuEb@GB$p[9;?+8!fK03<Z'%Y^>.gLuGl@EVFFUqY,5\fO$9Q*\R8d%+2PrS,^'I&llTS]=PZ&o^O.i\$DoGAaFRN?`^/iduV8Ur;L<+XgX:$DQ`CKhXB;C1GjU[%e_S^2a)3B1[s)>3k1@'ZP.O4d-EI!Ipm@3#[l8V6p[E8W?:Zn`P?TrAoQ]V]:KS`_$=A0Fq[CDh.d5lX,P-"2YTq,&c,&1acn5Tl%%dN5:[s&H?/Uhij]p%[#GOpmd`u4lfR!n\YkO[TTpuGmI%m_c#a4^I`5c1`9b;ltFL?JNh"<C&&pSl0XC2NA%T*HI8IeYViLE?^,%.75'\luAZ=Qh-mmq"p_E(sd9K6QPlF5ZGU,6h]/gS;dBDfl''r+)BUEq5'0S7`2iCk@_LncTS;RjkT$`"fg`GjJ!T"\VdV]q(,sY%d/5lHiOjDB"H)A"8j"^kPu#\I?dA=^rhimdSFEIMK8YKJ$i4-$!_=D+m/.1Nbk^jpC*o1VcjQ)7-cs]0X9VAGRZ$fE-6q%3dM4nA%go'tu/0q2A3^Bj4U2T_QP9'e$oAj2G!5bs<XC_h8'#73HL4r`]o6c)`;C3AFGMZ>VoG^[^D())(ch6eLn9?fP.l(H08>$sB,\n88%gFbt[VUt4G=Q`F.AF6UiEDWu@PGG=TdWai+r)r^CA26n?@j4_XHjHiLQ7mY'!3J`qWoSVZUn/:G-"aAjM3&-CRhS6do+ZS?6<TU5%>sFWR^t!sTLfsN"6@J@eWKU[><7@NZi@I'YYTsn797MWhd.]"kg:6`CqW6#''1G,Y1+n%D7.3"=q9s0K`K.15$jO?8#SEG3Z(1P`%V:GtIXoOZHX6[YE-A1;U#^^-:p"9.)8F9$n,BP9\-keN?U=J(MX-j67Rae&e*CMhcfCVe&.aWUAEu/AHR:R*m'>?F_WdCQq3or)P%9V2K4mR)s)+GGCUr:&Q9Bh%@uOZM910jRWj9f3*&;l,LP988b1o2*&*>)G'ASPttt?6&=&5S[9l4Y@#*=Bh[-!'Ma)j\Zqp3K1ag%QGf:ois1\0\]@7>D@[AbG9X1gW07/]&g/[u$?RHdq2oMtc2K1>D(TguW9H&fi("3*k\2'-%!niQZQ2G:FW-8)ijdp#eG,Nj:Q=Ki%/b^8EQX?QbUS_2V5L!RVIF7dPT%B^f+,G"JJ91<$,%?*'8KSBj10BEY&&(WREb\:-b)7PX8F0CXjO@j8F(1]8pBF'c9Hfc`K<k,T%T`c<(aS13QEZ.pl!S"\K'+KQ_a:N\U<).qb6g_IB7or\j7DonM631.uTG.a8<`_=+W]_.&BgVqJd1T?&B2lE[UD1WtW/7_*)\P6#%?1e8)/.HWGntIt-"3=Q=ncMl)D:?(RCL\6'a6I`f%8mL0aQ,pd=C@PF)r@M\_LeM5L.'@.1mMI>J@[>\,T"Od%]BFtQ!8gh8%M]?%_.^JS(s=>i9Vt9BRb@R%Z<A`I!^Sn$::_80XA&*p5I!"qeQ0gd%35h5dAhg1Z&lJT"=TOM4Xb_FeRb*XEI%X#WR`pT:lbDkS((3O%s'k]8.\!B*)P(3(olTpM@>;BhAj`8R.;o95;F16j$7b!9eZP;<(>g)4("\(1C9K+V!l`dp:X<=l/)C4n=k)_i^*,e$YF];T_.6J?%dOA)Z:eLYTel/&iM(^H%1#.REoJt%kX7oPRe=N5@Fe;>X"sh/q,f7(ne`R-)"cDXBThn6M%7oe_O(-Y)B`)K+TKu&Del<laEeCY7%+$`R#`?G]r$WYak$?]Vg&^;QU]>>\KabX[SA43JXHd2gegs[CN=G1@?!Pot*T<]%D==s&1B`Mh-,cDPnJg7&n@28GA27[PC'MOW]%N=)B/#?(5)5nDGAOg%hl'=mJmPYU`]?ogdPd8%&C!PPRmmYc"B%U=3110Tu_,H/u^5#hZi=A`HC1P&rd4EV#H-WM(MkF1&1a?N*P%-QD8Ub:=93[1;iNP:FW(o=jER:\7/NSgpR3n)?n,-5rk!((C?q"6PY4]]cjLe13sE]i38%#6F$gLR`G%+tPVE!d(E(paUj-FO]H=%Mk_u3.2:&VP1s5W6m1VkOA$Z2TGJZFO@8K<;!djL^"&T:kc"MjX'D==G%*Yt8O]&)kTt8<B+Z&E:$Rt(11Zeg)07np!)`QgB'B%j%+L*A[YGBR_m%Rh!T%ANT75QEm'Or=^QOo%mC*ViO'),$ZmrbRLp*13XPUsmB6\<&D=!ZG/TcU<?CUM0B6_Ra(crHW-%.Jt5@%'J9%>.r;B3eXT^jj[DKZT&:LHX]@F5VF_u[Sko@SBjt+$8<<#THod2TDE:K</N1@'7usbX.iPFU+B@qjJ;EK5^dCDIj<PNN`EUcfXU@s%<G0.-<nkH"X(ku]an7(PiYsb&(]E`BLW)E-Srmd.&4-FeO+j_f]s:,.&q3J2_OaqHQ#VZX@o3U+E]'gZQ_HKLOWfnV77PZn/L-'(%F9IF@6sYm\JmBL@RYj(]K+'K'TY_5WVk$f='sut(I;MNYlWc_b6aH!Q+q1i/TW-(Q;#qCUeKMMH+?fnt,>EmS8\f)kUqT>JZ%]=M%#]AW-La4LFiL:R>Q#.ln.3A=92E>/j,JA86-[ItsW!1!.'h\*:UBPYZTi$&_Nk/KGB78O!4<p_4M&MqR&J9j$MB]2gSpa6+#6n-p%PR"D3O<np4X$3?3"ta91Hk*!48.V.sQ:L7`QlrJ-0<B@m#9`5nYk?V7\KsTO#q1LD91*_'It"=#L&<p0-%TM^St0I`3qgCc7@dN#%\@!K&5YT29>9)'^;u9*P`?A*GHXB(sO_dn2`O"kJ3't-;CP&Dmi\/Vm]_Gb%*9[mQ&tQ`:h:])<*lYu?'@LTrCWjOEp==EoaC+[&%mi-4S5_t1@V7(+C,W+R5GT,a$E>cHCa$7lMBlGA[laV+888KiN`-DRJ!'*t$KcI(45"%4?CCnp!8-E$h!VV>[!YU@5N.?"-DGYK]%*-?W&"%4>?>o=ageFK3IPt`?_b.=$9OOR\f0@*oL:n]=IdYoBN;.:E=Qd-S!*-tF9@"iGU^.L/,A%`;0>OQ*Z3"2%26&XeO",1^X%@W+6t3)V!N:F;"eRArsCDd]9`ET%gJ+p^V3KZT+_9!RZ-l)-hkj6T-UKM2pZ<bhM2hG5;MPYE:]/![nqeC;CB6I@Ur,='B(oL>@*%:6[0Ac4:9Hl9bPWYL$io?NnMU5XM)C/Ae?&qJQo.Zc:$B-(%7);JH!YPsD8VIHYDd+R:K<Ark*NNXnsj22-;%Y'8-\@I=:;PYC75%X3[Ps/!L<bkD"T2]0Q1jWhs;VREBmuPY=eq@840kJ:5`d)Dp)$PYst.LpM[G[upF7$C:$A$T`U<)C'eq3$`GG@r3hL7^S5@"asQ>%]g2gR']^.B0Iu2clHt+5L2K\[dkb:&A(WXYE%"[:>6#2(0L-J@k(4Je$j!94,]k(P:@1106>P.th()C%N,tt<WBqB,,J#:p/_2aD%M%E`-dh[l;.r_+P27fBHFVGHW^-O6=#EV]<5o0`JnW6AL4b.!o66?K$p&m%2Ma$kU<J/,[jlEC(S2,YQV`+u%s"rD?/Ymp-[R-Zs%a9NLuE`WJp"]3lt8>Hte<d5<V5b?tQl0+fOH12W#fRB;'%?Ic:U8^c:6=u'8,-fo4lT,J[!TbJ@N]N_geS\LViL_mQ4V+0>lJPYV%$a-TXJhnf2%0oXM?*I,e7B<NCfTn!N"lh3DM\WG;0_SsXY/i*6as-]5j[DR/B/U<:Q7`2X.YhloJi4W*j$\2kd@m8(8tR6cNac5*%GXqa)Y$?8<A_(uD(KEWAV:;nA:T)A]@%he^iiA0ij?jkUXD&B,I2j#P0p("#!flALB4YXS0e<r1j/o\VG7O&ZE?D<jdHHI+bOpn=%+Mi)8]Z:G[m$6-"(QGaXDsh<A>dZ"DJ99m_d"Ob7*`4pAbSr!_4GuHFPcJipUHj?>YI+6[Dh!I-aJHt0c((H/$PhUNSl2N-&Ko'@%$L)S#U"Tif1/7h=J83h!4^59[f`+o!(rNMB#$`!A$)C%a)%.Q=%jfCGcRh\V5%HGm*P*cS%nY*'eY?N'9<OTR"I:TM<R'bXB)WKH%[U%2@M)?)Q88$)d]T?!EQ2nh^C=jWABh9Y[)Ja3#]=p<VgKE7;WgXU\%OT2dh4b!ZZ7H),]'FIW>StA``0;UJH8:'-&Ki+kK8o%E%lQc79E<MGK]kn<B%2+f\UI!)7C2[63gMkE]f!%(n+;PS`a-s[o*O^t31Mp#@G$O%%EL&3+J$!W;l5FG!&iX<\&t!6h$_p\p+LKiX%(JU=n&#0LA.jfLD,B=\C90`T"cEKEmPs18]KjhAtEMSN3Yd"M"!+6]X.2$-b1!/_7J99>a(!D@TL7pn$J,uHF)B@M^=.74!9&YF)%/$,dRF2<+)/omIm),H:bR_=uDhU<%E]Jcu*%.i%aI<3:+2(ECF"q1"p'LP@qS\q[o,A](sckgFTXS.SaZ?bH<>6h6R_[^"[BYHo&%f_MlM9$<7\p.I4nV7tK8hudP#gPi/'XsLFab6e9.`eteERUe,C@6aUk1]AM@fK/TSWb+,=,`@%h4Q21ZP-$r8Z=4Z\[`%=2A2_B3%G.L`h2=a.==)F]"G58q;%7i*jf?BO#:-pTa#F/<1Elg9Vi)iu`gg]l8F^_7eO<uc>fqtJjjW$9"pIcB'!ig*$U[FNNbMBD+#bM4#%DfZQ)NZkVdlpsI/'oSZ$;ELRN(I_i%I/jECN2%0S*[*pVZ&\+K=IiiZ%`+E<3Cgu7O!l5.#Qs)"habV*eZmmEas"<S5Fba=*0`[n%"8bVE2`o!g'V?R+>"\4A(#,qoQ@`NZ`E)AV>o6VT@<nM]9d/90'kInQ%0N"b)7q;_d5.k74&aNb4V1si@Vr/N0TWo=^c:1)Vo]<2%B'BH!m>OL?/]1P7X0&Q--XFdHI+q<X/@F_b'5Q[ICM2%Q30^ODm]^ck4K1`=P3lgKerSi6>atJ9+_Sod@#GeAN0*o?X!P)BRCNEN%\9\jFa/HX?^fHC%9&66+4fa;T@C_IUREDrn(Q<V`?qeZm<fD="DM\fS@$,,6&Y1Faa`)0f#/ju?J/E-t"uE>b$,PiJOG)Oe`',3n%9rQB;e;XqUL8JD),)D9VVSKctZ+geEV$UaU[2@tZ-5aea8L.TY(bAeQhj\PFg`4\9)Eq>)Jc8EqY4R6,L]bRuF1J_gZ#NV;<\-#U%@BS27aVk>qjcH!88B!pIqD)ku!4sp9=CpX'J>Iu0+U?;3l+&T_Xp;+1a43sdWL3uHJFt'D0C="u&8.0-\q1S&H-drZ!5oRU2[g(1%eQ\&"+ZNh.f+0/:Eje\s(1?<B\?.0"2PBY/-]gr9gbBkeEJgic<lUQT8(JbMl<Aqi=m%#)PIYjY9+UF;:eLs@Op9)_QF"(Z1F?Tk%9Em96!YKK^eVWEHW@R/9`jYRRXLIn4i4b-#Q0ighXJMIrfRj7&8X9aZZ]U'PrWd&q+"MP&(%[.NPWIN+`E]]Tkp"[ClY<3d7TPVK%p6P'V_5:Dp"E_P\*lUa0+"@@5`NY'tAm3utrAWIY,hD9)+^fJ^"dlJ`AU=dfCa#YeS3b3NS3a]i[cgn+f_(u@TufVKZ=/c2]8?V;%4HPH\EeGVPE!#:poE%jM)&F^-ZJ'u)B__!(l=1k#\faus<Ajq[6s=#6WX5X5GH"g_j&F-''Jj<YCM`aE(n!KYd"_e7jrWK;X6-Ag%[c8o.Y6a%YE,JnNW"WpXWel#aK2'oIm_8[Lf'>O[r5V%ki17G)3^2@uo6QqQGAU'QXr%2CqD)t!8A[;u&<E^lp@3`6eX?HXnkJH8%X+^j:)m53J<(0Sh&n9I=gG_Vd_6optiqRFLh,K2EAlkD]@PEe$4IH>L0d)98c>444@V%tkXNhg:=F-?b#$E+F0lZ+P&d!leE@d=T%dds]675>3i1W&\;*BNOc0UKm]>uMbi9OnmOSKA$Rj&o2>Dgn/K)Q,GjX".C[+hDtrIBX%-K/KaPVCs0U_GDKc.9r?*oUQQcHB3+O%!0aF&Ldbg1hY]L]ll_t#@13@C+9Ye5Tm6sY(!oVq@O3$H"gX,C3)jgMRLlK^lSB%G6F[BFPhMU?l,!j?9'[4>_Z_2r`HYnrZ_$l"%9gC&^Zm8.60V27j,o%G]8aAl5aVfc<LfenIUXIHofksW`X.9l+jrRM+2dKXfp33s*M$[/g"T??/KLZI+OEc\*H5D5O\!o)dooN`'%QTq`6L$>#(9fttAjsRQU.I,#/0i3ujV.`?lC'MW*KiZf.`C!D::<=uM%*7:=0W#1GW2oRA[m_7"+H"Oqkf.a[7(o/1[tMArp8Am8%gL*p8LF@o]+<Xl8#5AUFA&C0?Df^F8k#+,p*g4&ngP5:(*IdE-aZ*ipifGdYTXOjN,eVt75Um[&D&F[j/+&M-N\foZb@umr^bQb@%@J?<Q#o^1n=D""N^jp/G8/snG**Yln]a58XiQ/PR]%k"Bd^P0m[pJ&Z"-Xoh1oT)>R_9pLR-7#E<$?:A!PY>UE@X@_W*)bE`AC"T%^T%ig9T`5Lbpk;B@YmcTd;CAn;JlQ<"a^M(JW:UYgO*%Q/d.P+!5P\BD7qBm$A-_r0T]*OKEGiE'Zeh5"PiY&F1$@K1-$"?RaYe)%)7/M\12%$20MkPR6lSOoMY*,u>[T']U,N?Z"9@NiZr`Gpo?haV[Mu1n0\[$X95Z3n_mn2>P%%WdiAdl)\SI%"UpCf9Ah%iQat]*P%RH4[lP?A/`>dCA%B,P-L!nlUk8Tifoa`X\V"jP23%)6c&eKABO+E+A8dO]G'Po4f6UMJ0/-)S7n5)UeX.?OD[dJ90[:-9YT;.Eo4%M>N0743YH*ME<Xo@fotS6d9rn/O,:;0Q+a^6F*aq*p8oj855DD[uK8ieJbhjc\!oAWL70p\d<t((mEu'#X%_sfg+/:Vk1;(ABSE"%!>3nUp.i*1H)h=66LQH9l-(4>5T#RGcu3V5e008+Tf7W0,1u8$'QI+(4TmAL8DuQJXqmo@)u#X#FmW!,(sY8+UH&hJ%r=q[ff,SA%BdK>[iZY<&\0-mN!JM&2Fl6)c!YT+D7I9QLMQf9ESEkb6_*T9)`i7>l[48];jD^In!s)jNVX:m65YIfZ'4:T<GlB4(UXg)/*ClEc%WGm&uW"/m'YVThR%/0[G^eHa_#\[CC,:lTMSKZ?f$5(L,Y*!AV-7*ujm-uL"Ku48]1+Aabk%M!d:F4)AMdTOsRnBbd/_.odl4Jd;%?99B@#Ouc_UuGXN%R86ni,GG;"8"!tWb#RQ=W_eB,/L3!*S3dlL(`m-QEN8WM<H_I%^R2;%!lk#LB&iKVh=":2,K"C0(-Q/[P\\6%#<B"pp/#6XD4t&D*2_ke>NmkO(2Vs?_h$)I)c1gO1F&NI(1M.].F;,s&81NtKm!enX:2nTd4'TcE-BuV!]Ui9/?#HHHstrVXu[Xf%NG'\WohcMeJLB(nZhR1gp!,b1j-4jaWM_(V2As'5YrZ,(d`*8eV<b6=IBnXbLckmk`,>VNK$QP*g:;d-n9?F:ML&E0Xrh;^GlkRo%\`:n"e`4r`D[=/M7!*-31r?J&D:Y\`:]]o!i\Fu[O_H/=EW$A;]-e:)a3a4D((V74YHF-eMd>(,`HY9"Rb2W%??n%'LJ,u:/koV#%2%I,q*f^\q32u)G974snFV'sL^sNaaY/cF(SQMh:H8b'3F)amV%Vn;81"EF&K>=`O1=QZ0?`e/cMDH.Sa6kC"3%pp#nOPeCS@O\c%12.JHTH76D!$6:V\2g@8HEZ:X4kM/o/:o)V'#j1*Vlbk2m'[0TTGrE>4TJ?D!h*k(+;o]c/b>@2-6b9IA^]77>bXMdm?r"AOgI7G%pnTDV&>O",GEH!%Lh:L0ACXh`L59T^l4,U%4'$0"0.Kf"^Bf)n?nOmMDPg*k!nTV?5$A%">j:n%.Tk'S&P*nm_V&cB@4m;M*nS5k%7<NQ:/S$`76`K'*UP3J(>g2^Rr9.SWrBcqZBfC*hGe8ps@VDSFn"Of[;;'@HCV-/"D+`LkS/*%.,pA8r(bBEZ6LPM#CuB/Doi\aa%EI+D>E`/7/3_"<UDcE\:iAE/kJqDhLQ8ND9TMP^h!8"$Z7>\P#J\+n<i`m`K'o?eP"CJ6$_!W62<[B9Hic?sq0!n8=/b0r8>C"D/%K%o!o8Tl3!KiY-le&*SBMnlB%CIpE(61=kn0HWOi%CeA#N5?7l$j[G;aeaolo;c0:b_uelOG0oULIsM)O1\U^\]E#26YQ580fugF%;AnF:ooJu&&7CZ6go,ci]-37k!0$Uc8-;;Q!;)Ro_!43A-gW$T5f'U@E_RK5KUNS=ZK3t_9kCmSoi0EC/_I+,s2>(EVlL'=[231e%IBP/>A6\ocBUmmUNia"5qqC]l>MKm"dTut1QioJo0d0uWTlk8R)2jHccoBFpr'Z'0_?pA/$4e)1KgA@Xl"sTeWm9CQ7dYNZ<^U,^%1oS':X3h:F1!J+h86;+-RDOs=gsRnq3s"kkbl0$+n9/jDf4,a&Q\.q>]gdOQIALdg"*#Q[c^Kj0`Ffe&T:(PYCfb9A@RsROAk3t#%rg<o@/To9jCPpegmhNre5kI5d&/D^r>Shq=.+I%`FpnGm$<W/W8C&6Np/l;p*4Jk:?%!85&+mRqJ*CoP'^%FJoHiR6nf4TN'-u$R%Zl0Kl:YNUEdFAXrWC3cZ*Xb=XI:h(8`"Iri7l>k)e2*7D/`BD,ntLIt^*0L"D>T)M&A$'*c#Lpe@fq>;f#*eA+Af-g.&A,eZnsPe%h3$im-&BC^O@3,re[Cmu[Rra3msX4LP9tH.hYO>4;;6Q?Za`=rX7N-WjhZAcMbe3E"_m[hk@.TghN8d^s#^>p3Ae:NieU?VlU]u/%5XeWm;.F6+k,fk>8=;hB>&p6keI,sN*eQN.2KknD'i5i3,&03T0$R`nTkHg4eno_&RXo*M+3-/QE(J&$[)9L@&;pO.Bg=<E&KLF[%a+mr6fa$m?G=49te)ua0B7NH37aJU<>iA]dJb]\+[aH3"LAoKlJ_DDdPX#JE/T@W6Y[AgJcBbYM""#sso4Ho%?sO/sgc>ZLLc;+f%pB6<^_i@d+Takp`f@a/[[a.GsV`Q_d#Kp6uZ:lgG!?+&anX.UR!Lu6gh@8I'38]bh,/l_pA=LJH]s-juIg*U+pk<hj1NYY@U[B%g%'?Ag$T6Vu5dc[Eg3&o)p"mZ\3[fc95a8/93KUH<OrRMBb!hVG4W6)MB^@gP7k`MN:J;J&1e<2?!h)8p756;Xk^r.W*e_h0/TZNkC%H\SU9S$LL*33F2kj-`S9j;TJ!;JTR)1n_r[U8"Y^nT_<V#AK"T2.PgoeSlWOO7^=4dhQYeYF7c>gQr'-Qr&]'ZN(,0q59$eDJ_f<%1.?RpY>,YL`24^s;^kH.g]>_)Ti>V&69[pcWMX?kanH/Hi4C5kaeTUV3#,iEQ2+;X\.)8/OCC;UD=7VUA1_+<7H&3/JAr%=B<N.m%\;i\#9G["&Lnd)m1%>kn#Ih[@B9=V[SME@rEgH(b$$!KNTI41]?P\7rp_p$_RKn1"mFcMn-ip.,!qHaKDm#?G/u2q?/.7QrmW9YB%U*io$bmYeJdg[/]4,,IF_07b0]Q"q`glBr-FTLcD2<9&WiN2'o!qco@WOrdg5:fZcTnik][<F=s9`K."&\GT^drMdM'YH+->De9(%%(ICP><1=UZRZ2alasl:[(nCm]U?k\<*L8ml!h88aeV57YVIZJm8Gqhmr=h`#`ktgb68EC7kXLNmhc?Z=,$iIM*68O07)OZ$AbeS%+UNj,E&cD1Oe4q$3H3L=41HnqS%ujF26PH-Er]Ug^@alp0^k$+34pbqUlk<jWU+"ORX"q5U1))*UTPUa6"8!i/YIdI6tl&+)Xf7$%?"LL2Qru_tX(V>'EWP7Cg@_/%W_^I(QKN:jnig:KaR2E>'K7B#)T#-\i1Sn,_Y$4>r=rZ:ZP.87i6>5HLbO.dB->1%f6N1hOIPcg%@=(PL$]PFrHeV'!.qe_6fu:5GfcC0t\(LXO4S+RSG3`=8oIRJ`UlOms;kRXOQ)r^T4'[,j_f\#eo;rRY0Th9gE/?4u\i<#IK3bJX%$$Kkt2]mYuqfuYu?<1U)C%gFj?ds,H\8rKk3kXYKdDF;'+I96!L)_$$lm5euVX+Epdd4Wia@"*@`:N,i`Mh_Id7h"9$D-4_(G6l]%T<'($,]Ei=[tk*T"U)D+OEkEeF.]P$P^$:blpX=3n:L$/g@gJj)R_Ef^2'tLH%]tcG7>>SSdgH$KA@"V`=/4c"W_@tCQ>ru-@"QG%baJ8Kl[<2)4<FU"-dm22L2,MJ<tXc>+SV"E]M3:Le].R[^r,PopcK\SNl"Z]4W;Pr*Wfge3'>h+X)>GfXNrToTcMn,%U2^9/:Djt%b4Ji]1S,7u6L-CL;F5cC7NlV=:To9n$":H!qRP=NX'm6X+h!T%#N4SQ0FF=`Crg.>&pJ83VONs]?CL5%[Z-se@QHI9QSL8K"5L`$%X/0AT>I/KF6J4rCHlni$[gh26;l]3cgH'/V8IT.8M2\k'A=K"Mh'`*H3"n"!VhU-PmURE1;#JQc]Q3M.hk]Q"5Nt6=0m/p6eJS8F%XE4li)H**-9Csd=#jh&NGaR]02B\G]OZj12"=Ees2XL63?`o3EMLcs-@VRb/cU/WR@U'=!(mg$V\=3@2Y=A_e\]i4mg:#cmr+\de%CmbmG9ftP!h.qh;8KMWNFB31O['s9)X!:V-#(hH_N1mmINdW_!3#IMlLBh+pZ<'Y1gTSs9iN!m'*LgcaKd&K4f9"e:0ho93kJRMj%eSKhFs&>S0[RQisS)kN9C<m_<jtHnT(UOO%3'jQUQr8:/;1!HJ$"R4s4Zl385<%UR\(Zr'^cRabCXE]4V0b'/:aS&7o6-sPo%[0G%#)%FtH`h@q*gkRD)-X9-X-&=qN^t5^Fi0PiNk0NkrqdRX<OKQ3s4,lI&%h9O0!B2:&$le-QTsb"&o`3lFSW;UQV[80ooDmm&%hYt%%sL5e,"3D1rb6n,?ejFa_EZ@kp[CpmT>,j/4aaoVPmZXqG#._chfi-kq=qkhqs2uI6<.Bc>3RR*^\B3O$"8:6n=KZ'`q,2hp<.[I%+.RbQROddY$_Q>CIb`cSB3TZSC@h+ApAY-kls.4~>%AI9_PrivateDataEnd